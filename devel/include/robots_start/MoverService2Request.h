// Generated by gencpp from file robots_start/MoverService2Request.msg
// DO NOT EDIT!


#ifndef ROBOTS_START_MESSAGE_MOVERSERVICE2REQUEST_H
#define ROBOTS_START_MESSAGE_MOVERSERVICE2REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robots_start/NiryoMoveitJoints.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace robots_start
{
template <class ContainerAllocator>
struct MoverService2Request_
{
  typedef MoverService2Request_<ContainerAllocator> Type;

  MoverService2Request_()
    : joints_input_abb02()
    , target01()
    , target02()
    , target03()
    , target04()
    , target05()
    , target06()
    , target07()
    , target08()  {
    }
  MoverService2Request_(const ContainerAllocator& _alloc)
    : joints_input_abb02(_alloc)
    , target01(_alloc)
    , target02(_alloc)
    , target03(_alloc)
    , target04(_alloc)
    , target05(_alloc)
    , target06(_alloc)
    , target07(_alloc)
    , target08(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robots_start::NiryoMoveitJoints_<ContainerAllocator>  _joints_input_abb02_type;
  _joints_input_abb02_type joints_input_abb02;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target01_type;
  _target01_type target01;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target02_type;
  _target02_type target02;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target03_type;
  _target03_type target03;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target04_type;
  _target04_type target04;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target05_type;
  _target05_type target05;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target06_type;
  _target06_type target06;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target07_type;
  _target07_type target07;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target08_type;
  _target08_type target08;





  typedef boost::shared_ptr< ::robots_start::MoverService2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_start::MoverService2Request_<ContainerAllocator> const> ConstPtr;

}; // struct MoverService2Request_

typedef ::robots_start::MoverService2Request_<std::allocator<void> > MoverService2Request;

typedef boost::shared_ptr< ::robots_start::MoverService2Request > MoverService2RequestPtr;
typedef boost::shared_ptr< ::robots_start::MoverService2Request const> MoverService2RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_start::MoverService2Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_start::MoverService2Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_start::MoverService2Request_<ContainerAllocator1> & lhs, const ::robots_start::MoverService2Request_<ContainerAllocator2> & rhs)
{
  return lhs.joints_input_abb02 == rhs.joints_input_abb02 &&
    lhs.target01 == rhs.target01 &&
    lhs.target02 == rhs.target02 &&
    lhs.target03 == rhs.target03 &&
    lhs.target04 == rhs.target04 &&
    lhs.target05 == rhs.target05 &&
    lhs.target06 == rhs.target06 &&
    lhs.target07 == rhs.target07 &&
    lhs.target08 == rhs.target08;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_start::MoverService2Request_<ContainerAllocator1> & lhs, const ::robots_start::MoverService2Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_start

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_start::MoverService2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_start::MoverService2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::MoverService2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::MoverService2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::MoverService2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::MoverService2Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_start::MoverService2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe2e99216136a9c3e3f68ced32870e6a";
  }

  static const char* value(const ::robots_start::MoverService2Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe2e99216136a9c3ULL;
  static const uint64_t static_value2 = 0xe3f68ced32870e6aULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_start::MoverService2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_start/MoverService2Request";
  }

  static const char* value(const ::robots_start::MoverService2Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_start::MoverService2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "NiryoMoveitJoints joints_input_abb02\n"
"\n"
"\n"
"geometry_msgs/Pose target01\n"
"geometry_msgs/Pose target02\n"
"geometry_msgs/Pose target03\n"
"geometry_msgs/Pose target04\n"
"geometry_msgs/Pose target05\n"
"geometry_msgs/Pose target06\n"
"geometry_msgs/Pose target07\n"
"geometry_msgs/Pose target08\n"
"\n"
"================================================================================\n"
"MSG: robots_start/NiryoMoveitJoints\n"
"float64[6] joints_input_abb01\n"
"float64[6] joints_input_abb02\n"
"geometry_msgs/Pose bms\n"
"geometry_msgs/Pose place_pose\n"
"geometry_msgs/Pose batterylock1\n"
"geometry_msgs/Pose batterylock2\n"
"geometry_msgs/Pose batterylock3\n"
"geometry_msgs/Pose batterylock4\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::robots_start::MoverService2Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_start::MoverService2Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints_input_abb02);
      stream.next(m.target01);
      stream.next(m.target02);
      stream.next(m.target03);
      stream.next(m.target04);
      stream.next(m.target05);
      stream.next(m.target06);
      stream.next(m.target07);
      stream.next(m.target08);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoverService2Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_start::MoverService2Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_start::MoverService2Request_<ContainerAllocator>& v)
  {
    s << indent << "joints_input_abb02: ";
    s << std::endl;
    Printer< ::robots_start::NiryoMoveitJoints_<ContainerAllocator> >::stream(s, indent + "  ", v.joints_input_abb02);
    s << indent << "target01: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target01);
    s << indent << "target02: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target02);
    s << indent << "target03: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target03);
    s << indent << "target04: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target04);
    s << indent << "target05: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target05);
    s << indent << "target06: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target06);
    s << indent << "target07: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target07);
    s << indent << "target08: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target08);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_START_MESSAGE_MOVERSERVICE2REQUEST_H
