// Generated by gencpp from file robots_start/MoverServiceResponse.msg
// DO NOT EDIT!


#ifndef ROBOTS_START_MESSAGE_MOVERSERVICERESPONSE_H
#define ROBOTS_START_MESSAGE_MOVERSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>

namespace robots_start
{
template <class ContainerAllocator>
struct MoverServiceResponse_
{
  typedef MoverServiceResponse_<ContainerAllocator> Type;

  MoverServiceResponse_()
    : trajectory01()
    , trajectory02()
    , trajectory03()
    , trajectory04()
    , trajectory05()
    , trajectory06()
    , trajectory07()
    , trajectory11()
    , trajectory12()
    , trajectory13()
    , trajectory14()
    , trajectory15()
    , trajectory16()
    , trajectory17()
    , trajectory18()
    , trajectory19()
    , trajectory20()
    , trajectory21()
    , trajectory22()
    , trajectory23()
    , trajectory24()
    , trajectory25()
    , trajectory26()
    , trajectory27()
    , trajectory28()
    , trajectory29()
    , trajectory30()
    , trajectory31()
    , trajectory32()
    , trajectory33()
    , trajectory34()  {
    }
  MoverServiceResponse_(const ContainerAllocator& _alloc)
    : trajectory01(_alloc)
    , trajectory02(_alloc)
    , trajectory03(_alloc)
    , trajectory04(_alloc)
    , trajectory05(_alloc)
    , trajectory06(_alloc)
    , trajectory07(_alloc)
    , trajectory11(_alloc)
    , trajectory12(_alloc)
    , trajectory13(_alloc)
    , trajectory14(_alloc)
    , trajectory15(_alloc)
    , trajectory16(_alloc)
    , trajectory17(_alloc)
    , trajectory18(_alloc)
    , trajectory19(_alloc)
    , trajectory20(_alloc)
    , trajectory21(_alloc)
    , trajectory22(_alloc)
    , trajectory23(_alloc)
    , trajectory24(_alloc)
    , trajectory25(_alloc)
    , trajectory26(_alloc)
    , trajectory27(_alloc)
    , trajectory28(_alloc)
    , trajectory29(_alloc)
    , trajectory30(_alloc)
    , trajectory31(_alloc)
    , trajectory32(_alloc)
    , trajectory33(_alloc)
    , trajectory34(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory01_type;
  _trajectory01_type trajectory01;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory02_type;
  _trajectory02_type trajectory02;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory03_type;
  _trajectory03_type trajectory03;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory04_type;
  _trajectory04_type trajectory04;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory05_type;
  _trajectory05_type trajectory05;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory06_type;
  _trajectory06_type trajectory06;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory07_type;
  _trajectory07_type trajectory07;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory11_type;
  _trajectory11_type trajectory11;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory12_type;
  _trajectory12_type trajectory12;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory13_type;
  _trajectory13_type trajectory13;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory14_type;
  _trajectory14_type trajectory14;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory15_type;
  _trajectory15_type trajectory15;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory16_type;
  _trajectory16_type trajectory16;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory17_type;
  _trajectory17_type trajectory17;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory18_type;
  _trajectory18_type trajectory18;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory19_type;
  _trajectory19_type trajectory19;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory20_type;
  _trajectory20_type trajectory20;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory21_type;
  _trajectory21_type trajectory21;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory22_type;
  _trajectory22_type trajectory22;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory23_type;
  _trajectory23_type trajectory23;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory24_type;
  _trajectory24_type trajectory24;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory25_type;
  _trajectory25_type trajectory25;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory26_type;
  _trajectory26_type trajectory26;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory27_type;
  _trajectory27_type trajectory27;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory28_type;
  _trajectory28_type trajectory28;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory29_type;
  _trajectory29_type trajectory29;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory30_type;
  _trajectory30_type trajectory30;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory31_type;
  _trajectory31_type trajectory31;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory32_type;
  _trajectory32_type trajectory32;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory33_type;
  _trajectory33_type trajectory33;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectory34_type;
  _trajectory34_type trajectory34;





  typedef boost::shared_ptr< ::robots_start::MoverServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_start::MoverServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MoverServiceResponse_

typedef ::robots_start::MoverServiceResponse_<std::allocator<void> > MoverServiceResponse;

typedef boost::shared_ptr< ::robots_start::MoverServiceResponse > MoverServiceResponsePtr;
typedef boost::shared_ptr< ::robots_start::MoverServiceResponse const> MoverServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_start::MoverServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_start::MoverServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_start::MoverServiceResponse_<ContainerAllocator1> & lhs, const ::robots_start::MoverServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.trajectory01 == rhs.trajectory01 &&
    lhs.trajectory02 == rhs.trajectory02 &&
    lhs.trajectory03 == rhs.trajectory03 &&
    lhs.trajectory04 == rhs.trajectory04 &&
    lhs.trajectory05 == rhs.trajectory05 &&
    lhs.trajectory06 == rhs.trajectory06 &&
    lhs.trajectory07 == rhs.trajectory07 &&
    lhs.trajectory11 == rhs.trajectory11 &&
    lhs.trajectory12 == rhs.trajectory12 &&
    lhs.trajectory13 == rhs.trajectory13 &&
    lhs.trajectory14 == rhs.trajectory14 &&
    lhs.trajectory15 == rhs.trajectory15 &&
    lhs.trajectory16 == rhs.trajectory16 &&
    lhs.trajectory17 == rhs.trajectory17 &&
    lhs.trajectory18 == rhs.trajectory18 &&
    lhs.trajectory19 == rhs.trajectory19 &&
    lhs.trajectory20 == rhs.trajectory20 &&
    lhs.trajectory21 == rhs.trajectory21 &&
    lhs.trajectory22 == rhs.trajectory22 &&
    lhs.trajectory23 == rhs.trajectory23 &&
    lhs.trajectory24 == rhs.trajectory24 &&
    lhs.trajectory25 == rhs.trajectory25 &&
    lhs.trajectory26 == rhs.trajectory26 &&
    lhs.trajectory27 == rhs.trajectory27 &&
    lhs.trajectory28 == rhs.trajectory28 &&
    lhs.trajectory29 == rhs.trajectory29 &&
    lhs.trajectory30 == rhs.trajectory30 &&
    lhs.trajectory31 == rhs.trajectory31 &&
    lhs.trajectory32 == rhs.trajectory32 &&
    lhs.trajectory33 == rhs.trajectory33 &&
    lhs.trajectory34 == rhs.trajectory34;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_start::MoverServiceResponse_<ContainerAllocator1> & lhs, const ::robots_start::MoverServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_start

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_start::MoverServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::MoverServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::MoverServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7567aee55e9b8d4faeb6b6ca8f552807";
  }

  static const char* value(const ::robots_start::MoverServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7567aee55e9b8d4fULL;
  static const uint64_t static_value2 = 0xaeb6b6ca8f552807ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_start/MoverServiceResponse";
  }

  static const char* value(const ::robots_start::MoverServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_msgs/RobotTrajectory[] trajectory01\n"
"moveit_msgs/RobotTrajectory[] trajectory02\n"
"moveit_msgs/RobotTrajectory[] trajectory03\n"
"moveit_msgs/RobotTrajectory[] trajectory04\n"
"moveit_msgs/RobotTrajectory[] trajectory05\n"
"moveit_msgs/RobotTrajectory[] trajectory06\n"
"moveit_msgs/RobotTrajectory[] trajectory07\n"
"moveit_msgs/RobotTrajectory[] trajectory11\n"
"moveit_msgs/RobotTrajectory[] trajectory12\n"
"moveit_msgs/RobotTrajectory[] trajectory13\n"
"moveit_msgs/RobotTrajectory[] trajectory14\n"
"moveit_msgs/RobotTrajectory[] trajectory15\n"
"moveit_msgs/RobotTrajectory[] trajectory16\n"
"moveit_msgs/RobotTrajectory[] trajectory17\n"
"moveit_msgs/RobotTrajectory[] trajectory18\n"
"moveit_msgs/RobotTrajectory[] trajectory19\n"
"moveit_msgs/RobotTrajectory[] trajectory20\n"
"moveit_msgs/RobotTrajectory[] trajectory21\n"
"moveit_msgs/RobotTrajectory[] trajectory22\n"
"moveit_msgs/RobotTrajectory[] trajectory23\n"
"moveit_msgs/RobotTrajectory[] trajectory24\n"
"moveit_msgs/RobotTrajectory[] trajectory25\n"
"moveit_msgs/RobotTrajectory[] trajectory26\n"
"moveit_msgs/RobotTrajectory[] trajectory27\n"
"moveit_msgs/RobotTrajectory[] trajectory28\n"
"moveit_msgs/RobotTrajectory[] trajectory29\n"
"moveit_msgs/RobotTrajectory[] trajectory30\n"
"moveit_msgs/RobotTrajectory[] trajectory31\n"
"moveit_msgs/RobotTrajectory[] trajectory32\n"
"moveit_msgs/RobotTrajectory[] trajectory33\n"
"moveit_msgs/RobotTrajectory[] trajectory34\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/RobotTrajectory\n"
"trajectory_msgs/JointTrajectory joint_trajectory\n"
"trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/MultiDOFJointTrajectory\n"
"# The header is used to specify the coordinate frame and the reference time for the trajectory durations\n"
"Header header\n"
"\n"
"# A representation of a multi-dof joint trajectory (each point is a transformation)\n"
"# Each point along the trajectory will include an array of positions/velocities/accelerations\n"
"# that has the same length as the array of joint names, and has the same order of joints as \n"
"# the joint names array.\n"
"\n"
"string[] joint_names\n"
"MultiDOFJointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint\n"
"# Each multi-dof joint can specify a transform (up to 6 DOF)\n"
"geometry_msgs/Transform[] transforms\n"
"\n"
"# There can be a velocity specified for the origin of the joint \n"
"geometry_msgs/Twist[] velocities\n"
"\n"
"# There can be an acceleration specified for the origin of the joint \n"
"geometry_msgs/Twist[] accelerations\n"
"\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::robots_start::MoverServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectory01);
      stream.next(m.trajectory02);
      stream.next(m.trajectory03);
      stream.next(m.trajectory04);
      stream.next(m.trajectory05);
      stream.next(m.trajectory06);
      stream.next(m.trajectory07);
      stream.next(m.trajectory11);
      stream.next(m.trajectory12);
      stream.next(m.trajectory13);
      stream.next(m.trajectory14);
      stream.next(m.trajectory15);
      stream.next(m.trajectory16);
      stream.next(m.trajectory17);
      stream.next(m.trajectory18);
      stream.next(m.trajectory19);
      stream.next(m.trajectory20);
      stream.next(m.trajectory21);
      stream.next(m.trajectory22);
      stream.next(m.trajectory23);
      stream.next(m.trajectory24);
      stream.next(m.trajectory25);
      stream.next(m.trajectory26);
      stream.next(m.trajectory27);
      stream.next(m.trajectory28);
      stream.next(m.trajectory29);
      stream.next(m.trajectory30);
      stream.next(m.trajectory31);
      stream.next(m.trajectory32);
      stream.next(m.trajectory33);
      stream.next(m.trajectory34);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoverServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_start::MoverServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_start::MoverServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "trajectory01[]" << std::endl;
    for (size_t i = 0; i < v.trajectory01.size(); ++i)
    {
      s << indent << "  trajectory01[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory01[i]);
    }
    s << indent << "trajectory02[]" << std::endl;
    for (size_t i = 0; i < v.trajectory02.size(); ++i)
    {
      s << indent << "  trajectory02[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory02[i]);
    }
    s << indent << "trajectory03[]" << std::endl;
    for (size_t i = 0; i < v.trajectory03.size(); ++i)
    {
      s << indent << "  trajectory03[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory03[i]);
    }
    s << indent << "trajectory04[]" << std::endl;
    for (size_t i = 0; i < v.trajectory04.size(); ++i)
    {
      s << indent << "  trajectory04[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory04[i]);
    }
    s << indent << "trajectory05[]" << std::endl;
    for (size_t i = 0; i < v.trajectory05.size(); ++i)
    {
      s << indent << "  trajectory05[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory05[i]);
    }
    s << indent << "trajectory06[]" << std::endl;
    for (size_t i = 0; i < v.trajectory06.size(); ++i)
    {
      s << indent << "  trajectory06[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory06[i]);
    }
    s << indent << "trajectory07[]" << std::endl;
    for (size_t i = 0; i < v.trajectory07.size(); ++i)
    {
      s << indent << "  trajectory07[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory07[i]);
    }
    s << indent << "trajectory11[]" << std::endl;
    for (size_t i = 0; i < v.trajectory11.size(); ++i)
    {
      s << indent << "  trajectory11[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory11[i]);
    }
    s << indent << "trajectory12[]" << std::endl;
    for (size_t i = 0; i < v.trajectory12.size(); ++i)
    {
      s << indent << "  trajectory12[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory12[i]);
    }
    s << indent << "trajectory13[]" << std::endl;
    for (size_t i = 0; i < v.trajectory13.size(); ++i)
    {
      s << indent << "  trajectory13[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory13[i]);
    }
    s << indent << "trajectory14[]" << std::endl;
    for (size_t i = 0; i < v.trajectory14.size(); ++i)
    {
      s << indent << "  trajectory14[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory14[i]);
    }
    s << indent << "trajectory15[]" << std::endl;
    for (size_t i = 0; i < v.trajectory15.size(); ++i)
    {
      s << indent << "  trajectory15[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory15[i]);
    }
    s << indent << "trajectory16[]" << std::endl;
    for (size_t i = 0; i < v.trajectory16.size(); ++i)
    {
      s << indent << "  trajectory16[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory16[i]);
    }
    s << indent << "trajectory17[]" << std::endl;
    for (size_t i = 0; i < v.trajectory17.size(); ++i)
    {
      s << indent << "  trajectory17[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory17[i]);
    }
    s << indent << "trajectory18[]" << std::endl;
    for (size_t i = 0; i < v.trajectory18.size(); ++i)
    {
      s << indent << "  trajectory18[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory18[i]);
    }
    s << indent << "trajectory19[]" << std::endl;
    for (size_t i = 0; i < v.trajectory19.size(); ++i)
    {
      s << indent << "  trajectory19[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory19[i]);
    }
    s << indent << "trajectory20[]" << std::endl;
    for (size_t i = 0; i < v.trajectory20.size(); ++i)
    {
      s << indent << "  trajectory20[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory20[i]);
    }
    s << indent << "trajectory21[]" << std::endl;
    for (size_t i = 0; i < v.trajectory21.size(); ++i)
    {
      s << indent << "  trajectory21[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory21[i]);
    }
    s << indent << "trajectory22[]" << std::endl;
    for (size_t i = 0; i < v.trajectory22.size(); ++i)
    {
      s << indent << "  trajectory22[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory22[i]);
    }
    s << indent << "trajectory23[]" << std::endl;
    for (size_t i = 0; i < v.trajectory23.size(); ++i)
    {
      s << indent << "  trajectory23[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory23[i]);
    }
    s << indent << "trajectory24[]" << std::endl;
    for (size_t i = 0; i < v.trajectory24.size(); ++i)
    {
      s << indent << "  trajectory24[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory24[i]);
    }
    s << indent << "trajectory25[]" << std::endl;
    for (size_t i = 0; i < v.trajectory25.size(); ++i)
    {
      s << indent << "  trajectory25[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory25[i]);
    }
    s << indent << "trajectory26[]" << std::endl;
    for (size_t i = 0; i < v.trajectory26.size(); ++i)
    {
      s << indent << "  trajectory26[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory26[i]);
    }
    s << indent << "trajectory27[]" << std::endl;
    for (size_t i = 0; i < v.trajectory27.size(); ++i)
    {
      s << indent << "  trajectory27[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory27[i]);
    }
    s << indent << "trajectory28[]" << std::endl;
    for (size_t i = 0; i < v.trajectory28.size(); ++i)
    {
      s << indent << "  trajectory28[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory28[i]);
    }
    s << indent << "trajectory29[]" << std::endl;
    for (size_t i = 0; i < v.trajectory29.size(); ++i)
    {
      s << indent << "  trajectory29[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory29[i]);
    }
    s << indent << "trajectory30[]" << std::endl;
    for (size_t i = 0; i < v.trajectory30.size(); ++i)
    {
      s << indent << "  trajectory30[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory30[i]);
    }
    s << indent << "trajectory31[]" << std::endl;
    for (size_t i = 0; i < v.trajectory31.size(); ++i)
    {
      s << indent << "  trajectory31[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory31[i]);
    }
    s << indent << "trajectory32[]" << std::endl;
    for (size_t i = 0; i < v.trajectory32.size(); ++i)
    {
      s << indent << "  trajectory32[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory32[i]);
    }
    s << indent << "trajectory33[]" << std::endl;
    for (size_t i = 0; i < v.trajectory33.size(); ++i)
    {
      s << indent << "  trajectory33[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory33[i]);
    }
    s << indent << "trajectory34[]" << std::endl;
    for (size_t i = 0; i < v.trajectory34.size(); ++i)
    {
      s << indent << "  trajectory34[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory34[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_START_MESSAGE_MOVERSERVICERESPONSE_H
