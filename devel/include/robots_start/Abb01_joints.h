// Generated by gencpp from file robots_start/Abb01_joints.msg
// DO NOT EDIT!


#ifndef ROBOTS_START_MESSAGE_ABB01_JOINTS_H
#define ROBOTS_START_MESSAGE_ABB01_JOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robots_start
{
template <class ContainerAllocator>
struct Abb01_joints_
{
  typedef Abb01_joints_<ContainerAllocator> Type;

  Abb01_joints_()
    : joints()  {
      joints.assign(0.0);
  }
  Abb01_joints_(const ContainerAllocator& _alloc)
    : joints()  {
  (void)_alloc;
      joints.assign(0.0);
  }



   typedef boost::array<double, 6>  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::robots_start::Abb01_joints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_start::Abb01_joints_<ContainerAllocator> const> ConstPtr;

}; // struct Abb01_joints_

typedef ::robots_start::Abb01_joints_<std::allocator<void> > Abb01_joints;

typedef boost::shared_ptr< ::robots_start::Abb01_joints > Abb01_jointsPtr;
typedef boost::shared_ptr< ::robots_start::Abb01_joints const> Abb01_jointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_start::Abb01_joints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_start::Abb01_joints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_start::Abb01_joints_<ContainerAllocator1> & lhs, const ::robots_start::Abb01_joints_<ContainerAllocator2> & rhs)
{
  return lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_start::Abb01_joints_<ContainerAllocator1> & lhs, const ::robots_start::Abb01_joints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_start

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_start::Abb01_joints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_start::Abb01_joints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::Abb01_joints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::Abb01_joints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::Abb01_joints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::Abb01_joints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_start::Abb01_joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edbb5d47191231dfa3fb9cdb5b247fb9";
  }

  static const char* value(const ::robots_start::Abb01_joints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedbb5d47191231dfULL;
  static const uint64_t static_value2 = 0xa3fb9cdb5b247fb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_start::Abb01_joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_start/Abb01_joints";
  }

  static const char* value(const ::robots_start::Abb01_joints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_start::Abb01_joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[6] joints\n"
;
  }

  static const char* value(const ::robots_start::Abb01_joints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_start::Abb01_joints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Abb01_joints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_start::Abb01_joints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_start::Abb01_joints_<ContainerAllocator>& v)
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_START_MESSAGE_ABB01_JOINTS_H
