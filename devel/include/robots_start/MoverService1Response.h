// Generated by gencpp from file robots_start/MoverService1Response.msg
// DO NOT EDIT!


#ifndef ROBOTS_START_MESSAGE_MOVERSERVICE1RESPONSE_H
#define ROBOTS_START_MESSAGE_MOVERSERVICE1RESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/RobotTrajectory.h>

namespace robots_start
{
template <class ContainerAllocator>
struct MoverService1Response_
{
  typedef MoverService1Response_<ContainerAllocator> Type;

  MoverService1Response_()
    : trajectories_01()
    , trajectories_02()
    , trajectories_03()
    , trajectories_04()
    , trajectories_05()
    , trajectories_06()
    , trajectories_07()
    , trajectories_08()
    , trajectories_09()
    , trajectories_10()
    , trajectories_11()
    , trajectories_12()
    , trajectories_13()
    , trajectories_14()
    , trajectories_15()
    , trajectories_16()
    , trajectories_17()
    , trajectories_18()
    , trajectories_19()
    , trajectories_20()
    , trajectories_21()
    , trajectories_22()
    , trajectories_23()
    , trajectories_24()
    , trajectories_25()  {
    }
  MoverService1Response_(const ContainerAllocator& _alloc)
    : trajectories_01(_alloc)
    , trajectories_02(_alloc)
    , trajectories_03(_alloc)
    , trajectories_04(_alloc)
    , trajectories_05(_alloc)
    , trajectories_06(_alloc)
    , trajectories_07(_alloc)
    , trajectories_08(_alloc)
    , trajectories_09(_alloc)
    , trajectories_10(_alloc)
    , trajectories_11(_alloc)
    , trajectories_12(_alloc)
    , trajectories_13(_alloc)
    , trajectories_14(_alloc)
    , trajectories_15(_alloc)
    , trajectories_16(_alloc)
    , trajectories_17(_alloc)
    , trajectories_18(_alloc)
    , trajectories_19(_alloc)
    , trajectories_20(_alloc)
    , trajectories_21(_alloc)
    , trajectories_22(_alloc)
    , trajectories_23(_alloc)
    , trajectories_24(_alloc)
    , trajectories_25(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_01_type;
  _trajectories_01_type trajectories_01;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_02_type;
  _trajectories_02_type trajectories_02;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_03_type;
  _trajectories_03_type trajectories_03;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_04_type;
  _trajectories_04_type trajectories_04;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_05_type;
  _trajectories_05_type trajectories_05;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_06_type;
  _trajectories_06_type trajectories_06;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_07_type;
  _trajectories_07_type trajectories_07;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_08_type;
  _trajectories_08_type trajectories_08;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_09_type;
  _trajectories_09_type trajectories_09;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_10_type;
  _trajectories_10_type trajectories_10;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_11_type;
  _trajectories_11_type trajectories_11;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_12_type;
  _trajectories_12_type trajectories_12;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_13_type;
  _trajectories_13_type trajectories_13;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_14_type;
  _trajectories_14_type trajectories_14;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_15_type;
  _trajectories_15_type trajectories_15;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_16_type;
  _trajectories_16_type trajectories_16;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_17_type;
  _trajectories_17_type trajectories_17;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_18_type;
  _trajectories_18_type trajectories_18;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_19_type;
  _trajectories_19_type trajectories_19;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_20_type;
  _trajectories_20_type trajectories_20;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_21_type;
  _trajectories_21_type trajectories_21;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_22_type;
  _trajectories_22_type trajectories_22;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_23_type;
  _trajectories_23_type trajectories_23;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_24_type;
  _trajectories_24_type trajectories_24;

   typedef std::vector< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::other >  _trajectories_25_type;
  _trajectories_25_type trajectories_25;





  typedef boost::shared_ptr< ::robots_start::MoverService1Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robots_start::MoverService1Response_<ContainerAllocator> const> ConstPtr;

}; // struct MoverService1Response_

typedef ::robots_start::MoverService1Response_<std::allocator<void> > MoverService1Response;

typedef boost::shared_ptr< ::robots_start::MoverService1Response > MoverService1ResponsePtr;
typedef boost::shared_ptr< ::robots_start::MoverService1Response const> MoverService1ResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robots_start::MoverService1Response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robots_start::MoverService1Response_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robots_start::MoverService1Response_<ContainerAllocator1> & lhs, const ::robots_start::MoverService1Response_<ContainerAllocator2> & rhs)
{
  return lhs.trajectories_01 == rhs.trajectories_01 &&
    lhs.trajectories_02 == rhs.trajectories_02 &&
    lhs.trajectories_03 == rhs.trajectories_03 &&
    lhs.trajectories_04 == rhs.trajectories_04 &&
    lhs.trajectories_05 == rhs.trajectories_05 &&
    lhs.trajectories_06 == rhs.trajectories_06 &&
    lhs.trajectories_07 == rhs.trajectories_07 &&
    lhs.trajectories_08 == rhs.trajectories_08 &&
    lhs.trajectories_09 == rhs.trajectories_09 &&
    lhs.trajectories_10 == rhs.trajectories_10 &&
    lhs.trajectories_11 == rhs.trajectories_11 &&
    lhs.trajectories_12 == rhs.trajectories_12 &&
    lhs.trajectories_13 == rhs.trajectories_13 &&
    lhs.trajectories_14 == rhs.trajectories_14 &&
    lhs.trajectories_15 == rhs.trajectories_15 &&
    lhs.trajectories_16 == rhs.trajectories_16 &&
    lhs.trajectories_17 == rhs.trajectories_17 &&
    lhs.trajectories_18 == rhs.trajectories_18 &&
    lhs.trajectories_19 == rhs.trajectories_19 &&
    lhs.trajectories_20 == rhs.trajectories_20 &&
    lhs.trajectories_21 == rhs.trajectories_21 &&
    lhs.trajectories_22 == rhs.trajectories_22 &&
    lhs.trajectories_23 == rhs.trajectories_23 &&
    lhs.trajectories_24 == rhs.trajectories_24 &&
    lhs.trajectories_25 == rhs.trajectories_25;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robots_start::MoverService1Response_<ContainerAllocator1> & lhs, const ::robots_start::MoverService1Response_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robots_start

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robots_start::MoverService1Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robots_start::MoverService1Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::MoverService1Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robots_start::MoverService1Response_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::MoverService1Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robots_start::MoverService1Response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robots_start::MoverService1Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31aa46893d695458749a0d0551903bb0";
  }

  static const char* value(const ::robots_start::MoverService1Response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31aa46893d695458ULL;
  static const uint64_t static_value2 = 0x749a0d0551903bb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robots_start::MoverService1Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robots_start/MoverService1Response";
  }

  static const char* value(const ::robots_start::MoverService1Response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robots_start::MoverService1Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_msgs/RobotTrajectory[] trajectories_01\n"
"moveit_msgs/RobotTrajectory[] trajectories_02\n"
"moveit_msgs/RobotTrajectory[] trajectories_03\n"
"moveit_msgs/RobotTrajectory[] trajectories_04\n"
"moveit_msgs/RobotTrajectory[] trajectories_05\n"
"moveit_msgs/RobotTrajectory[] trajectories_06\n"
"moveit_msgs/RobotTrajectory[] trajectories_07\n"
"moveit_msgs/RobotTrajectory[] trajectories_08\n"
"moveit_msgs/RobotTrajectory[] trajectories_09\n"
"moveit_msgs/RobotTrajectory[] trajectories_10\n"
"moveit_msgs/RobotTrajectory[] trajectories_11\n"
"moveit_msgs/RobotTrajectory[] trajectories_12\n"
"moveit_msgs/RobotTrajectory[] trajectories_13\n"
"moveit_msgs/RobotTrajectory[] trajectories_14\n"
"moveit_msgs/RobotTrajectory[] trajectories_15\n"
"moveit_msgs/RobotTrajectory[] trajectories_16\n"
"moveit_msgs/RobotTrajectory[] trajectories_17\n"
"moveit_msgs/RobotTrajectory[] trajectories_18\n"
"moveit_msgs/RobotTrajectory[] trajectories_19\n"
"moveit_msgs/RobotTrajectory[] trajectories_20\n"
"moveit_msgs/RobotTrajectory[] trajectories_21\n"
"moveit_msgs/RobotTrajectory[] trajectories_22\n"
"moveit_msgs/RobotTrajectory[] trajectories_23\n"
"moveit_msgs/RobotTrajectory[] trajectories_24\n"
"moveit_msgs/RobotTrajectory[] trajectories_25\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/RobotTrajectory\n"
"trajectory_msgs/JointTrajectory joint_trajectory\n"
"trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/MultiDOFJointTrajectory\n"
"# The header is used to specify the coordinate frame and the reference time for the trajectory durations\n"
"Header header\n"
"\n"
"# A representation of a multi-dof joint trajectory (each point is a transformation)\n"
"# Each point along the trajectory will include an array of positions/velocities/accelerations\n"
"# that has the same length as the array of joint names, and has the same order of joints as \n"
"# the joint names array.\n"
"\n"
"string[] joint_names\n"
"MultiDOFJointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint\n"
"# Each multi-dof joint can specify a transform (up to 6 DOF)\n"
"geometry_msgs/Transform[] transforms\n"
"\n"
"# There can be a velocity specified for the origin of the joint \n"
"geometry_msgs/Twist[] velocities\n"
"\n"
"# There can be an acceleration specified for the origin of the joint \n"
"geometry_msgs/Twist[] accelerations\n"
"\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::robots_start::MoverService1Response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robots_start::MoverService1Response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectories_01);
      stream.next(m.trajectories_02);
      stream.next(m.trajectories_03);
      stream.next(m.trajectories_04);
      stream.next(m.trajectories_05);
      stream.next(m.trajectories_06);
      stream.next(m.trajectories_07);
      stream.next(m.trajectories_08);
      stream.next(m.trajectories_09);
      stream.next(m.trajectories_10);
      stream.next(m.trajectories_11);
      stream.next(m.trajectories_12);
      stream.next(m.trajectories_13);
      stream.next(m.trajectories_14);
      stream.next(m.trajectories_15);
      stream.next(m.trajectories_16);
      stream.next(m.trajectories_17);
      stream.next(m.trajectories_18);
      stream.next(m.trajectories_19);
      stream.next(m.trajectories_20);
      stream.next(m.trajectories_21);
      stream.next(m.trajectories_22);
      stream.next(m.trajectories_23);
      stream.next(m.trajectories_24);
      stream.next(m.trajectories_25);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoverService1Response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robots_start::MoverService1Response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robots_start::MoverService1Response_<ContainerAllocator>& v)
  {
    s << indent << "trajectories_01[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_01.size(); ++i)
    {
      s << indent << "  trajectories_01[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_01[i]);
    }
    s << indent << "trajectories_02[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_02.size(); ++i)
    {
      s << indent << "  trajectories_02[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_02[i]);
    }
    s << indent << "trajectories_03[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_03.size(); ++i)
    {
      s << indent << "  trajectories_03[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_03[i]);
    }
    s << indent << "trajectories_04[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_04.size(); ++i)
    {
      s << indent << "  trajectories_04[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_04[i]);
    }
    s << indent << "trajectories_05[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_05.size(); ++i)
    {
      s << indent << "  trajectories_05[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_05[i]);
    }
    s << indent << "trajectories_06[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_06.size(); ++i)
    {
      s << indent << "  trajectories_06[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_06[i]);
    }
    s << indent << "trajectories_07[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_07.size(); ++i)
    {
      s << indent << "  trajectories_07[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_07[i]);
    }
    s << indent << "trajectories_08[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_08.size(); ++i)
    {
      s << indent << "  trajectories_08[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_08[i]);
    }
    s << indent << "trajectories_09[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_09.size(); ++i)
    {
      s << indent << "  trajectories_09[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_09[i]);
    }
    s << indent << "trajectories_10[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_10.size(); ++i)
    {
      s << indent << "  trajectories_10[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_10[i]);
    }
    s << indent << "trajectories_11[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_11.size(); ++i)
    {
      s << indent << "  trajectories_11[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_11[i]);
    }
    s << indent << "trajectories_12[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_12.size(); ++i)
    {
      s << indent << "  trajectories_12[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_12[i]);
    }
    s << indent << "trajectories_13[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_13.size(); ++i)
    {
      s << indent << "  trajectories_13[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_13[i]);
    }
    s << indent << "trajectories_14[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_14.size(); ++i)
    {
      s << indent << "  trajectories_14[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_14[i]);
    }
    s << indent << "trajectories_15[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_15.size(); ++i)
    {
      s << indent << "  trajectories_15[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_15[i]);
    }
    s << indent << "trajectories_16[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_16.size(); ++i)
    {
      s << indent << "  trajectories_16[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_16[i]);
    }
    s << indent << "trajectories_17[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_17.size(); ++i)
    {
      s << indent << "  trajectories_17[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_17[i]);
    }
    s << indent << "trajectories_18[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_18.size(); ++i)
    {
      s << indent << "  trajectories_18[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_18[i]);
    }
    s << indent << "trajectories_19[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_19.size(); ++i)
    {
      s << indent << "  trajectories_19[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_19[i]);
    }
    s << indent << "trajectories_20[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_20.size(); ++i)
    {
      s << indent << "  trajectories_20[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_20[i]);
    }
    s << indent << "trajectories_21[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_21.size(); ++i)
    {
      s << indent << "  trajectories_21[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_21[i]);
    }
    s << indent << "trajectories_22[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_22.size(); ++i)
    {
      s << indent << "  trajectories_22[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_22[i]);
    }
    s << indent << "trajectories_23[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_23.size(); ++i)
    {
      s << indent << "  trajectories_23[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_23[i]);
    }
    s << indent << "trajectories_24[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_24.size(); ++i)
    {
      s << indent << "  trajectories_24[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_24[i]);
    }
    s << indent << "trajectories_25[]" << std::endl;
    for (size_t i = 0; i < v.trajectories_25.size(); ++i)
    {
      s << indent << "  trajectories_25[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories_25[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTS_START_MESSAGE_MOVERSERVICE1RESPONSE_H
