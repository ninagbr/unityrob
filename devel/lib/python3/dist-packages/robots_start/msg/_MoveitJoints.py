# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_start/MoveitJoints.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class MoveitJoints(genpy.Message):
  _md5sum = "131e2d50b00081c2b4c34a10d3bf6f0c"
  _type = "robots_start/MoveitJoints"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[6] joints_input_01
float64[6] joints_input_02
float64[6] joints_input_03
geometry_msgs/Pose bms
geometry_msgs/Pose place_pose
geometry_msgs/Pose batterylock1
geometry_msgs/Pose batterylock2
geometry_msgs/Pose batterylock3
geometry_msgs/Pose batterylock4

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['joints_input_01','joints_input_02','joints_input_03','bms','place_pose','batterylock1','batterylock2','batterylock3','batterylock4']
  _slot_types = ['float64[6]','float64[6]','float64[6]','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joints_input_01,joints_input_02,joints_input_03,bms,place_pose,batterylock1,batterylock2,batterylock3,batterylock4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveitJoints, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joints_input_01 is None:
        self.joints_input_01 = [0.] * 6
      if self.joints_input_02 is None:
        self.joints_input_02 = [0.] * 6
      if self.joints_input_03 is None:
        self.joints_input_03 = [0.] * 6
      if self.bms is None:
        self.bms = geometry_msgs.msg.Pose()
      if self.place_pose is None:
        self.place_pose = geometry_msgs.msg.Pose()
      if self.batterylock1 is None:
        self.batterylock1 = geometry_msgs.msg.Pose()
      if self.batterylock2 is None:
        self.batterylock2 = geometry_msgs.msg.Pose()
      if self.batterylock3 is None:
        self.batterylock3 = geometry_msgs.msg.Pose()
      if self.batterylock4 is None:
        self.batterylock4 = geometry_msgs.msg.Pose()
    else:
      self.joints_input_01 = [0.] * 6
      self.joints_input_02 = [0.] * 6
      self.joints_input_03 = [0.] * 6
      self.bms = geometry_msgs.msg.Pose()
      self.place_pose = geometry_msgs.msg.Pose()
      self.batterylock1 = geometry_msgs.msg.Pose()
      self.batterylock2 = geometry_msgs.msg.Pose()
      self.batterylock3 = geometry_msgs.msg.Pose()
      self.batterylock4 = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_6d().pack(*self.joints_input_01))
      buff.write(_get_struct_6d().pack(*self.joints_input_02))
      buff.write(_get_struct_6d().pack(*self.joints_input_03))
      _x = self
      buff.write(_get_struct_42d().pack(_x.bms.position.x, _x.bms.position.y, _x.bms.position.z, _x.bms.orientation.x, _x.bms.orientation.y, _x.bms.orientation.z, _x.bms.orientation.w, _x.place_pose.position.x, _x.place_pose.position.y, _x.place_pose.position.z, _x.place_pose.orientation.x, _x.place_pose.orientation.y, _x.place_pose.orientation.z, _x.place_pose.orientation.w, _x.batterylock1.position.x, _x.batterylock1.position.y, _x.batterylock1.position.z, _x.batterylock1.orientation.x, _x.batterylock1.orientation.y, _x.batterylock1.orientation.z, _x.batterylock1.orientation.w, _x.batterylock2.position.x, _x.batterylock2.position.y, _x.batterylock2.position.z, _x.batterylock2.orientation.x, _x.batterylock2.orientation.y, _x.batterylock2.orientation.z, _x.batterylock2.orientation.w, _x.batterylock3.position.x, _x.batterylock3.position.y, _x.batterylock3.position.z, _x.batterylock3.orientation.x, _x.batterylock3.orientation.y, _x.batterylock3.orientation.z, _x.batterylock3.orientation.w, _x.batterylock4.position.x, _x.batterylock4.position.y, _x.batterylock4.position.z, _x.batterylock4.orientation.x, _x.batterylock4.orientation.y, _x.batterylock4.orientation.z, _x.batterylock4.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bms is None:
        self.bms = geometry_msgs.msg.Pose()
      if self.place_pose is None:
        self.place_pose = geometry_msgs.msg.Pose()
      if self.batterylock1 is None:
        self.batterylock1 = geometry_msgs.msg.Pose()
      if self.batterylock2 is None:
        self.batterylock2 = geometry_msgs.msg.Pose()
      if self.batterylock3 is None:
        self.batterylock3 = geometry_msgs.msg.Pose()
      if self.batterylock4 is None:
        self.batterylock4 = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 48
      self.joints_input_01 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_02 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_03 = _get_struct_6d().unpack(str[start:end])
      _x = self
      start = end
      end += 336
      (_x.bms.position.x, _x.bms.position.y, _x.bms.position.z, _x.bms.orientation.x, _x.bms.orientation.y, _x.bms.orientation.z, _x.bms.orientation.w, _x.place_pose.position.x, _x.place_pose.position.y, _x.place_pose.position.z, _x.place_pose.orientation.x, _x.place_pose.orientation.y, _x.place_pose.orientation.z, _x.place_pose.orientation.w, _x.batterylock1.position.x, _x.batterylock1.position.y, _x.batterylock1.position.z, _x.batterylock1.orientation.x, _x.batterylock1.orientation.y, _x.batterylock1.orientation.z, _x.batterylock1.orientation.w, _x.batterylock2.position.x, _x.batterylock2.position.y, _x.batterylock2.position.z, _x.batterylock2.orientation.x, _x.batterylock2.orientation.y, _x.batterylock2.orientation.z, _x.batterylock2.orientation.w, _x.batterylock3.position.x, _x.batterylock3.position.y, _x.batterylock3.position.z, _x.batterylock3.orientation.x, _x.batterylock3.orientation.y, _x.batterylock3.orientation.z, _x.batterylock3.orientation.w, _x.batterylock4.position.x, _x.batterylock4.position.y, _x.batterylock4.position.z, _x.batterylock4.orientation.x, _x.batterylock4.orientation.y, _x.batterylock4.orientation.z, _x.batterylock4.orientation.w,) = _get_struct_42d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.joints_input_01.tostring())
      buff.write(self.joints_input_02.tostring())
      buff.write(self.joints_input_03.tostring())
      _x = self
      buff.write(_get_struct_42d().pack(_x.bms.position.x, _x.bms.position.y, _x.bms.position.z, _x.bms.orientation.x, _x.bms.orientation.y, _x.bms.orientation.z, _x.bms.orientation.w, _x.place_pose.position.x, _x.place_pose.position.y, _x.place_pose.position.z, _x.place_pose.orientation.x, _x.place_pose.orientation.y, _x.place_pose.orientation.z, _x.place_pose.orientation.w, _x.batterylock1.position.x, _x.batterylock1.position.y, _x.batterylock1.position.z, _x.batterylock1.orientation.x, _x.batterylock1.orientation.y, _x.batterylock1.orientation.z, _x.batterylock1.orientation.w, _x.batterylock2.position.x, _x.batterylock2.position.y, _x.batterylock2.position.z, _x.batterylock2.orientation.x, _x.batterylock2.orientation.y, _x.batterylock2.orientation.z, _x.batterylock2.orientation.w, _x.batterylock3.position.x, _x.batterylock3.position.y, _x.batterylock3.position.z, _x.batterylock3.orientation.x, _x.batterylock3.orientation.y, _x.batterylock3.orientation.z, _x.batterylock3.orientation.w, _x.batterylock4.position.x, _x.batterylock4.position.y, _x.batterylock4.position.z, _x.batterylock4.orientation.x, _x.batterylock4.orientation.y, _x.batterylock4.orientation.z, _x.batterylock4.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bms is None:
        self.bms = geometry_msgs.msg.Pose()
      if self.place_pose is None:
        self.place_pose = geometry_msgs.msg.Pose()
      if self.batterylock1 is None:
        self.batterylock1 = geometry_msgs.msg.Pose()
      if self.batterylock2 is None:
        self.batterylock2 = geometry_msgs.msg.Pose()
      if self.batterylock3 is None:
        self.batterylock3 = geometry_msgs.msg.Pose()
      if self.batterylock4 is None:
        self.batterylock4 = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 48
      self.joints_input_01 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_02 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_03 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      _x = self
      start = end
      end += 336
      (_x.bms.position.x, _x.bms.position.y, _x.bms.position.z, _x.bms.orientation.x, _x.bms.orientation.y, _x.bms.orientation.z, _x.bms.orientation.w, _x.place_pose.position.x, _x.place_pose.position.y, _x.place_pose.position.z, _x.place_pose.orientation.x, _x.place_pose.orientation.y, _x.place_pose.orientation.z, _x.place_pose.orientation.w, _x.batterylock1.position.x, _x.batterylock1.position.y, _x.batterylock1.position.z, _x.batterylock1.orientation.x, _x.batterylock1.orientation.y, _x.batterylock1.orientation.z, _x.batterylock1.orientation.w, _x.batterylock2.position.x, _x.batterylock2.position.y, _x.batterylock2.position.z, _x.batterylock2.orientation.x, _x.batterylock2.orientation.y, _x.batterylock2.orientation.z, _x.batterylock2.orientation.w, _x.batterylock3.position.x, _x.batterylock3.position.y, _x.batterylock3.position.z, _x.batterylock3.orientation.x, _x.batterylock3.orientation.y, _x.batterylock3.orientation.z, _x.batterylock3.orientation.w, _x.batterylock4.position.x, _x.batterylock4.position.y, _x.batterylock4.position.z, _x.batterylock4.orientation.x, _x.batterylock4.orientation.y, _x.batterylock4.orientation.z, _x.batterylock4.orientation.w,) = _get_struct_42d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_42d = None
def _get_struct_42d():
    global _struct_42d
    if _struct_42d is None:
        _struct_42d = struct.Struct("<42d")
    return _struct_42d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
