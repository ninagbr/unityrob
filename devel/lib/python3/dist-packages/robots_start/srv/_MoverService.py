# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_start/MoverServiceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import robots_start.msg

class MoverServiceRequest(genpy.Message):
  _md5sum = "032e266c4810de6bd25d4e203eb2249f"
  _type = "robots_start/MoverServiceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MoveitJoints joints_input_01
MoveitJoints joints_input_02
MoveitJoints joints_input_03

geometry_msgs/Pose target01
geometry_msgs/Pose target02
geometry_msgs/Pose target03
geometry_msgs/Pose target04
geometry_msgs/Pose target05
geometry_msgs/Pose target06
geometry_msgs/Pose target07
geometry_msgs/Pose target08
geometry_msgs/Pose target09
geometry_msgs/Pose target10
geometry_msgs/Pose target11
geometry_msgs/Pose target12
geometry_msgs/Pose target13
geometry_msgs/Pose target14
geometry_msgs/Pose target15
geometry_msgs/Pose target16
geometry_msgs/Pose target17
geometry_msgs/Pose target18
geometry_msgs/Pose target19
geometry_msgs/Pose target20
geometry_msgs/Pose target21
geometry_msgs/Pose target22
geometry_msgs/Pose target23
geometry_msgs/Pose target24
geometry_msgs/Pose target25
geometry_msgs/Pose target26
geometry_msgs/Pose target27
geometry_msgs/Pose target28
geometry_msgs/Pose target41
geometry_msgs/Pose target42
geometry_msgs/Pose target43
geometry_msgs/Pose target44
geometry_msgs/Pose target45
geometry_msgs/Pose target46
geometry_msgs/Pose target47
geometry_msgs/Pose target48
geometry_msgs/Pose target49
geometry_msgs/Pose target50
geometry_msgs/Pose target51
geometry_msgs/Pose target52
geometry_msgs/Pose target53
geometry_msgs/Pose target54
geometry_msgs/Pose target55
geometry_msgs/Pose target56
geometry_msgs/Pose target57
geometry_msgs/Pose target58
geometry_msgs/Pose target59
geometry_msgs/Pose target60
geometry_msgs/Pose target61
geometry_msgs/Pose target62
geometry_msgs/Pose target63
geometry_msgs/Pose target64
geometry_msgs/Pose target65
geometry_msgs/Pose target66
geometry_msgs/Pose target67
geometry_msgs/Pose target68
geometry_msgs/Pose target69
geometry_msgs/Pose target70
geometry_msgs/Pose target71
geometry_msgs/Pose target72
geometry_msgs/Pose target73
geometry_msgs/Pose target74
geometry_msgs/Pose target75
geometry_msgs/Pose target76
geometry_msgs/Pose target77
geometry_msgs/Pose target78
geometry_msgs/Pose target79
geometry_msgs/Pose target80
geometry_msgs/Pose target81
geometry_msgs/Pose target82
geometry_msgs/Pose target83
geometry_msgs/Pose target84
geometry_msgs/Pose target85
geometry_msgs/Pose target86
geometry_msgs/Pose target87
geometry_msgs/Pose target88
geometry_msgs/Pose target89
geometry_msgs/Pose target90
geometry_msgs/Pose target91
geometry_msgs/Pose target92
geometry_msgs/Pose target93
geometry_msgs/Pose target94
geometry_msgs/Pose target95
geometry_msgs/Pose target96
geometry_msgs/Pose target97
geometry_msgs/Pose target98
geometry_msgs/Pose target99
geometry_msgs/Pose target100
geometry_msgs/Pose target101
geometry_msgs/Pose target102
geometry_msgs/Pose target103
geometry_msgs/Pose target104
geometry_msgs/Pose target105
geometry_msgs/Pose target106
geometry_msgs/Pose target107
geometry_msgs/Pose target108
geometry_msgs/Pose target109
geometry_msgs/Pose target110
geometry_msgs/Pose target111
geometry_msgs/Pose target112
geometry_msgs/Pose target113
geometry_msgs/Pose target114
geometry_msgs/Pose target115
geometry_msgs/Pose target116
geometry_msgs/Pose target117
geometry_msgs/Pose target118
geometry_msgs/Pose target119
geometry_msgs/Pose target120
geometry_msgs/Pose target121
geometry_msgs/Pose target122
geometry_msgs/Pose target123
geometry_msgs/Pose target124
geometry_msgs/Pose target125
geometry_msgs/Pose target126
geometry_msgs/Pose target127
geometry_msgs/Pose target128
geometry_msgs/Pose target129
geometry_msgs/Pose target130
geometry_msgs/Pose target131
geometry_msgs/Pose target132
geometry_msgs/Pose target133
geometry_msgs/Pose target134
geometry_msgs/Pose target135
geometry_msgs/Pose target136

================================================================================
MSG: robots_start/MoveitJoints
float64[6] joints_input_01
float64[6] joints_input_02
float64[6] joints_input_03
geometry_msgs/Pose bms
geometry_msgs/Pose place_pose
geometry_msgs/Pose batterylock1
geometry_msgs/Pose batterylock2
geometry_msgs/Pose batterylock3
geometry_msgs/Pose batterylock4

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['joints_input_01','joints_input_02','joints_input_03','target01','target02','target03','target04','target05','target06','target07','target08','target09','target10','target11','target12','target13','target14','target15','target16','target17','target18','target19','target20','target21','target22','target23','target24','target25','target26','target27','target28','target41','target42','target43','target44','target45','target46','target47','target48','target49','target50','target51','target52','target53','target54','target55','target56','target57','target58','target59','target60','target61','target62','target63','target64','target65','target66','target67','target68','target69','target70','target71','target72','target73','target74','target75','target76','target77','target78','target79','target80','target81','target82','target83','target84','target85','target86','target87','target88','target89','target90','target91','target92','target93','target94','target95','target96','target97','target98','target99','target100','target101','target102','target103','target104','target105','target106','target107','target108','target109','target110','target111','target112','target113','target114','target115','target116','target117','target118','target119','target120','target121','target122','target123','target124','target125','target126','target127','target128','target129','target130','target131','target132','target133','target134','target135','target136']
  _slot_types = ['robots_start/MoveitJoints','robots_start/MoveitJoints','robots_start/MoveitJoints','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joints_input_01,joints_input_02,joints_input_03,target01,target02,target03,target04,target05,target06,target07,target08,target09,target10,target11,target12,target13,target14,target15,target16,target17,target18,target19,target20,target21,target22,target23,target24,target25,target26,target27,target28,target41,target42,target43,target44,target45,target46,target47,target48,target49,target50,target51,target52,target53,target54,target55,target56,target57,target58,target59,target60,target61,target62,target63,target64,target65,target66,target67,target68,target69,target70,target71,target72,target73,target74,target75,target76,target77,target78,target79,target80,target81,target82,target83,target84,target85,target86,target87,target88,target89,target90,target91,target92,target93,target94,target95,target96,target97,target98,target99,target100,target101,target102,target103,target104,target105,target106,target107,target108,target109,target110,target111,target112,target113,target114,target115,target116,target117,target118,target119,target120,target121,target122,target123,target124,target125,target126,target127,target128,target129,target130,target131,target132,target133,target134,target135,target136

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoverServiceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joints_input_01 is None:
        self.joints_input_01 = robots_start.msg.MoveitJoints()
      if self.joints_input_02 is None:
        self.joints_input_02 = robots_start.msg.MoveitJoints()
      if self.joints_input_03 is None:
        self.joints_input_03 = robots_start.msg.MoveitJoints()
      if self.target01 is None:
        self.target01 = geometry_msgs.msg.Pose()
      if self.target02 is None:
        self.target02 = geometry_msgs.msg.Pose()
      if self.target03 is None:
        self.target03 = geometry_msgs.msg.Pose()
      if self.target04 is None:
        self.target04 = geometry_msgs.msg.Pose()
      if self.target05 is None:
        self.target05 = geometry_msgs.msg.Pose()
      if self.target06 is None:
        self.target06 = geometry_msgs.msg.Pose()
      if self.target07 is None:
        self.target07 = geometry_msgs.msg.Pose()
      if self.target08 is None:
        self.target08 = geometry_msgs.msg.Pose()
      if self.target09 is None:
        self.target09 = geometry_msgs.msg.Pose()
      if self.target10 is None:
        self.target10 = geometry_msgs.msg.Pose()
      if self.target11 is None:
        self.target11 = geometry_msgs.msg.Pose()
      if self.target12 is None:
        self.target12 = geometry_msgs.msg.Pose()
      if self.target13 is None:
        self.target13 = geometry_msgs.msg.Pose()
      if self.target14 is None:
        self.target14 = geometry_msgs.msg.Pose()
      if self.target15 is None:
        self.target15 = geometry_msgs.msg.Pose()
      if self.target16 is None:
        self.target16 = geometry_msgs.msg.Pose()
      if self.target17 is None:
        self.target17 = geometry_msgs.msg.Pose()
      if self.target18 is None:
        self.target18 = geometry_msgs.msg.Pose()
      if self.target19 is None:
        self.target19 = geometry_msgs.msg.Pose()
      if self.target20 is None:
        self.target20 = geometry_msgs.msg.Pose()
      if self.target21 is None:
        self.target21 = geometry_msgs.msg.Pose()
      if self.target22 is None:
        self.target22 = geometry_msgs.msg.Pose()
      if self.target23 is None:
        self.target23 = geometry_msgs.msg.Pose()
      if self.target24 is None:
        self.target24 = geometry_msgs.msg.Pose()
      if self.target25 is None:
        self.target25 = geometry_msgs.msg.Pose()
      if self.target26 is None:
        self.target26 = geometry_msgs.msg.Pose()
      if self.target27 is None:
        self.target27 = geometry_msgs.msg.Pose()
      if self.target28 is None:
        self.target28 = geometry_msgs.msg.Pose()
      if self.target41 is None:
        self.target41 = geometry_msgs.msg.Pose()
      if self.target42 is None:
        self.target42 = geometry_msgs.msg.Pose()
      if self.target43 is None:
        self.target43 = geometry_msgs.msg.Pose()
      if self.target44 is None:
        self.target44 = geometry_msgs.msg.Pose()
      if self.target45 is None:
        self.target45 = geometry_msgs.msg.Pose()
      if self.target46 is None:
        self.target46 = geometry_msgs.msg.Pose()
      if self.target47 is None:
        self.target47 = geometry_msgs.msg.Pose()
      if self.target48 is None:
        self.target48 = geometry_msgs.msg.Pose()
      if self.target49 is None:
        self.target49 = geometry_msgs.msg.Pose()
      if self.target50 is None:
        self.target50 = geometry_msgs.msg.Pose()
      if self.target51 is None:
        self.target51 = geometry_msgs.msg.Pose()
      if self.target52 is None:
        self.target52 = geometry_msgs.msg.Pose()
      if self.target53 is None:
        self.target53 = geometry_msgs.msg.Pose()
      if self.target54 is None:
        self.target54 = geometry_msgs.msg.Pose()
      if self.target55 is None:
        self.target55 = geometry_msgs.msg.Pose()
      if self.target56 is None:
        self.target56 = geometry_msgs.msg.Pose()
      if self.target57 is None:
        self.target57 = geometry_msgs.msg.Pose()
      if self.target58 is None:
        self.target58 = geometry_msgs.msg.Pose()
      if self.target59 is None:
        self.target59 = geometry_msgs.msg.Pose()
      if self.target60 is None:
        self.target60 = geometry_msgs.msg.Pose()
      if self.target61 is None:
        self.target61 = geometry_msgs.msg.Pose()
      if self.target62 is None:
        self.target62 = geometry_msgs.msg.Pose()
      if self.target63 is None:
        self.target63 = geometry_msgs.msg.Pose()
      if self.target64 is None:
        self.target64 = geometry_msgs.msg.Pose()
      if self.target65 is None:
        self.target65 = geometry_msgs.msg.Pose()
      if self.target66 is None:
        self.target66 = geometry_msgs.msg.Pose()
      if self.target67 is None:
        self.target67 = geometry_msgs.msg.Pose()
      if self.target68 is None:
        self.target68 = geometry_msgs.msg.Pose()
      if self.target69 is None:
        self.target69 = geometry_msgs.msg.Pose()
      if self.target70 is None:
        self.target70 = geometry_msgs.msg.Pose()
      if self.target71 is None:
        self.target71 = geometry_msgs.msg.Pose()
      if self.target72 is None:
        self.target72 = geometry_msgs.msg.Pose()
      if self.target73 is None:
        self.target73 = geometry_msgs.msg.Pose()
      if self.target74 is None:
        self.target74 = geometry_msgs.msg.Pose()
      if self.target75 is None:
        self.target75 = geometry_msgs.msg.Pose()
      if self.target76 is None:
        self.target76 = geometry_msgs.msg.Pose()
      if self.target77 is None:
        self.target77 = geometry_msgs.msg.Pose()
      if self.target78 is None:
        self.target78 = geometry_msgs.msg.Pose()
      if self.target79 is None:
        self.target79 = geometry_msgs.msg.Pose()
      if self.target80 is None:
        self.target80 = geometry_msgs.msg.Pose()
      if self.target81 is None:
        self.target81 = geometry_msgs.msg.Pose()
      if self.target82 is None:
        self.target82 = geometry_msgs.msg.Pose()
      if self.target83 is None:
        self.target83 = geometry_msgs.msg.Pose()
      if self.target84 is None:
        self.target84 = geometry_msgs.msg.Pose()
      if self.target85 is None:
        self.target85 = geometry_msgs.msg.Pose()
      if self.target86 is None:
        self.target86 = geometry_msgs.msg.Pose()
      if self.target87 is None:
        self.target87 = geometry_msgs.msg.Pose()
      if self.target88 is None:
        self.target88 = geometry_msgs.msg.Pose()
      if self.target89 is None:
        self.target89 = geometry_msgs.msg.Pose()
      if self.target90 is None:
        self.target90 = geometry_msgs.msg.Pose()
      if self.target91 is None:
        self.target91 = geometry_msgs.msg.Pose()
      if self.target92 is None:
        self.target92 = geometry_msgs.msg.Pose()
      if self.target93 is None:
        self.target93 = geometry_msgs.msg.Pose()
      if self.target94 is None:
        self.target94 = geometry_msgs.msg.Pose()
      if self.target95 is None:
        self.target95 = geometry_msgs.msg.Pose()
      if self.target96 is None:
        self.target96 = geometry_msgs.msg.Pose()
      if self.target97 is None:
        self.target97 = geometry_msgs.msg.Pose()
      if self.target98 is None:
        self.target98 = geometry_msgs.msg.Pose()
      if self.target99 is None:
        self.target99 = geometry_msgs.msg.Pose()
      if self.target100 is None:
        self.target100 = geometry_msgs.msg.Pose()
      if self.target101 is None:
        self.target101 = geometry_msgs.msg.Pose()
      if self.target102 is None:
        self.target102 = geometry_msgs.msg.Pose()
      if self.target103 is None:
        self.target103 = geometry_msgs.msg.Pose()
      if self.target104 is None:
        self.target104 = geometry_msgs.msg.Pose()
      if self.target105 is None:
        self.target105 = geometry_msgs.msg.Pose()
      if self.target106 is None:
        self.target106 = geometry_msgs.msg.Pose()
      if self.target107 is None:
        self.target107 = geometry_msgs.msg.Pose()
      if self.target108 is None:
        self.target108 = geometry_msgs.msg.Pose()
      if self.target109 is None:
        self.target109 = geometry_msgs.msg.Pose()
      if self.target110 is None:
        self.target110 = geometry_msgs.msg.Pose()
      if self.target111 is None:
        self.target111 = geometry_msgs.msg.Pose()
      if self.target112 is None:
        self.target112 = geometry_msgs.msg.Pose()
      if self.target113 is None:
        self.target113 = geometry_msgs.msg.Pose()
      if self.target114 is None:
        self.target114 = geometry_msgs.msg.Pose()
      if self.target115 is None:
        self.target115 = geometry_msgs.msg.Pose()
      if self.target116 is None:
        self.target116 = geometry_msgs.msg.Pose()
      if self.target117 is None:
        self.target117 = geometry_msgs.msg.Pose()
      if self.target118 is None:
        self.target118 = geometry_msgs.msg.Pose()
      if self.target119 is None:
        self.target119 = geometry_msgs.msg.Pose()
      if self.target120 is None:
        self.target120 = geometry_msgs.msg.Pose()
      if self.target121 is None:
        self.target121 = geometry_msgs.msg.Pose()
      if self.target122 is None:
        self.target122 = geometry_msgs.msg.Pose()
      if self.target123 is None:
        self.target123 = geometry_msgs.msg.Pose()
      if self.target124 is None:
        self.target124 = geometry_msgs.msg.Pose()
      if self.target125 is None:
        self.target125 = geometry_msgs.msg.Pose()
      if self.target126 is None:
        self.target126 = geometry_msgs.msg.Pose()
      if self.target127 is None:
        self.target127 = geometry_msgs.msg.Pose()
      if self.target128 is None:
        self.target128 = geometry_msgs.msg.Pose()
      if self.target129 is None:
        self.target129 = geometry_msgs.msg.Pose()
      if self.target130 is None:
        self.target130 = geometry_msgs.msg.Pose()
      if self.target131 is None:
        self.target131 = geometry_msgs.msg.Pose()
      if self.target132 is None:
        self.target132 = geometry_msgs.msg.Pose()
      if self.target133 is None:
        self.target133 = geometry_msgs.msg.Pose()
      if self.target134 is None:
        self.target134 = geometry_msgs.msg.Pose()
      if self.target135 is None:
        self.target135 = geometry_msgs.msg.Pose()
      if self.target136 is None:
        self.target136 = geometry_msgs.msg.Pose()
    else:
      self.joints_input_01 = robots_start.msg.MoveitJoints()
      self.joints_input_02 = robots_start.msg.MoveitJoints()
      self.joints_input_03 = robots_start.msg.MoveitJoints()
      self.target01 = geometry_msgs.msg.Pose()
      self.target02 = geometry_msgs.msg.Pose()
      self.target03 = geometry_msgs.msg.Pose()
      self.target04 = geometry_msgs.msg.Pose()
      self.target05 = geometry_msgs.msg.Pose()
      self.target06 = geometry_msgs.msg.Pose()
      self.target07 = geometry_msgs.msg.Pose()
      self.target08 = geometry_msgs.msg.Pose()
      self.target09 = geometry_msgs.msg.Pose()
      self.target10 = geometry_msgs.msg.Pose()
      self.target11 = geometry_msgs.msg.Pose()
      self.target12 = geometry_msgs.msg.Pose()
      self.target13 = geometry_msgs.msg.Pose()
      self.target14 = geometry_msgs.msg.Pose()
      self.target15 = geometry_msgs.msg.Pose()
      self.target16 = geometry_msgs.msg.Pose()
      self.target17 = geometry_msgs.msg.Pose()
      self.target18 = geometry_msgs.msg.Pose()
      self.target19 = geometry_msgs.msg.Pose()
      self.target20 = geometry_msgs.msg.Pose()
      self.target21 = geometry_msgs.msg.Pose()
      self.target22 = geometry_msgs.msg.Pose()
      self.target23 = geometry_msgs.msg.Pose()
      self.target24 = geometry_msgs.msg.Pose()
      self.target25 = geometry_msgs.msg.Pose()
      self.target26 = geometry_msgs.msg.Pose()
      self.target27 = geometry_msgs.msg.Pose()
      self.target28 = geometry_msgs.msg.Pose()
      self.target41 = geometry_msgs.msg.Pose()
      self.target42 = geometry_msgs.msg.Pose()
      self.target43 = geometry_msgs.msg.Pose()
      self.target44 = geometry_msgs.msg.Pose()
      self.target45 = geometry_msgs.msg.Pose()
      self.target46 = geometry_msgs.msg.Pose()
      self.target47 = geometry_msgs.msg.Pose()
      self.target48 = geometry_msgs.msg.Pose()
      self.target49 = geometry_msgs.msg.Pose()
      self.target50 = geometry_msgs.msg.Pose()
      self.target51 = geometry_msgs.msg.Pose()
      self.target52 = geometry_msgs.msg.Pose()
      self.target53 = geometry_msgs.msg.Pose()
      self.target54 = geometry_msgs.msg.Pose()
      self.target55 = geometry_msgs.msg.Pose()
      self.target56 = geometry_msgs.msg.Pose()
      self.target57 = geometry_msgs.msg.Pose()
      self.target58 = geometry_msgs.msg.Pose()
      self.target59 = geometry_msgs.msg.Pose()
      self.target60 = geometry_msgs.msg.Pose()
      self.target61 = geometry_msgs.msg.Pose()
      self.target62 = geometry_msgs.msg.Pose()
      self.target63 = geometry_msgs.msg.Pose()
      self.target64 = geometry_msgs.msg.Pose()
      self.target65 = geometry_msgs.msg.Pose()
      self.target66 = geometry_msgs.msg.Pose()
      self.target67 = geometry_msgs.msg.Pose()
      self.target68 = geometry_msgs.msg.Pose()
      self.target69 = geometry_msgs.msg.Pose()
      self.target70 = geometry_msgs.msg.Pose()
      self.target71 = geometry_msgs.msg.Pose()
      self.target72 = geometry_msgs.msg.Pose()
      self.target73 = geometry_msgs.msg.Pose()
      self.target74 = geometry_msgs.msg.Pose()
      self.target75 = geometry_msgs.msg.Pose()
      self.target76 = geometry_msgs.msg.Pose()
      self.target77 = geometry_msgs.msg.Pose()
      self.target78 = geometry_msgs.msg.Pose()
      self.target79 = geometry_msgs.msg.Pose()
      self.target80 = geometry_msgs.msg.Pose()
      self.target81 = geometry_msgs.msg.Pose()
      self.target82 = geometry_msgs.msg.Pose()
      self.target83 = geometry_msgs.msg.Pose()
      self.target84 = geometry_msgs.msg.Pose()
      self.target85 = geometry_msgs.msg.Pose()
      self.target86 = geometry_msgs.msg.Pose()
      self.target87 = geometry_msgs.msg.Pose()
      self.target88 = geometry_msgs.msg.Pose()
      self.target89 = geometry_msgs.msg.Pose()
      self.target90 = geometry_msgs.msg.Pose()
      self.target91 = geometry_msgs.msg.Pose()
      self.target92 = geometry_msgs.msg.Pose()
      self.target93 = geometry_msgs.msg.Pose()
      self.target94 = geometry_msgs.msg.Pose()
      self.target95 = geometry_msgs.msg.Pose()
      self.target96 = geometry_msgs.msg.Pose()
      self.target97 = geometry_msgs.msg.Pose()
      self.target98 = geometry_msgs.msg.Pose()
      self.target99 = geometry_msgs.msg.Pose()
      self.target100 = geometry_msgs.msg.Pose()
      self.target101 = geometry_msgs.msg.Pose()
      self.target102 = geometry_msgs.msg.Pose()
      self.target103 = geometry_msgs.msg.Pose()
      self.target104 = geometry_msgs.msg.Pose()
      self.target105 = geometry_msgs.msg.Pose()
      self.target106 = geometry_msgs.msg.Pose()
      self.target107 = geometry_msgs.msg.Pose()
      self.target108 = geometry_msgs.msg.Pose()
      self.target109 = geometry_msgs.msg.Pose()
      self.target110 = geometry_msgs.msg.Pose()
      self.target111 = geometry_msgs.msg.Pose()
      self.target112 = geometry_msgs.msg.Pose()
      self.target113 = geometry_msgs.msg.Pose()
      self.target114 = geometry_msgs.msg.Pose()
      self.target115 = geometry_msgs.msg.Pose()
      self.target116 = geometry_msgs.msg.Pose()
      self.target117 = geometry_msgs.msg.Pose()
      self.target118 = geometry_msgs.msg.Pose()
      self.target119 = geometry_msgs.msg.Pose()
      self.target120 = geometry_msgs.msg.Pose()
      self.target121 = geometry_msgs.msg.Pose()
      self.target122 = geometry_msgs.msg.Pose()
      self.target123 = geometry_msgs.msg.Pose()
      self.target124 = geometry_msgs.msg.Pose()
      self.target125 = geometry_msgs.msg.Pose()
      self.target126 = geometry_msgs.msg.Pose()
      self.target127 = geometry_msgs.msg.Pose()
      self.target128 = geometry_msgs.msg.Pose()
      self.target129 = geometry_msgs.msg.Pose()
      self.target130 = geometry_msgs.msg.Pose()
      self.target131 = geometry_msgs.msg.Pose()
      self.target132 = geometry_msgs.msg.Pose()
      self.target133 = geometry_msgs.msg.Pose()
      self.target134 = geometry_msgs.msg.Pose()
      self.target135 = geometry_msgs.msg.Pose()
      self.target136 = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_6d().pack(*self.joints_input_01.joints_input_01))
      buff.write(_get_struct_6d().pack(*self.joints_input_01.joints_input_02))
      buff.write(_get_struct_6d().pack(*self.joints_input_01.joints_input_03))
      _x = self
      buff.write(_get_struct_42d().pack(_x.joints_input_01.bms.position.x, _x.joints_input_01.bms.position.y, _x.joints_input_01.bms.position.z, _x.joints_input_01.bms.orientation.x, _x.joints_input_01.bms.orientation.y, _x.joints_input_01.bms.orientation.z, _x.joints_input_01.bms.orientation.w, _x.joints_input_01.place_pose.position.x, _x.joints_input_01.place_pose.position.y, _x.joints_input_01.place_pose.position.z, _x.joints_input_01.place_pose.orientation.x, _x.joints_input_01.place_pose.orientation.y, _x.joints_input_01.place_pose.orientation.z, _x.joints_input_01.place_pose.orientation.w, _x.joints_input_01.batterylock1.position.x, _x.joints_input_01.batterylock1.position.y, _x.joints_input_01.batterylock1.position.z, _x.joints_input_01.batterylock1.orientation.x, _x.joints_input_01.batterylock1.orientation.y, _x.joints_input_01.batterylock1.orientation.z, _x.joints_input_01.batterylock1.orientation.w, _x.joints_input_01.batterylock2.position.x, _x.joints_input_01.batterylock2.position.y, _x.joints_input_01.batterylock2.position.z, _x.joints_input_01.batterylock2.orientation.x, _x.joints_input_01.batterylock2.orientation.y, _x.joints_input_01.batterylock2.orientation.z, _x.joints_input_01.batterylock2.orientation.w, _x.joints_input_01.batterylock3.position.x, _x.joints_input_01.batterylock3.position.y, _x.joints_input_01.batterylock3.position.z, _x.joints_input_01.batterylock3.orientation.x, _x.joints_input_01.batterylock3.orientation.y, _x.joints_input_01.batterylock3.orientation.z, _x.joints_input_01.batterylock3.orientation.w, _x.joints_input_01.batterylock4.position.x, _x.joints_input_01.batterylock4.position.y, _x.joints_input_01.batterylock4.position.z, _x.joints_input_01.batterylock4.orientation.x, _x.joints_input_01.batterylock4.orientation.y, _x.joints_input_01.batterylock4.orientation.z, _x.joints_input_01.batterylock4.orientation.w))
      buff.write(_get_struct_6d().pack(*self.joints_input_02.joints_input_01))
      buff.write(_get_struct_6d().pack(*self.joints_input_02.joints_input_02))
      buff.write(_get_struct_6d().pack(*self.joints_input_02.joints_input_03))
      _x = self
      buff.write(_get_struct_42d().pack(_x.joints_input_02.bms.position.x, _x.joints_input_02.bms.position.y, _x.joints_input_02.bms.position.z, _x.joints_input_02.bms.orientation.x, _x.joints_input_02.bms.orientation.y, _x.joints_input_02.bms.orientation.z, _x.joints_input_02.bms.orientation.w, _x.joints_input_02.place_pose.position.x, _x.joints_input_02.place_pose.position.y, _x.joints_input_02.place_pose.position.z, _x.joints_input_02.place_pose.orientation.x, _x.joints_input_02.place_pose.orientation.y, _x.joints_input_02.place_pose.orientation.z, _x.joints_input_02.place_pose.orientation.w, _x.joints_input_02.batterylock1.position.x, _x.joints_input_02.batterylock1.position.y, _x.joints_input_02.batterylock1.position.z, _x.joints_input_02.batterylock1.orientation.x, _x.joints_input_02.batterylock1.orientation.y, _x.joints_input_02.batterylock1.orientation.z, _x.joints_input_02.batterylock1.orientation.w, _x.joints_input_02.batterylock2.position.x, _x.joints_input_02.batterylock2.position.y, _x.joints_input_02.batterylock2.position.z, _x.joints_input_02.batterylock2.orientation.x, _x.joints_input_02.batterylock2.orientation.y, _x.joints_input_02.batterylock2.orientation.z, _x.joints_input_02.batterylock2.orientation.w, _x.joints_input_02.batterylock3.position.x, _x.joints_input_02.batterylock3.position.y, _x.joints_input_02.batterylock3.position.z, _x.joints_input_02.batterylock3.orientation.x, _x.joints_input_02.batterylock3.orientation.y, _x.joints_input_02.batterylock3.orientation.z, _x.joints_input_02.batterylock3.orientation.w, _x.joints_input_02.batterylock4.position.x, _x.joints_input_02.batterylock4.position.y, _x.joints_input_02.batterylock4.position.z, _x.joints_input_02.batterylock4.orientation.x, _x.joints_input_02.batterylock4.orientation.y, _x.joints_input_02.batterylock4.orientation.z, _x.joints_input_02.batterylock4.orientation.w))
      buff.write(_get_struct_6d().pack(*self.joints_input_03.joints_input_01))
      buff.write(_get_struct_6d().pack(*self.joints_input_03.joints_input_02))
      buff.write(_get_struct_6d().pack(*self.joints_input_03.joints_input_03))
      _x = self
      buff.write(_get_struct_255d().pack(_x.joints_input_03.bms.position.x, _x.joints_input_03.bms.position.y, _x.joints_input_03.bms.position.z, _x.joints_input_03.bms.orientation.x, _x.joints_input_03.bms.orientation.y, _x.joints_input_03.bms.orientation.z, _x.joints_input_03.bms.orientation.w, _x.joints_input_03.place_pose.position.x, _x.joints_input_03.place_pose.position.y, _x.joints_input_03.place_pose.position.z, _x.joints_input_03.place_pose.orientation.x, _x.joints_input_03.place_pose.orientation.y, _x.joints_input_03.place_pose.orientation.z, _x.joints_input_03.place_pose.orientation.w, _x.joints_input_03.batterylock1.position.x, _x.joints_input_03.batterylock1.position.y, _x.joints_input_03.batterylock1.position.z, _x.joints_input_03.batterylock1.orientation.x, _x.joints_input_03.batterylock1.orientation.y, _x.joints_input_03.batterylock1.orientation.z, _x.joints_input_03.batterylock1.orientation.w, _x.joints_input_03.batterylock2.position.x, _x.joints_input_03.batterylock2.position.y, _x.joints_input_03.batterylock2.position.z, _x.joints_input_03.batterylock2.orientation.x, _x.joints_input_03.batterylock2.orientation.y, _x.joints_input_03.batterylock2.orientation.z, _x.joints_input_03.batterylock2.orientation.w, _x.joints_input_03.batterylock3.position.x, _x.joints_input_03.batterylock3.position.y, _x.joints_input_03.batterylock3.position.z, _x.joints_input_03.batterylock3.orientation.x, _x.joints_input_03.batterylock3.orientation.y, _x.joints_input_03.batterylock3.orientation.z, _x.joints_input_03.batterylock3.orientation.w, _x.joints_input_03.batterylock4.position.x, _x.joints_input_03.batterylock4.position.y, _x.joints_input_03.batterylock4.position.z, _x.joints_input_03.batterylock4.orientation.x, _x.joints_input_03.batterylock4.orientation.y, _x.joints_input_03.batterylock4.orientation.z, _x.joints_input_03.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w, _x.target09.position.x, _x.target09.position.y, _x.target09.position.z, _x.target09.orientation.x, _x.target09.orientation.y, _x.target09.orientation.z, _x.target09.orientation.w, _x.target10.position.x, _x.target10.position.y, _x.target10.position.z, _x.target10.orientation.x, _x.target10.orientation.y, _x.target10.orientation.z, _x.target10.orientation.w, _x.target11.position.x, _x.target11.position.y, _x.target11.position.z, _x.target11.orientation.x, _x.target11.orientation.y, _x.target11.orientation.z, _x.target11.orientation.w, _x.target12.position.x, _x.target12.position.y, _x.target12.position.z, _x.target12.orientation.x, _x.target12.orientation.y, _x.target12.orientation.z, _x.target12.orientation.w, _x.target13.position.x, _x.target13.position.y, _x.target13.position.z, _x.target13.orientation.x, _x.target13.orientation.y, _x.target13.orientation.z, _x.target13.orientation.w, _x.target14.position.x, _x.target14.position.y, _x.target14.position.z, _x.target14.orientation.x, _x.target14.orientation.y, _x.target14.orientation.z, _x.target14.orientation.w, _x.target15.position.x, _x.target15.position.y, _x.target15.position.z, _x.target15.orientation.x, _x.target15.orientation.y, _x.target15.orientation.z, _x.target15.orientation.w, _x.target16.position.x, _x.target16.position.y, _x.target16.position.z, _x.target16.orientation.x, _x.target16.orientation.y, _x.target16.orientation.z, _x.target16.orientation.w, _x.target17.position.x, _x.target17.position.y, _x.target17.position.z, _x.target17.orientation.x, _x.target17.orientation.y, _x.target17.orientation.z, _x.target17.orientation.w, _x.target18.position.x, _x.target18.position.y, _x.target18.position.z, _x.target18.orientation.x, _x.target18.orientation.y, _x.target18.orientation.z, _x.target18.orientation.w, _x.target19.position.x, _x.target19.position.y, _x.target19.position.z, _x.target19.orientation.x, _x.target19.orientation.y, _x.target19.orientation.z, _x.target19.orientation.w, _x.target20.position.x, _x.target20.position.y, _x.target20.position.z, _x.target20.orientation.x, _x.target20.orientation.y, _x.target20.orientation.z, _x.target20.orientation.w, _x.target21.position.x, _x.target21.position.y, _x.target21.position.z, _x.target21.orientation.x, _x.target21.orientation.y, _x.target21.orientation.z, _x.target21.orientation.w, _x.target22.position.x, _x.target22.position.y, _x.target22.position.z, _x.target22.orientation.x, _x.target22.orientation.y, _x.target22.orientation.z, _x.target22.orientation.w, _x.target23.position.x, _x.target23.position.y, _x.target23.position.z, _x.target23.orientation.x, _x.target23.orientation.y, _x.target23.orientation.z, _x.target23.orientation.w, _x.target24.position.x, _x.target24.position.y, _x.target24.position.z, _x.target24.orientation.x, _x.target24.orientation.y, _x.target24.orientation.z, _x.target24.orientation.w, _x.target25.position.x, _x.target25.position.y, _x.target25.position.z, _x.target25.orientation.x, _x.target25.orientation.y, _x.target25.orientation.z, _x.target25.orientation.w, _x.target26.position.x, _x.target26.position.y, _x.target26.position.z, _x.target26.orientation.x, _x.target26.orientation.y, _x.target26.orientation.z, _x.target26.orientation.w, _x.target27.position.x, _x.target27.position.y, _x.target27.position.z, _x.target27.orientation.x, _x.target27.orientation.y, _x.target27.orientation.z, _x.target27.orientation.w, _x.target28.position.x, _x.target28.position.y, _x.target28.position.z, _x.target28.orientation.x, _x.target28.orientation.y, _x.target28.orientation.z, _x.target28.orientation.w, _x.target41.position.x, _x.target41.position.y, _x.target41.position.z, _x.target41.orientation.x, _x.target41.orientation.y, _x.target41.orientation.z, _x.target41.orientation.w, _x.target42.position.x, _x.target42.position.y, _x.target42.position.z, _x.target42.orientation.x, _x.target42.orientation.y, _x.target42.orientation.z, _x.target42.orientation.w, _x.target43.position.x, _x.target43.position.y, _x.target43.position.z))
      _x = self
      buff.write(_get_struct_255d().pack(_x.target43.orientation.x, _x.target43.orientation.y, _x.target43.orientation.z, _x.target43.orientation.w, _x.target44.position.x, _x.target44.position.y, _x.target44.position.z, _x.target44.orientation.x, _x.target44.orientation.y, _x.target44.orientation.z, _x.target44.orientation.w, _x.target45.position.x, _x.target45.position.y, _x.target45.position.z, _x.target45.orientation.x, _x.target45.orientation.y, _x.target45.orientation.z, _x.target45.orientation.w, _x.target46.position.x, _x.target46.position.y, _x.target46.position.z, _x.target46.orientation.x, _x.target46.orientation.y, _x.target46.orientation.z, _x.target46.orientation.w, _x.target47.position.x, _x.target47.position.y, _x.target47.position.z, _x.target47.orientation.x, _x.target47.orientation.y, _x.target47.orientation.z, _x.target47.orientation.w, _x.target48.position.x, _x.target48.position.y, _x.target48.position.z, _x.target48.orientation.x, _x.target48.orientation.y, _x.target48.orientation.z, _x.target48.orientation.w, _x.target49.position.x, _x.target49.position.y, _x.target49.position.z, _x.target49.orientation.x, _x.target49.orientation.y, _x.target49.orientation.z, _x.target49.orientation.w, _x.target50.position.x, _x.target50.position.y, _x.target50.position.z, _x.target50.orientation.x, _x.target50.orientation.y, _x.target50.orientation.z, _x.target50.orientation.w, _x.target51.position.x, _x.target51.position.y, _x.target51.position.z, _x.target51.orientation.x, _x.target51.orientation.y, _x.target51.orientation.z, _x.target51.orientation.w, _x.target52.position.x, _x.target52.position.y, _x.target52.position.z, _x.target52.orientation.x, _x.target52.orientation.y, _x.target52.orientation.z, _x.target52.orientation.w, _x.target53.position.x, _x.target53.position.y, _x.target53.position.z, _x.target53.orientation.x, _x.target53.orientation.y, _x.target53.orientation.z, _x.target53.orientation.w, _x.target54.position.x, _x.target54.position.y, _x.target54.position.z, _x.target54.orientation.x, _x.target54.orientation.y, _x.target54.orientation.z, _x.target54.orientation.w, _x.target55.position.x, _x.target55.position.y, _x.target55.position.z, _x.target55.orientation.x, _x.target55.orientation.y, _x.target55.orientation.z, _x.target55.orientation.w, _x.target56.position.x, _x.target56.position.y, _x.target56.position.z, _x.target56.orientation.x, _x.target56.orientation.y, _x.target56.orientation.z, _x.target56.orientation.w, _x.target57.position.x, _x.target57.position.y, _x.target57.position.z, _x.target57.orientation.x, _x.target57.orientation.y, _x.target57.orientation.z, _x.target57.orientation.w, _x.target58.position.x, _x.target58.position.y, _x.target58.position.z, _x.target58.orientation.x, _x.target58.orientation.y, _x.target58.orientation.z, _x.target58.orientation.w, _x.target59.position.x, _x.target59.position.y, _x.target59.position.z, _x.target59.orientation.x, _x.target59.orientation.y, _x.target59.orientation.z, _x.target59.orientation.w, _x.target60.position.x, _x.target60.position.y, _x.target60.position.z, _x.target60.orientation.x, _x.target60.orientation.y, _x.target60.orientation.z, _x.target60.orientation.w, _x.target61.position.x, _x.target61.position.y, _x.target61.position.z, _x.target61.orientation.x, _x.target61.orientation.y, _x.target61.orientation.z, _x.target61.orientation.w, _x.target62.position.x, _x.target62.position.y, _x.target62.position.z, _x.target62.orientation.x, _x.target62.orientation.y, _x.target62.orientation.z, _x.target62.orientation.w, _x.target63.position.x, _x.target63.position.y, _x.target63.position.z, _x.target63.orientation.x, _x.target63.orientation.y, _x.target63.orientation.z, _x.target63.orientation.w, _x.target64.position.x, _x.target64.position.y, _x.target64.position.z, _x.target64.orientation.x, _x.target64.orientation.y, _x.target64.orientation.z, _x.target64.orientation.w, _x.target65.position.x, _x.target65.position.y, _x.target65.position.z, _x.target65.orientation.x, _x.target65.orientation.y, _x.target65.orientation.z, _x.target65.orientation.w, _x.target66.position.x, _x.target66.position.y, _x.target66.position.z, _x.target66.orientation.x, _x.target66.orientation.y, _x.target66.orientation.z, _x.target66.orientation.w, _x.target67.position.x, _x.target67.position.y, _x.target67.position.z, _x.target67.orientation.x, _x.target67.orientation.y, _x.target67.orientation.z, _x.target67.orientation.w, _x.target68.position.x, _x.target68.position.y, _x.target68.position.z, _x.target68.orientation.x, _x.target68.orientation.y, _x.target68.orientation.z, _x.target68.orientation.w, _x.target69.position.x, _x.target69.position.y, _x.target69.position.z, _x.target69.orientation.x, _x.target69.orientation.y, _x.target69.orientation.z, _x.target69.orientation.w, _x.target70.position.x, _x.target70.position.y, _x.target70.position.z, _x.target70.orientation.x, _x.target70.orientation.y, _x.target70.orientation.z, _x.target70.orientation.w, _x.target71.position.x, _x.target71.position.y, _x.target71.position.z, _x.target71.orientation.x, _x.target71.orientation.y, _x.target71.orientation.z, _x.target71.orientation.w, _x.target72.position.x, _x.target72.position.y, _x.target72.position.z, _x.target72.orientation.x, _x.target72.orientation.y, _x.target72.orientation.z, _x.target72.orientation.w, _x.target73.position.x, _x.target73.position.y, _x.target73.position.z, _x.target73.orientation.x, _x.target73.orientation.y, _x.target73.orientation.z, _x.target73.orientation.w, _x.target74.position.x, _x.target74.position.y, _x.target74.position.z, _x.target74.orientation.x, _x.target74.orientation.y, _x.target74.orientation.z, _x.target74.orientation.w, _x.target75.position.x, _x.target75.position.y, _x.target75.position.z, _x.target75.orientation.x, _x.target75.orientation.y, _x.target75.orientation.z, _x.target75.orientation.w, _x.target76.position.x, _x.target76.position.y, _x.target76.position.z, _x.target76.orientation.x, _x.target76.orientation.y, _x.target76.orientation.z, _x.target76.orientation.w, _x.target77.position.x, _x.target77.position.y, _x.target77.position.z, _x.target77.orientation.x, _x.target77.orientation.y, _x.target77.orientation.z, _x.target77.orientation.w, _x.target78.position.x, _x.target78.position.y, _x.target78.position.z, _x.target78.orientation.x, _x.target78.orientation.y, _x.target78.orientation.z, _x.target78.orientation.w, _x.target79.position.x, _x.target79.position.y, _x.target79.position.z, _x.target79.orientation.x, _x.target79.orientation.y, _x.target79.orientation.z))
      _x = self
      buff.write(_get_struct_255d().pack(_x.target79.orientation.w, _x.target80.position.x, _x.target80.position.y, _x.target80.position.z, _x.target80.orientation.x, _x.target80.orientation.y, _x.target80.orientation.z, _x.target80.orientation.w, _x.target81.position.x, _x.target81.position.y, _x.target81.position.z, _x.target81.orientation.x, _x.target81.orientation.y, _x.target81.orientation.z, _x.target81.orientation.w, _x.target82.position.x, _x.target82.position.y, _x.target82.position.z, _x.target82.orientation.x, _x.target82.orientation.y, _x.target82.orientation.z, _x.target82.orientation.w, _x.target83.position.x, _x.target83.position.y, _x.target83.position.z, _x.target83.orientation.x, _x.target83.orientation.y, _x.target83.orientation.z, _x.target83.orientation.w, _x.target84.position.x, _x.target84.position.y, _x.target84.position.z, _x.target84.orientation.x, _x.target84.orientation.y, _x.target84.orientation.z, _x.target84.orientation.w, _x.target85.position.x, _x.target85.position.y, _x.target85.position.z, _x.target85.orientation.x, _x.target85.orientation.y, _x.target85.orientation.z, _x.target85.orientation.w, _x.target86.position.x, _x.target86.position.y, _x.target86.position.z, _x.target86.orientation.x, _x.target86.orientation.y, _x.target86.orientation.z, _x.target86.orientation.w, _x.target87.position.x, _x.target87.position.y, _x.target87.position.z, _x.target87.orientation.x, _x.target87.orientation.y, _x.target87.orientation.z, _x.target87.orientation.w, _x.target88.position.x, _x.target88.position.y, _x.target88.position.z, _x.target88.orientation.x, _x.target88.orientation.y, _x.target88.orientation.z, _x.target88.orientation.w, _x.target89.position.x, _x.target89.position.y, _x.target89.position.z, _x.target89.orientation.x, _x.target89.orientation.y, _x.target89.orientation.z, _x.target89.orientation.w, _x.target90.position.x, _x.target90.position.y, _x.target90.position.z, _x.target90.orientation.x, _x.target90.orientation.y, _x.target90.orientation.z, _x.target90.orientation.w, _x.target91.position.x, _x.target91.position.y, _x.target91.position.z, _x.target91.orientation.x, _x.target91.orientation.y, _x.target91.orientation.z, _x.target91.orientation.w, _x.target92.position.x, _x.target92.position.y, _x.target92.position.z, _x.target92.orientation.x, _x.target92.orientation.y, _x.target92.orientation.z, _x.target92.orientation.w, _x.target93.position.x, _x.target93.position.y, _x.target93.position.z, _x.target93.orientation.x, _x.target93.orientation.y, _x.target93.orientation.z, _x.target93.orientation.w, _x.target94.position.x, _x.target94.position.y, _x.target94.position.z, _x.target94.orientation.x, _x.target94.orientation.y, _x.target94.orientation.z, _x.target94.orientation.w, _x.target95.position.x, _x.target95.position.y, _x.target95.position.z, _x.target95.orientation.x, _x.target95.orientation.y, _x.target95.orientation.z, _x.target95.orientation.w, _x.target96.position.x, _x.target96.position.y, _x.target96.position.z, _x.target96.orientation.x, _x.target96.orientation.y, _x.target96.orientation.z, _x.target96.orientation.w, _x.target97.position.x, _x.target97.position.y, _x.target97.position.z, _x.target97.orientation.x, _x.target97.orientation.y, _x.target97.orientation.z, _x.target97.orientation.w, _x.target98.position.x, _x.target98.position.y, _x.target98.position.z, _x.target98.orientation.x, _x.target98.orientation.y, _x.target98.orientation.z, _x.target98.orientation.w, _x.target99.position.x, _x.target99.position.y, _x.target99.position.z, _x.target99.orientation.x, _x.target99.orientation.y, _x.target99.orientation.z, _x.target99.orientation.w, _x.target100.position.x, _x.target100.position.y, _x.target100.position.z, _x.target100.orientation.x, _x.target100.orientation.y, _x.target100.orientation.z, _x.target100.orientation.w, _x.target101.position.x, _x.target101.position.y, _x.target101.position.z, _x.target101.orientation.x, _x.target101.orientation.y, _x.target101.orientation.z, _x.target101.orientation.w, _x.target102.position.x, _x.target102.position.y, _x.target102.position.z, _x.target102.orientation.x, _x.target102.orientation.y, _x.target102.orientation.z, _x.target102.orientation.w, _x.target103.position.x, _x.target103.position.y, _x.target103.position.z, _x.target103.orientation.x, _x.target103.orientation.y, _x.target103.orientation.z, _x.target103.orientation.w, _x.target104.position.x, _x.target104.position.y, _x.target104.position.z, _x.target104.orientation.x, _x.target104.orientation.y, _x.target104.orientation.z, _x.target104.orientation.w, _x.target105.position.x, _x.target105.position.y, _x.target105.position.z, _x.target105.orientation.x, _x.target105.orientation.y, _x.target105.orientation.z, _x.target105.orientation.w, _x.target106.position.x, _x.target106.position.y, _x.target106.position.z, _x.target106.orientation.x, _x.target106.orientation.y, _x.target106.orientation.z, _x.target106.orientation.w, _x.target107.position.x, _x.target107.position.y, _x.target107.position.z, _x.target107.orientation.x, _x.target107.orientation.y, _x.target107.orientation.z, _x.target107.orientation.w, _x.target108.position.x, _x.target108.position.y, _x.target108.position.z, _x.target108.orientation.x, _x.target108.orientation.y, _x.target108.orientation.z, _x.target108.orientation.w, _x.target109.position.x, _x.target109.position.y, _x.target109.position.z, _x.target109.orientation.x, _x.target109.orientation.y, _x.target109.orientation.z, _x.target109.orientation.w, _x.target110.position.x, _x.target110.position.y, _x.target110.position.z, _x.target110.orientation.x, _x.target110.orientation.y, _x.target110.orientation.z, _x.target110.orientation.w, _x.target111.position.x, _x.target111.position.y, _x.target111.position.z, _x.target111.orientation.x, _x.target111.orientation.y, _x.target111.orientation.z, _x.target111.orientation.w, _x.target112.position.x, _x.target112.position.y, _x.target112.position.z, _x.target112.orientation.x, _x.target112.orientation.y, _x.target112.orientation.z, _x.target112.orientation.w, _x.target113.position.x, _x.target113.position.y, _x.target113.position.z, _x.target113.orientation.x, _x.target113.orientation.y, _x.target113.orientation.z, _x.target113.orientation.w, _x.target114.position.x, _x.target114.position.y, _x.target114.position.z, _x.target114.orientation.x, _x.target114.orientation.y, _x.target114.orientation.z, _x.target114.orientation.w, _x.target115.position.x, _x.target115.position.y, _x.target115.position.z, _x.target115.orientation.x, _x.target115.orientation.y, _x.target115.orientation.z, _x.target115.orientation.w, _x.target116.position.x, _x.target116.position.y))
      _x = self
      buff.write(_get_struct_145d().pack(_x.target116.position.z, _x.target116.orientation.x, _x.target116.orientation.y, _x.target116.orientation.z, _x.target116.orientation.w, _x.target117.position.x, _x.target117.position.y, _x.target117.position.z, _x.target117.orientation.x, _x.target117.orientation.y, _x.target117.orientation.z, _x.target117.orientation.w, _x.target118.position.x, _x.target118.position.y, _x.target118.position.z, _x.target118.orientation.x, _x.target118.orientation.y, _x.target118.orientation.z, _x.target118.orientation.w, _x.target119.position.x, _x.target119.position.y, _x.target119.position.z, _x.target119.orientation.x, _x.target119.orientation.y, _x.target119.orientation.z, _x.target119.orientation.w, _x.target120.position.x, _x.target120.position.y, _x.target120.position.z, _x.target120.orientation.x, _x.target120.orientation.y, _x.target120.orientation.z, _x.target120.orientation.w, _x.target121.position.x, _x.target121.position.y, _x.target121.position.z, _x.target121.orientation.x, _x.target121.orientation.y, _x.target121.orientation.z, _x.target121.orientation.w, _x.target122.position.x, _x.target122.position.y, _x.target122.position.z, _x.target122.orientation.x, _x.target122.orientation.y, _x.target122.orientation.z, _x.target122.orientation.w, _x.target123.position.x, _x.target123.position.y, _x.target123.position.z, _x.target123.orientation.x, _x.target123.orientation.y, _x.target123.orientation.z, _x.target123.orientation.w, _x.target124.position.x, _x.target124.position.y, _x.target124.position.z, _x.target124.orientation.x, _x.target124.orientation.y, _x.target124.orientation.z, _x.target124.orientation.w, _x.target125.position.x, _x.target125.position.y, _x.target125.position.z, _x.target125.orientation.x, _x.target125.orientation.y, _x.target125.orientation.z, _x.target125.orientation.w, _x.target126.position.x, _x.target126.position.y, _x.target126.position.z, _x.target126.orientation.x, _x.target126.orientation.y, _x.target126.orientation.z, _x.target126.orientation.w, _x.target127.position.x, _x.target127.position.y, _x.target127.position.z, _x.target127.orientation.x, _x.target127.orientation.y, _x.target127.orientation.z, _x.target127.orientation.w, _x.target128.position.x, _x.target128.position.y, _x.target128.position.z, _x.target128.orientation.x, _x.target128.orientation.y, _x.target128.orientation.z, _x.target128.orientation.w, _x.target129.position.x, _x.target129.position.y, _x.target129.position.z, _x.target129.orientation.x, _x.target129.orientation.y, _x.target129.orientation.z, _x.target129.orientation.w, _x.target130.position.x, _x.target130.position.y, _x.target130.position.z, _x.target130.orientation.x, _x.target130.orientation.y, _x.target130.orientation.z, _x.target130.orientation.w, _x.target131.position.x, _x.target131.position.y, _x.target131.position.z, _x.target131.orientation.x, _x.target131.orientation.y, _x.target131.orientation.z, _x.target131.orientation.w, _x.target132.position.x, _x.target132.position.y, _x.target132.position.z, _x.target132.orientation.x, _x.target132.orientation.y, _x.target132.orientation.z, _x.target132.orientation.w, _x.target133.position.x, _x.target133.position.y, _x.target133.position.z, _x.target133.orientation.x, _x.target133.orientation.y, _x.target133.orientation.z, _x.target133.orientation.w, _x.target134.position.x, _x.target134.position.y, _x.target134.position.z, _x.target134.orientation.x, _x.target134.orientation.y, _x.target134.orientation.z, _x.target134.orientation.w, _x.target135.position.x, _x.target135.position.y, _x.target135.position.z, _x.target135.orientation.x, _x.target135.orientation.y, _x.target135.orientation.z, _x.target135.orientation.w, _x.target136.position.x, _x.target136.position.y, _x.target136.position.z, _x.target136.orientation.x, _x.target136.orientation.y, _x.target136.orientation.z, _x.target136.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joints_input_01 is None:
        self.joints_input_01 = robots_start.msg.MoveitJoints()
      if self.joints_input_02 is None:
        self.joints_input_02 = robots_start.msg.MoveitJoints()
      if self.joints_input_03 is None:
        self.joints_input_03 = robots_start.msg.MoveitJoints()
      if self.target01 is None:
        self.target01 = geometry_msgs.msg.Pose()
      if self.target02 is None:
        self.target02 = geometry_msgs.msg.Pose()
      if self.target03 is None:
        self.target03 = geometry_msgs.msg.Pose()
      if self.target04 is None:
        self.target04 = geometry_msgs.msg.Pose()
      if self.target05 is None:
        self.target05 = geometry_msgs.msg.Pose()
      if self.target06 is None:
        self.target06 = geometry_msgs.msg.Pose()
      if self.target07 is None:
        self.target07 = geometry_msgs.msg.Pose()
      if self.target08 is None:
        self.target08 = geometry_msgs.msg.Pose()
      if self.target09 is None:
        self.target09 = geometry_msgs.msg.Pose()
      if self.target10 is None:
        self.target10 = geometry_msgs.msg.Pose()
      if self.target11 is None:
        self.target11 = geometry_msgs.msg.Pose()
      if self.target12 is None:
        self.target12 = geometry_msgs.msg.Pose()
      if self.target13 is None:
        self.target13 = geometry_msgs.msg.Pose()
      if self.target14 is None:
        self.target14 = geometry_msgs.msg.Pose()
      if self.target15 is None:
        self.target15 = geometry_msgs.msg.Pose()
      if self.target16 is None:
        self.target16 = geometry_msgs.msg.Pose()
      if self.target17 is None:
        self.target17 = geometry_msgs.msg.Pose()
      if self.target18 is None:
        self.target18 = geometry_msgs.msg.Pose()
      if self.target19 is None:
        self.target19 = geometry_msgs.msg.Pose()
      if self.target20 is None:
        self.target20 = geometry_msgs.msg.Pose()
      if self.target21 is None:
        self.target21 = geometry_msgs.msg.Pose()
      if self.target22 is None:
        self.target22 = geometry_msgs.msg.Pose()
      if self.target23 is None:
        self.target23 = geometry_msgs.msg.Pose()
      if self.target24 is None:
        self.target24 = geometry_msgs.msg.Pose()
      if self.target25 is None:
        self.target25 = geometry_msgs.msg.Pose()
      if self.target26 is None:
        self.target26 = geometry_msgs.msg.Pose()
      if self.target27 is None:
        self.target27 = geometry_msgs.msg.Pose()
      if self.target28 is None:
        self.target28 = geometry_msgs.msg.Pose()
      if self.target41 is None:
        self.target41 = geometry_msgs.msg.Pose()
      if self.target42 is None:
        self.target42 = geometry_msgs.msg.Pose()
      if self.target43 is None:
        self.target43 = geometry_msgs.msg.Pose()
      if self.target44 is None:
        self.target44 = geometry_msgs.msg.Pose()
      if self.target45 is None:
        self.target45 = geometry_msgs.msg.Pose()
      if self.target46 is None:
        self.target46 = geometry_msgs.msg.Pose()
      if self.target47 is None:
        self.target47 = geometry_msgs.msg.Pose()
      if self.target48 is None:
        self.target48 = geometry_msgs.msg.Pose()
      if self.target49 is None:
        self.target49 = geometry_msgs.msg.Pose()
      if self.target50 is None:
        self.target50 = geometry_msgs.msg.Pose()
      if self.target51 is None:
        self.target51 = geometry_msgs.msg.Pose()
      if self.target52 is None:
        self.target52 = geometry_msgs.msg.Pose()
      if self.target53 is None:
        self.target53 = geometry_msgs.msg.Pose()
      if self.target54 is None:
        self.target54 = geometry_msgs.msg.Pose()
      if self.target55 is None:
        self.target55 = geometry_msgs.msg.Pose()
      if self.target56 is None:
        self.target56 = geometry_msgs.msg.Pose()
      if self.target57 is None:
        self.target57 = geometry_msgs.msg.Pose()
      if self.target58 is None:
        self.target58 = geometry_msgs.msg.Pose()
      if self.target59 is None:
        self.target59 = geometry_msgs.msg.Pose()
      if self.target60 is None:
        self.target60 = geometry_msgs.msg.Pose()
      if self.target61 is None:
        self.target61 = geometry_msgs.msg.Pose()
      if self.target62 is None:
        self.target62 = geometry_msgs.msg.Pose()
      if self.target63 is None:
        self.target63 = geometry_msgs.msg.Pose()
      if self.target64 is None:
        self.target64 = geometry_msgs.msg.Pose()
      if self.target65 is None:
        self.target65 = geometry_msgs.msg.Pose()
      if self.target66 is None:
        self.target66 = geometry_msgs.msg.Pose()
      if self.target67 is None:
        self.target67 = geometry_msgs.msg.Pose()
      if self.target68 is None:
        self.target68 = geometry_msgs.msg.Pose()
      if self.target69 is None:
        self.target69 = geometry_msgs.msg.Pose()
      if self.target70 is None:
        self.target70 = geometry_msgs.msg.Pose()
      if self.target71 is None:
        self.target71 = geometry_msgs.msg.Pose()
      if self.target72 is None:
        self.target72 = geometry_msgs.msg.Pose()
      if self.target73 is None:
        self.target73 = geometry_msgs.msg.Pose()
      if self.target74 is None:
        self.target74 = geometry_msgs.msg.Pose()
      if self.target75 is None:
        self.target75 = geometry_msgs.msg.Pose()
      if self.target76 is None:
        self.target76 = geometry_msgs.msg.Pose()
      if self.target77 is None:
        self.target77 = geometry_msgs.msg.Pose()
      if self.target78 is None:
        self.target78 = geometry_msgs.msg.Pose()
      if self.target79 is None:
        self.target79 = geometry_msgs.msg.Pose()
      if self.target80 is None:
        self.target80 = geometry_msgs.msg.Pose()
      if self.target81 is None:
        self.target81 = geometry_msgs.msg.Pose()
      if self.target82 is None:
        self.target82 = geometry_msgs.msg.Pose()
      if self.target83 is None:
        self.target83 = geometry_msgs.msg.Pose()
      if self.target84 is None:
        self.target84 = geometry_msgs.msg.Pose()
      if self.target85 is None:
        self.target85 = geometry_msgs.msg.Pose()
      if self.target86 is None:
        self.target86 = geometry_msgs.msg.Pose()
      if self.target87 is None:
        self.target87 = geometry_msgs.msg.Pose()
      if self.target88 is None:
        self.target88 = geometry_msgs.msg.Pose()
      if self.target89 is None:
        self.target89 = geometry_msgs.msg.Pose()
      if self.target90 is None:
        self.target90 = geometry_msgs.msg.Pose()
      if self.target91 is None:
        self.target91 = geometry_msgs.msg.Pose()
      if self.target92 is None:
        self.target92 = geometry_msgs.msg.Pose()
      if self.target93 is None:
        self.target93 = geometry_msgs.msg.Pose()
      if self.target94 is None:
        self.target94 = geometry_msgs.msg.Pose()
      if self.target95 is None:
        self.target95 = geometry_msgs.msg.Pose()
      if self.target96 is None:
        self.target96 = geometry_msgs.msg.Pose()
      if self.target97 is None:
        self.target97 = geometry_msgs.msg.Pose()
      if self.target98 is None:
        self.target98 = geometry_msgs.msg.Pose()
      if self.target99 is None:
        self.target99 = geometry_msgs.msg.Pose()
      if self.target100 is None:
        self.target100 = geometry_msgs.msg.Pose()
      if self.target101 is None:
        self.target101 = geometry_msgs.msg.Pose()
      if self.target102 is None:
        self.target102 = geometry_msgs.msg.Pose()
      if self.target103 is None:
        self.target103 = geometry_msgs.msg.Pose()
      if self.target104 is None:
        self.target104 = geometry_msgs.msg.Pose()
      if self.target105 is None:
        self.target105 = geometry_msgs.msg.Pose()
      if self.target106 is None:
        self.target106 = geometry_msgs.msg.Pose()
      if self.target107 is None:
        self.target107 = geometry_msgs.msg.Pose()
      if self.target108 is None:
        self.target108 = geometry_msgs.msg.Pose()
      if self.target109 is None:
        self.target109 = geometry_msgs.msg.Pose()
      if self.target110 is None:
        self.target110 = geometry_msgs.msg.Pose()
      if self.target111 is None:
        self.target111 = geometry_msgs.msg.Pose()
      if self.target112 is None:
        self.target112 = geometry_msgs.msg.Pose()
      if self.target113 is None:
        self.target113 = geometry_msgs.msg.Pose()
      if self.target114 is None:
        self.target114 = geometry_msgs.msg.Pose()
      if self.target115 is None:
        self.target115 = geometry_msgs.msg.Pose()
      if self.target116 is None:
        self.target116 = geometry_msgs.msg.Pose()
      if self.target117 is None:
        self.target117 = geometry_msgs.msg.Pose()
      if self.target118 is None:
        self.target118 = geometry_msgs.msg.Pose()
      if self.target119 is None:
        self.target119 = geometry_msgs.msg.Pose()
      if self.target120 is None:
        self.target120 = geometry_msgs.msg.Pose()
      if self.target121 is None:
        self.target121 = geometry_msgs.msg.Pose()
      if self.target122 is None:
        self.target122 = geometry_msgs.msg.Pose()
      if self.target123 is None:
        self.target123 = geometry_msgs.msg.Pose()
      if self.target124 is None:
        self.target124 = geometry_msgs.msg.Pose()
      if self.target125 is None:
        self.target125 = geometry_msgs.msg.Pose()
      if self.target126 is None:
        self.target126 = geometry_msgs.msg.Pose()
      if self.target127 is None:
        self.target127 = geometry_msgs.msg.Pose()
      if self.target128 is None:
        self.target128 = geometry_msgs.msg.Pose()
      if self.target129 is None:
        self.target129 = geometry_msgs.msg.Pose()
      if self.target130 is None:
        self.target130 = geometry_msgs.msg.Pose()
      if self.target131 is None:
        self.target131 = geometry_msgs.msg.Pose()
      if self.target132 is None:
        self.target132 = geometry_msgs.msg.Pose()
      if self.target133 is None:
        self.target133 = geometry_msgs.msg.Pose()
      if self.target134 is None:
        self.target134 = geometry_msgs.msg.Pose()
      if self.target135 is None:
        self.target135 = geometry_msgs.msg.Pose()
      if self.target136 is None:
        self.target136 = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 48
      self.joints_input_01.joints_input_01 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_01.joints_input_02 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_01.joints_input_03 = _get_struct_6d().unpack(str[start:end])
      _x = self
      start = end
      end += 336
      (_x.joints_input_01.bms.position.x, _x.joints_input_01.bms.position.y, _x.joints_input_01.bms.position.z, _x.joints_input_01.bms.orientation.x, _x.joints_input_01.bms.orientation.y, _x.joints_input_01.bms.orientation.z, _x.joints_input_01.bms.orientation.w, _x.joints_input_01.place_pose.position.x, _x.joints_input_01.place_pose.position.y, _x.joints_input_01.place_pose.position.z, _x.joints_input_01.place_pose.orientation.x, _x.joints_input_01.place_pose.orientation.y, _x.joints_input_01.place_pose.orientation.z, _x.joints_input_01.place_pose.orientation.w, _x.joints_input_01.batterylock1.position.x, _x.joints_input_01.batterylock1.position.y, _x.joints_input_01.batterylock1.position.z, _x.joints_input_01.batterylock1.orientation.x, _x.joints_input_01.batterylock1.orientation.y, _x.joints_input_01.batterylock1.orientation.z, _x.joints_input_01.batterylock1.orientation.w, _x.joints_input_01.batterylock2.position.x, _x.joints_input_01.batterylock2.position.y, _x.joints_input_01.batterylock2.position.z, _x.joints_input_01.batterylock2.orientation.x, _x.joints_input_01.batterylock2.orientation.y, _x.joints_input_01.batterylock2.orientation.z, _x.joints_input_01.batterylock2.orientation.w, _x.joints_input_01.batterylock3.position.x, _x.joints_input_01.batterylock3.position.y, _x.joints_input_01.batterylock3.position.z, _x.joints_input_01.batterylock3.orientation.x, _x.joints_input_01.batterylock3.orientation.y, _x.joints_input_01.batterylock3.orientation.z, _x.joints_input_01.batterylock3.orientation.w, _x.joints_input_01.batterylock4.position.x, _x.joints_input_01.batterylock4.position.y, _x.joints_input_01.batterylock4.position.z, _x.joints_input_01.batterylock4.orientation.x, _x.joints_input_01.batterylock4.orientation.y, _x.joints_input_01.batterylock4.orientation.z, _x.joints_input_01.batterylock4.orientation.w,) = _get_struct_42d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_02.joints_input_01 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_02.joints_input_02 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_02.joints_input_03 = _get_struct_6d().unpack(str[start:end])
      _x = self
      start = end
      end += 336
      (_x.joints_input_02.bms.position.x, _x.joints_input_02.bms.position.y, _x.joints_input_02.bms.position.z, _x.joints_input_02.bms.orientation.x, _x.joints_input_02.bms.orientation.y, _x.joints_input_02.bms.orientation.z, _x.joints_input_02.bms.orientation.w, _x.joints_input_02.place_pose.position.x, _x.joints_input_02.place_pose.position.y, _x.joints_input_02.place_pose.position.z, _x.joints_input_02.place_pose.orientation.x, _x.joints_input_02.place_pose.orientation.y, _x.joints_input_02.place_pose.orientation.z, _x.joints_input_02.place_pose.orientation.w, _x.joints_input_02.batterylock1.position.x, _x.joints_input_02.batterylock1.position.y, _x.joints_input_02.batterylock1.position.z, _x.joints_input_02.batterylock1.orientation.x, _x.joints_input_02.batterylock1.orientation.y, _x.joints_input_02.batterylock1.orientation.z, _x.joints_input_02.batterylock1.orientation.w, _x.joints_input_02.batterylock2.position.x, _x.joints_input_02.batterylock2.position.y, _x.joints_input_02.batterylock2.position.z, _x.joints_input_02.batterylock2.orientation.x, _x.joints_input_02.batterylock2.orientation.y, _x.joints_input_02.batterylock2.orientation.z, _x.joints_input_02.batterylock2.orientation.w, _x.joints_input_02.batterylock3.position.x, _x.joints_input_02.batterylock3.position.y, _x.joints_input_02.batterylock3.position.z, _x.joints_input_02.batterylock3.orientation.x, _x.joints_input_02.batterylock3.orientation.y, _x.joints_input_02.batterylock3.orientation.z, _x.joints_input_02.batterylock3.orientation.w, _x.joints_input_02.batterylock4.position.x, _x.joints_input_02.batterylock4.position.y, _x.joints_input_02.batterylock4.position.z, _x.joints_input_02.batterylock4.orientation.x, _x.joints_input_02.batterylock4.orientation.y, _x.joints_input_02.batterylock4.orientation.z, _x.joints_input_02.batterylock4.orientation.w,) = _get_struct_42d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_03.joints_input_01 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_03.joints_input_02 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_03.joints_input_03 = _get_struct_6d().unpack(str[start:end])
      _x = self
      start = end
      end += 2040
      (_x.joints_input_03.bms.position.x, _x.joints_input_03.bms.position.y, _x.joints_input_03.bms.position.z, _x.joints_input_03.bms.orientation.x, _x.joints_input_03.bms.orientation.y, _x.joints_input_03.bms.orientation.z, _x.joints_input_03.bms.orientation.w, _x.joints_input_03.place_pose.position.x, _x.joints_input_03.place_pose.position.y, _x.joints_input_03.place_pose.position.z, _x.joints_input_03.place_pose.orientation.x, _x.joints_input_03.place_pose.orientation.y, _x.joints_input_03.place_pose.orientation.z, _x.joints_input_03.place_pose.orientation.w, _x.joints_input_03.batterylock1.position.x, _x.joints_input_03.batterylock1.position.y, _x.joints_input_03.batterylock1.position.z, _x.joints_input_03.batterylock1.orientation.x, _x.joints_input_03.batterylock1.orientation.y, _x.joints_input_03.batterylock1.orientation.z, _x.joints_input_03.batterylock1.orientation.w, _x.joints_input_03.batterylock2.position.x, _x.joints_input_03.batterylock2.position.y, _x.joints_input_03.batterylock2.position.z, _x.joints_input_03.batterylock2.orientation.x, _x.joints_input_03.batterylock2.orientation.y, _x.joints_input_03.batterylock2.orientation.z, _x.joints_input_03.batterylock2.orientation.w, _x.joints_input_03.batterylock3.position.x, _x.joints_input_03.batterylock3.position.y, _x.joints_input_03.batterylock3.position.z, _x.joints_input_03.batterylock3.orientation.x, _x.joints_input_03.batterylock3.orientation.y, _x.joints_input_03.batterylock3.orientation.z, _x.joints_input_03.batterylock3.orientation.w, _x.joints_input_03.batterylock4.position.x, _x.joints_input_03.batterylock4.position.y, _x.joints_input_03.batterylock4.position.z, _x.joints_input_03.batterylock4.orientation.x, _x.joints_input_03.batterylock4.orientation.y, _x.joints_input_03.batterylock4.orientation.z, _x.joints_input_03.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w, _x.target09.position.x, _x.target09.position.y, _x.target09.position.z, _x.target09.orientation.x, _x.target09.orientation.y, _x.target09.orientation.z, _x.target09.orientation.w, _x.target10.position.x, _x.target10.position.y, _x.target10.position.z, _x.target10.orientation.x, _x.target10.orientation.y, _x.target10.orientation.z, _x.target10.orientation.w, _x.target11.position.x, _x.target11.position.y, _x.target11.position.z, _x.target11.orientation.x, _x.target11.orientation.y, _x.target11.orientation.z, _x.target11.orientation.w, _x.target12.position.x, _x.target12.position.y, _x.target12.position.z, _x.target12.orientation.x, _x.target12.orientation.y, _x.target12.orientation.z, _x.target12.orientation.w, _x.target13.position.x, _x.target13.position.y, _x.target13.position.z, _x.target13.orientation.x, _x.target13.orientation.y, _x.target13.orientation.z, _x.target13.orientation.w, _x.target14.position.x, _x.target14.position.y, _x.target14.position.z, _x.target14.orientation.x, _x.target14.orientation.y, _x.target14.orientation.z, _x.target14.orientation.w, _x.target15.position.x, _x.target15.position.y, _x.target15.position.z, _x.target15.orientation.x, _x.target15.orientation.y, _x.target15.orientation.z, _x.target15.orientation.w, _x.target16.position.x, _x.target16.position.y, _x.target16.position.z, _x.target16.orientation.x, _x.target16.orientation.y, _x.target16.orientation.z, _x.target16.orientation.w, _x.target17.position.x, _x.target17.position.y, _x.target17.position.z, _x.target17.orientation.x, _x.target17.orientation.y, _x.target17.orientation.z, _x.target17.orientation.w, _x.target18.position.x, _x.target18.position.y, _x.target18.position.z, _x.target18.orientation.x, _x.target18.orientation.y, _x.target18.orientation.z, _x.target18.orientation.w, _x.target19.position.x, _x.target19.position.y, _x.target19.position.z, _x.target19.orientation.x, _x.target19.orientation.y, _x.target19.orientation.z, _x.target19.orientation.w, _x.target20.position.x, _x.target20.position.y, _x.target20.position.z, _x.target20.orientation.x, _x.target20.orientation.y, _x.target20.orientation.z, _x.target20.orientation.w, _x.target21.position.x, _x.target21.position.y, _x.target21.position.z, _x.target21.orientation.x, _x.target21.orientation.y, _x.target21.orientation.z, _x.target21.orientation.w, _x.target22.position.x, _x.target22.position.y, _x.target22.position.z, _x.target22.orientation.x, _x.target22.orientation.y, _x.target22.orientation.z, _x.target22.orientation.w, _x.target23.position.x, _x.target23.position.y, _x.target23.position.z, _x.target23.orientation.x, _x.target23.orientation.y, _x.target23.orientation.z, _x.target23.orientation.w, _x.target24.position.x, _x.target24.position.y, _x.target24.position.z, _x.target24.orientation.x, _x.target24.orientation.y, _x.target24.orientation.z, _x.target24.orientation.w, _x.target25.position.x, _x.target25.position.y, _x.target25.position.z, _x.target25.orientation.x, _x.target25.orientation.y, _x.target25.orientation.z, _x.target25.orientation.w, _x.target26.position.x, _x.target26.position.y, _x.target26.position.z, _x.target26.orientation.x, _x.target26.orientation.y, _x.target26.orientation.z, _x.target26.orientation.w, _x.target27.position.x, _x.target27.position.y, _x.target27.position.z, _x.target27.orientation.x, _x.target27.orientation.y, _x.target27.orientation.z, _x.target27.orientation.w, _x.target28.position.x, _x.target28.position.y, _x.target28.position.z, _x.target28.orientation.x, _x.target28.orientation.y, _x.target28.orientation.z, _x.target28.orientation.w, _x.target41.position.x, _x.target41.position.y, _x.target41.position.z, _x.target41.orientation.x, _x.target41.orientation.y, _x.target41.orientation.z, _x.target41.orientation.w, _x.target42.position.x, _x.target42.position.y, _x.target42.position.z, _x.target42.orientation.x, _x.target42.orientation.y, _x.target42.orientation.z, _x.target42.orientation.w, _x.target43.position.x, _x.target43.position.y, _x.target43.position.z,) = _get_struct_255d().unpack(str[start:end])
      _x = self
      start = end
      end += 2040
      (_x.target43.orientation.x, _x.target43.orientation.y, _x.target43.orientation.z, _x.target43.orientation.w, _x.target44.position.x, _x.target44.position.y, _x.target44.position.z, _x.target44.orientation.x, _x.target44.orientation.y, _x.target44.orientation.z, _x.target44.orientation.w, _x.target45.position.x, _x.target45.position.y, _x.target45.position.z, _x.target45.orientation.x, _x.target45.orientation.y, _x.target45.orientation.z, _x.target45.orientation.w, _x.target46.position.x, _x.target46.position.y, _x.target46.position.z, _x.target46.orientation.x, _x.target46.orientation.y, _x.target46.orientation.z, _x.target46.orientation.w, _x.target47.position.x, _x.target47.position.y, _x.target47.position.z, _x.target47.orientation.x, _x.target47.orientation.y, _x.target47.orientation.z, _x.target47.orientation.w, _x.target48.position.x, _x.target48.position.y, _x.target48.position.z, _x.target48.orientation.x, _x.target48.orientation.y, _x.target48.orientation.z, _x.target48.orientation.w, _x.target49.position.x, _x.target49.position.y, _x.target49.position.z, _x.target49.orientation.x, _x.target49.orientation.y, _x.target49.orientation.z, _x.target49.orientation.w, _x.target50.position.x, _x.target50.position.y, _x.target50.position.z, _x.target50.orientation.x, _x.target50.orientation.y, _x.target50.orientation.z, _x.target50.orientation.w, _x.target51.position.x, _x.target51.position.y, _x.target51.position.z, _x.target51.orientation.x, _x.target51.orientation.y, _x.target51.orientation.z, _x.target51.orientation.w, _x.target52.position.x, _x.target52.position.y, _x.target52.position.z, _x.target52.orientation.x, _x.target52.orientation.y, _x.target52.orientation.z, _x.target52.orientation.w, _x.target53.position.x, _x.target53.position.y, _x.target53.position.z, _x.target53.orientation.x, _x.target53.orientation.y, _x.target53.orientation.z, _x.target53.orientation.w, _x.target54.position.x, _x.target54.position.y, _x.target54.position.z, _x.target54.orientation.x, _x.target54.orientation.y, _x.target54.orientation.z, _x.target54.orientation.w, _x.target55.position.x, _x.target55.position.y, _x.target55.position.z, _x.target55.orientation.x, _x.target55.orientation.y, _x.target55.orientation.z, _x.target55.orientation.w, _x.target56.position.x, _x.target56.position.y, _x.target56.position.z, _x.target56.orientation.x, _x.target56.orientation.y, _x.target56.orientation.z, _x.target56.orientation.w, _x.target57.position.x, _x.target57.position.y, _x.target57.position.z, _x.target57.orientation.x, _x.target57.orientation.y, _x.target57.orientation.z, _x.target57.orientation.w, _x.target58.position.x, _x.target58.position.y, _x.target58.position.z, _x.target58.orientation.x, _x.target58.orientation.y, _x.target58.orientation.z, _x.target58.orientation.w, _x.target59.position.x, _x.target59.position.y, _x.target59.position.z, _x.target59.orientation.x, _x.target59.orientation.y, _x.target59.orientation.z, _x.target59.orientation.w, _x.target60.position.x, _x.target60.position.y, _x.target60.position.z, _x.target60.orientation.x, _x.target60.orientation.y, _x.target60.orientation.z, _x.target60.orientation.w, _x.target61.position.x, _x.target61.position.y, _x.target61.position.z, _x.target61.orientation.x, _x.target61.orientation.y, _x.target61.orientation.z, _x.target61.orientation.w, _x.target62.position.x, _x.target62.position.y, _x.target62.position.z, _x.target62.orientation.x, _x.target62.orientation.y, _x.target62.orientation.z, _x.target62.orientation.w, _x.target63.position.x, _x.target63.position.y, _x.target63.position.z, _x.target63.orientation.x, _x.target63.orientation.y, _x.target63.orientation.z, _x.target63.orientation.w, _x.target64.position.x, _x.target64.position.y, _x.target64.position.z, _x.target64.orientation.x, _x.target64.orientation.y, _x.target64.orientation.z, _x.target64.orientation.w, _x.target65.position.x, _x.target65.position.y, _x.target65.position.z, _x.target65.orientation.x, _x.target65.orientation.y, _x.target65.orientation.z, _x.target65.orientation.w, _x.target66.position.x, _x.target66.position.y, _x.target66.position.z, _x.target66.orientation.x, _x.target66.orientation.y, _x.target66.orientation.z, _x.target66.orientation.w, _x.target67.position.x, _x.target67.position.y, _x.target67.position.z, _x.target67.orientation.x, _x.target67.orientation.y, _x.target67.orientation.z, _x.target67.orientation.w, _x.target68.position.x, _x.target68.position.y, _x.target68.position.z, _x.target68.orientation.x, _x.target68.orientation.y, _x.target68.orientation.z, _x.target68.orientation.w, _x.target69.position.x, _x.target69.position.y, _x.target69.position.z, _x.target69.orientation.x, _x.target69.orientation.y, _x.target69.orientation.z, _x.target69.orientation.w, _x.target70.position.x, _x.target70.position.y, _x.target70.position.z, _x.target70.orientation.x, _x.target70.orientation.y, _x.target70.orientation.z, _x.target70.orientation.w, _x.target71.position.x, _x.target71.position.y, _x.target71.position.z, _x.target71.orientation.x, _x.target71.orientation.y, _x.target71.orientation.z, _x.target71.orientation.w, _x.target72.position.x, _x.target72.position.y, _x.target72.position.z, _x.target72.orientation.x, _x.target72.orientation.y, _x.target72.orientation.z, _x.target72.orientation.w, _x.target73.position.x, _x.target73.position.y, _x.target73.position.z, _x.target73.orientation.x, _x.target73.orientation.y, _x.target73.orientation.z, _x.target73.orientation.w, _x.target74.position.x, _x.target74.position.y, _x.target74.position.z, _x.target74.orientation.x, _x.target74.orientation.y, _x.target74.orientation.z, _x.target74.orientation.w, _x.target75.position.x, _x.target75.position.y, _x.target75.position.z, _x.target75.orientation.x, _x.target75.orientation.y, _x.target75.orientation.z, _x.target75.orientation.w, _x.target76.position.x, _x.target76.position.y, _x.target76.position.z, _x.target76.orientation.x, _x.target76.orientation.y, _x.target76.orientation.z, _x.target76.orientation.w, _x.target77.position.x, _x.target77.position.y, _x.target77.position.z, _x.target77.orientation.x, _x.target77.orientation.y, _x.target77.orientation.z, _x.target77.orientation.w, _x.target78.position.x, _x.target78.position.y, _x.target78.position.z, _x.target78.orientation.x, _x.target78.orientation.y, _x.target78.orientation.z, _x.target78.orientation.w, _x.target79.position.x, _x.target79.position.y, _x.target79.position.z, _x.target79.orientation.x, _x.target79.orientation.y, _x.target79.orientation.z,) = _get_struct_255d().unpack(str[start:end])
      _x = self
      start = end
      end += 2040
      (_x.target79.orientation.w, _x.target80.position.x, _x.target80.position.y, _x.target80.position.z, _x.target80.orientation.x, _x.target80.orientation.y, _x.target80.orientation.z, _x.target80.orientation.w, _x.target81.position.x, _x.target81.position.y, _x.target81.position.z, _x.target81.orientation.x, _x.target81.orientation.y, _x.target81.orientation.z, _x.target81.orientation.w, _x.target82.position.x, _x.target82.position.y, _x.target82.position.z, _x.target82.orientation.x, _x.target82.orientation.y, _x.target82.orientation.z, _x.target82.orientation.w, _x.target83.position.x, _x.target83.position.y, _x.target83.position.z, _x.target83.orientation.x, _x.target83.orientation.y, _x.target83.orientation.z, _x.target83.orientation.w, _x.target84.position.x, _x.target84.position.y, _x.target84.position.z, _x.target84.orientation.x, _x.target84.orientation.y, _x.target84.orientation.z, _x.target84.orientation.w, _x.target85.position.x, _x.target85.position.y, _x.target85.position.z, _x.target85.orientation.x, _x.target85.orientation.y, _x.target85.orientation.z, _x.target85.orientation.w, _x.target86.position.x, _x.target86.position.y, _x.target86.position.z, _x.target86.orientation.x, _x.target86.orientation.y, _x.target86.orientation.z, _x.target86.orientation.w, _x.target87.position.x, _x.target87.position.y, _x.target87.position.z, _x.target87.orientation.x, _x.target87.orientation.y, _x.target87.orientation.z, _x.target87.orientation.w, _x.target88.position.x, _x.target88.position.y, _x.target88.position.z, _x.target88.orientation.x, _x.target88.orientation.y, _x.target88.orientation.z, _x.target88.orientation.w, _x.target89.position.x, _x.target89.position.y, _x.target89.position.z, _x.target89.orientation.x, _x.target89.orientation.y, _x.target89.orientation.z, _x.target89.orientation.w, _x.target90.position.x, _x.target90.position.y, _x.target90.position.z, _x.target90.orientation.x, _x.target90.orientation.y, _x.target90.orientation.z, _x.target90.orientation.w, _x.target91.position.x, _x.target91.position.y, _x.target91.position.z, _x.target91.orientation.x, _x.target91.orientation.y, _x.target91.orientation.z, _x.target91.orientation.w, _x.target92.position.x, _x.target92.position.y, _x.target92.position.z, _x.target92.orientation.x, _x.target92.orientation.y, _x.target92.orientation.z, _x.target92.orientation.w, _x.target93.position.x, _x.target93.position.y, _x.target93.position.z, _x.target93.orientation.x, _x.target93.orientation.y, _x.target93.orientation.z, _x.target93.orientation.w, _x.target94.position.x, _x.target94.position.y, _x.target94.position.z, _x.target94.orientation.x, _x.target94.orientation.y, _x.target94.orientation.z, _x.target94.orientation.w, _x.target95.position.x, _x.target95.position.y, _x.target95.position.z, _x.target95.orientation.x, _x.target95.orientation.y, _x.target95.orientation.z, _x.target95.orientation.w, _x.target96.position.x, _x.target96.position.y, _x.target96.position.z, _x.target96.orientation.x, _x.target96.orientation.y, _x.target96.orientation.z, _x.target96.orientation.w, _x.target97.position.x, _x.target97.position.y, _x.target97.position.z, _x.target97.orientation.x, _x.target97.orientation.y, _x.target97.orientation.z, _x.target97.orientation.w, _x.target98.position.x, _x.target98.position.y, _x.target98.position.z, _x.target98.orientation.x, _x.target98.orientation.y, _x.target98.orientation.z, _x.target98.orientation.w, _x.target99.position.x, _x.target99.position.y, _x.target99.position.z, _x.target99.orientation.x, _x.target99.orientation.y, _x.target99.orientation.z, _x.target99.orientation.w, _x.target100.position.x, _x.target100.position.y, _x.target100.position.z, _x.target100.orientation.x, _x.target100.orientation.y, _x.target100.orientation.z, _x.target100.orientation.w, _x.target101.position.x, _x.target101.position.y, _x.target101.position.z, _x.target101.orientation.x, _x.target101.orientation.y, _x.target101.orientation.z, _x.target101.orientation.w, _x.target102.position.x, _x.target102.position.y, _x.target102.position.z, _x.target102.orientation.x, _x.target102.orientation.y, _x.target102.orientation.z, _x.target102.orientation.w, _x.target103.position.x, _x.target103.position.y, _x.target103.position.z, _x.target103.orientation.x, _x.target103.orientation.y, _x.target103.orientation.z, _x.target103.orientation.w, _x.target104.position.x, _x.target104.position.y, _x.target104.position.z, _x.target104.orientation.x, _x.target104.orientation.y, _x.target104.orientation.z, _x.target104.orientation.w, _x.target105.position.x, _x.target105.position.y, _x.target105.position.z, _x.target105.orientation.x, _x.target105.orientation.y, _x.target105.orientation.z, _x.target105.orientation.w, _x.target106.position.x, _x.target106.position.y, _x.target106.position.z, _x.target106.orientation.x, _x.target106.orientation.y, _x.target106.orientation.z, _x.target106.orientation.w, _x.target107.position.x, _x.target107.position.y, _x.target107.position.z, _x.target107.orientation.x, _x.target107.orientation.y, _x.target107.orientation.z, _x.target107.orientation.w, _x.target108.position.x, _x.target108.position.y, _x.target108.position.z, _x.target108.orientation.x, _x.target108.orientation.y, _x.target108.orientation.z, _x.target108.orientation.w, _x.target109.position.x, _x.target109.position.y, _x.target109.position.z, _x.target109.orientation.x, _x.target109.orientation.y, _x.target109.orientation.z, _x.target109.orientation.w, _x.target110.position.x, _x.target110.position.y, _x.target110.position.z, _x.target110.orientation.x, _x.target110.orientation.y, _x.target110.orientation.z, _x.target110.orientation.w, _x.target111.position.x, _x.target111.position.y, _x.target111.position.z, _x.target111.orientation.x, _x.target111.orientation.y, _x.target111.orientation.z, _x.target111.orientation.w, _x.target112.position.x, _x.target112.position.y, _x.target112.position.z, _x.target112.orientation.x, _x.target112.orientation.y, _x.target112.orientation.z, _x.target112.orientation.w, _x.target113.position.x, _x.target113.position.y, _x.target113.position.z, _x.target113.orientation.x, _x.target113.orientation.y, _x.target113.orientation.z, _x.target113.orientation.w, _x.target114.position.x, _x.target114.position.y, _x.target114.position.z, _x.target114.orientation.x, _x.target114.orientation.y, _x.target114.orientation.z, _x.target114.orientation.w, _x.target115.position.x, _x.target115.position.y, _x.target115.position.z, _x.target115.orientation.x, _x.target115.orientation.y, _x.target115.orientation.z, _x.target115.orientation.w, _x.target116.position.x, _x.target116.position.y,) = _get_struct_255d().unpack(str[start:end])
      _x = self
      start = end
      end += 1160
      (_x.target116.position.z, _x.target116.orientation.x, _x.target116.orientation.y, _x.target116.orientation.z, _x.target116.orientation.w, _x.target117.position.x, _x.target117.position.y, _x.target117.position.z, _x.target117.orientation.x, _x.target117.orientation.y, _x.target117.orientation.z, _x.target117.orientation.w, _x.target118.position.x, _x.target118.position.y, _x.target118.position.z, _x.target118.orientation.x, _x.target118.orientation.y, _x.target118.orientation.z, _x.target118.orientation.w, _x.target119.position.x, _x.target119.position.y, _x.target119.position.z, _x.target119.orientation.x, _x.target119.orientation.y, _x.target119.orientation.z, _x.target119.orientation.w, _x.target120.position.x, _x.target120.position.y, _x.target120.position.z, _x.target120.orientation.x, _x.target120.orientation.y, _x.target120.orientation.z, _x.target120.orientation.w, _x.target121.position.x, _x.target121.position.y, _x.target121.position.z, _x.target121.orientation.x, _x.target121.orientation.y, _x.target121.orientation.z, _x.target121.orientation.w, _x.target122.position.x, _x.target122.position.y, _x.target122.position.z, _x.target122.orientation.x, _x.target122.orientation.y, _x.target122.orientation.z, _x.target122.orientation.w, _x.target123.position.x, _x.target123.position.y, _x.target123.position.z, _x.target123.orientation.x, _x.target123.orientation.y, _x.target123.orientation.z, _x.target123.orientation.w, _x.target124.position.x, _x.target124.position.y, _x.target124.position.z, _x.target124.orientation.x, _x.target124.orientation.y, _x.target124.orientation.z, _x.target124.orientation.w, _x.target125.position.x, _x.target125.position.y, _x.target125.position.z, _x.target125.orientation.x, _x.target125.orientation.y, _x.target125.orientation.z, _x.target125.orientation.w, _x.target126.position.x, _x.target126.position.y, _x.target126.position.z, _x.target126.orientation.x, _x.target126.orientation.y, _x.target126.orientation.z, _x.target126.orientation.w, _x.target127.position.x, _x.target127.position.y, _x.target127.position.z, _x.target127.orientation.x, _x.target127.orientation.y, _x.target127.orientation.z, _x.target127.orientation.w, _x.target128.position.x, _x.target128.position.y, _x.target128.position.z, _x.target128.orientation.x, _x.target128.orientation.y, _x.target128.orientation.z, _x.target128.orientation.w, _x.target129.position.x, _x.target129.position.y, _x.target129.position.z, _x.target129.orientation.x, _x.target129.orientation.y, _x.target129.orientation.z, _x.target129.orientation.w, _x.target130.position.x, _x.target130.position.y, _x.target130.position.z, _x.target130.orientation.x, _x.target130.orientation.y, _x.target130.orientation.z, _x.target130.orientation.w, _x.target131.position.x, _x.target131.position.y, _x.target131.position.z, _x.target131.orientation.x, _x.target131.orientation.y, _x.target131.orientation.z, _x.target131.orientation.w, _x.target132.position.x, _x.target132.position.y, _x.target132.position.z, _x.target132.orientation.x, _x.target132.orientation.y, _x.target132.orientation.z, _x.target132.orientation.w, _x.target133.position.x, _x.target133.position.y, _x.target133.position.z, _x.target133.orientation.x, _x.target133.orientation.y, _x.target133.orientation.z, _x.target133.orientation.w, _x.target134.position.x, _x.target134.position.y, _x.target134.position.z, _x.target134.orientation.x, _x.target134.orientation.y, _x.target134.orientation.z, _x.target134.orientation.w, _x.target135.position.x, _x.target135.position.y, _x.target135.position.z, _x.target135.orientation.x, _x.target135.orientation.y, _x.target135.orientation.z, _x.target135.orientation.w, _x.target136.position.x, _x.target136.position.y, _x.target136.position.z, _x.target136.orientation.x, _x.target136.orientation.y, _x.target136.orientation.z, _x.target136.orientation.w,) = _get_struct_145d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.joints_input_01.joints_input_01.tostring())
      buff.write(self.joints_input_01.joints_input_02.tostring())
      buff.write(self.joints_input_01.joints_input_03.tostring())
      _x = self
      buff.write(_get_struct_42d().pack(_x.joints_input_01.bms.position.x, _x.joints_input_01.bms.position.y, _x.joints_input_01.bms.position.z, _x.joints_input_01.bms.orientation.x, _x.joints_input_01.bms.orientation.y, _x.joints_input_01.bms.orientation.z, _x.joints_input_01.bms.orientation.w, _x.joints_input_01.place_pose.position.x, _x.joints_input_01.place_pose.position.y, _x.joints_input_01.place_pose.position.z, _x.joints_input_01.place_pose.orientation.x, _x.joints_input_01.place_pose.orientation.y, _x.joints_input_01.place_pose.orientation.z, _x.joints_input_01.place_pose.orientation.w, _x.joints_input_01.batterylock1.position.x, _x.joints_input_01.batterylock1.position.y, _x.joints_input_01.batterylock1.position.z, _x.joints_input_01.batterylock1.orientation.x, _x.joints_input_01.batterylock1.orientation.y, _x.joints_input_01.batterylock1.orientation.z, _x.joints_input_01.batterylock1.orientation.w, _x.joints_input_01.batterylock2.position.x, _x.joints_input_01.batterylock2.position.y, _x.joints_input_01.batterylock2.position.z, _x.joints_input_01.batterylock2.orientation.x, _x.joints_input_01.batterylock2.orientation.y, _x.joints_input_01.batterylock2.orientation.z, _x.joints_input_01.batterylock2.orientation.w, _x.joints_input_01.batterylock3.position.x, _x.joints_input_01.batterylock3.position.y, _x.joints_input_01.batterylock3.position.z, _x.joints_input_01.batterylock3.orientation.x, _x.joints_input_01.batterylock3.orientation.y, _x.joints_input_01.batterylock3.orientation.z, _x.joints_input_01.batterylock3.orientation.w, _x.joints_input_01.batterylock4.position.x, _x.joints_input_01.batterylock4.position.y, _x.joints_input_01.batterylock4.position.z, _x.joints_input_01.batterylock4.orientation.x, _x.joints_input_01.batterylock4.orientation.y, _x.joints_input_01.batterylock4.orientation.z, _x.joints_input_01.batterylock4.orientation.w))
      buff.write(self.joints_input_02.joints_input_01.tostring())
      buff.write(self.joints_input_02.joints_input_02.tostring())
      buff.write(self.joints_input_02.joints_input_03.tostring())
      _x = self
      buff.write(_get_struct_42d().pack(_x.joints_input_02.bms.position.x, _x.joints_input_02.bms.position.y, _x.joints_input_02.bms.position.z, _x.joints_input_02.bms.orientation.x, _x.joints_input_02.bms.orientation.y, _x.joints_input_02.bms.orientation.z, _x.joints_input_02.bms.orientation.w, _x.joints_input_02.place_pose.position.x, _x.joints_input_02.place_pose.position.y, _x.joints_input_02.place_pose.position.z, _x.joints_input_02.place_pose.orientation.x, _x.joints_input_02.place_pose.orientation.y, _x.joints_input_02.place_pose.orientation.z, _x.joints_input_02.place_pose.orientation.w, _x.joints_input_02.batterylock1.position.x, _x.joints_input_02.batterylock1.position.y, _x.joints_input_02.batterylock1.position.z, _x.joints_input_02.batterylock1.orientation.x, _x.joints_input_02.batterylock1.orientation.y, _x.joints_input_02.batterylock1.orientation.z, _x.joints_input_02.batterylock1.orientation.w, _x.joints_input_02.batterylock2.position.x, _x.joints_input_02.batterylock2.position.y, _x.joints_input_02.batterylock2.position.z, _x.joints_input_02.batterylock2.orientation.x, _x.joints_input_02.batterylock2.orientation.y, _x.joints_input_02.batterylock2.orientation.z, _x.joints_input_02.batterylock2.orientation.w, _x.joints_input_02.batterylock3.position.x, _x.joints_input_02.batterylock3.position.y, _x.joints_input_02.batterylock3.position.z, _x.joints_input_02.batterylock3.orientation.x, _x.joints_input_02.batterylock3.orientation.y, _x.joints_input_02.batterylock3.orientation.z, _x.joints_input_02.batterylock3.orientation.w, _x.joints_input_02.batterylock4.position.x, _x.joints_input_02.batterylock4.position.y, _x.joints_input_02.batterylock4.position.z, _x.joints_input_02.batterylock4.orientation.x, _x.joints_input_02.batterylock4.orientation.y, _x.joints_input_02.batterylock4.orientation.z, _x.joints_input_02.batterylock4.orientation.w))
      buff.write(self.joints_input_03.joints_input_01.tostring())
      buff.write(self.joints_input_03.joints_input_02.tostring())
      buff.write(self.joints_input_03.joints_input_03.tostring())
      _x = self
      buff.write(_get_struct_255d().pack(_x.joints_input_03.bms.position.x, _x.joints_input_03.bms.position.y, _x.joints_input_03.bms.position.z, _x.joints_input_03.bms.orientation.x, _x.joints_input_03.bms.orientation.y, _x.joints_input_03.bms.orientation.z, _x.joints_input_03.bms.orientation.w, _x.joints_input_03.place_pose.position.x, _x.joints_input_03.place_pose.position.y, _x.joints_input_03.place_pose.position.z, _x.joints_input_03.place_pose.orientation.x, _x.joints_input_03.place_pose.orientation.y, _x.joints_input_03.place_pose.orientation.z, _x.joints_input_03.place_pose.orientation.w, _x.joints_input_03.batterylock1.position.x, _x.joints_input_03.batterylock1.position.y, _x.joints_input_03.batterylock1.position.z, _x.joints_input_03.batterylock1.orientation.x, _x.joints_input_03.batterylock1.orientation.y, _x.joints_input_03.batterylock1.orientation.z, _x.joints_input_03.batterylock1.orientation.w, _x.joints_input_03.batterylock2.position.x, _x.joints_input_03.batterylock2.position.y, _x.joints_input_03.batterylock2.position.z, _x.joints_input_03.batterylock2.orientation.x, _x.joints_input_03.batterylock2.orientation.y, _x.joints_input_03.batterylock2.orientation.z, _x.joints_input_03.batterylock2.orientation.w, _x.joints_input_03.batterylock3.position.x, _x.joints_input_03.batterylock3.position.y, _x.joints_input_03.batterylock3.position.z, _x.joints_input_03.batterylock3.orientation.x, _x.joints_input_03.batterylock3.orientation.y, _x.joints_input_03.batterylock3.orientation.z, _x.joints_input_03.batterylock3.orientation.w, _x.joints_input_03.batterylock4.position.x, _x.joints_input_03.batterylock4.position.y, _x.joints_input_03.batterylock4.position.z, _x.joints_input_03.batterylock4.orientation.x, _x.joints_input_03.batterylock4.orientation.y, _x.joints_input_03.batterylock4.orientation.z, _x.joints_input_03.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w, _x.target09.position.x, _x.target09.position.y, _x.target09.position.z, _x.target09.orientation.x, _x.target09.orientation.y, _x.target09.orientation.z, _x.target09.orientation.w, _x.target10.position.x, _x.target10.position.y, _x.target10.position.z, _x.target10.orientation.x, _x.target10.orientation.y, _x.target10.orientation.z, _x.target10.orientation.w, _x.target11.position.x, _x.target11.position.y, _x.target11.position.z, _x.target11.orientation.x, _x.target11.orientation.y, _x.target11.orientation.z, _x.target11.orientation.w, _x.target12.position.x, _x.target12.position.y, _x.target12.position.z, _x.target12.orientation.x, _x.target12.orientation.y, _x.target12.orientation.z, _x.target12.orientation.w, _x.target13.position.x, _x.target13.position.y, _x.target13.position.z, _x.target13.orientation.x, _x.target13.orientation.y, _x.target13.orientation.z, _x.target13.orientation.w, _x.target14.position.x, _x.target14.position.y, _x.target14.position.z, _x.target14.orientation.x, _x.target14.orientation.y, _x.target14.orientation.z, _x.target14.orientation.w, _x.target15.position.x, _x.target15.position.y, _x.target15.position.z, _x.target15.orientation.x, _x.target15.orientation.y, _x.target15.orientation.z, _x.target15.orientation.w, _x.target16.position.x, _x.target16.position.y, _x.target16.position.z, _x.target16.orientation.x, _x.target16.orientation.y, _x.target16.orientation.z, _x.target16.orientation.w, _x.target17.position.x, _x.target17.position.y, _x.target17.position.z, _x.target17.orientation.x, _x.target17.orientation.y, _x.target17.orientation.z, _x.target17.orientation.w, _x.target18.position.x, _x.target18.position.y, _x.target18.position.z, _x.target18.orientation.x, _x.target18.orientation.y, _x.target18.orientation.z, _x.target18.orientation.w, _x.target19.position.x, _x.target19.position.y, _x.target19.position.z, _x.target19.orientation.x, _x.target19.orientation.y, _x.target19.orientation.z, _x.target19.orientation.w, _x.target20.position.x, _x.target20.position.y, _x.target20.position.z, _x.target20.orientation.x, _x.target20.orientation.y, _x.target20.orientation.z, _x.target20.orientation.w, _x.target21.position.x, _x.target21.position.y, _x.target21.position.z, _x.target21.orientation.x, _x.target21.orientation.y, _x.target21.orientation.z, _x.target21.orientation.w, _x.target22.position.x, _x.target22.position.y, _x.target22.position.z, _x.target22.orientation.x, _x.target22.orientation.y, _x.target22.orientation.z, _x.target22.orientation.w, _x.target23.position.x, _x.target23.position.y, _x.target23.position.z, _x.target23.orientation.x, _x.target23.orientation.y, _x.target23.orientation.z, _x.target23.orientation.w, _x.target24.position.x, _x.target24.position.y, _x.target24.position.z, _x.target24.orientation.x, _x.target24.orientation.y, _x.target24.orientation.z, _x.target24.orientation.w, _x.target25.position.x, _x.target25.position.y, _x.target25.position.z, _x.target25.orientation.x, _x.target25.orientation.y, _x.target25.orientation.z, _x.target25.orientation.w, _x.target26.position.x, _x.target26.position.y, _x.target26.position.z, _x.target26.orientation.x, _x.target26.orientation.y, _x.target26.orientation.z, _x.target26.orientation.w, _x.target27.position.x, _x.target27.position.y, _x.target27.position.z, _x.target27.orientation.x, _x.target27.orientation.y, _x.target27.orientation.z, _x.target27.orientation.w, _x.target28.position.x, _x.target28.position.y, _x.target28.position.z, _x.target28.orientation.x, _x.target28.orientation.y, _x.target28.orientation.z, _x.target28.orientation.w, _x.target41.position.x, _x.target41.position.y, _x.target41.position.z, _x.target41.orientation.x, _x.target41.orientation.y, _x.target41.orientation.z, _x.target41.orientation.w, _x.target42.position.x, _x.target42.position.y, _x.target42.position.z, _x.target42.orientation.x, _x.target42.orientation.y, _x.target42.orientation.z, _x.target42.orientation.w, _x.target43.position.x, _x.target43.position.y, _x.target43.position.z))
      _x = self
      buff.write(_get_struct_255d().pack(_x.target43.orientation.x, _x.target43.orientation.y, _x.target43.orientation.z, _x.target43.orientation.w, _x.target44.position.x, _x.target44.position.y, _x.target44.position.z, _x.target44.orientation.x, _x.target44.orientation.y, _x.target44.orientation.z, _x.target44.orientation.w, _x.target45.position.x, _x.target45.position.y, _x.target45.position.z, _x.target45.orientation.x, _x.target45.orientation.y, _x.target45.orientation.z, _x.target45.orientation.w, _x.target46.position.x, _x.target46.position.y, _x.target46.position.z, _x.target46.orientation.x, _x.target46.orientation.y, _x.target46.orientation.z, _x.target46.orientation.w, _x.target47.position.x, _x.target47.position.y, _x.target47.position.z, _x.target47.orientation.x, _x.target47.orientation.y, _x.target47.orientation.z, _x.target47.orientation.w, _x.target48.position.x, _x.target48.position.y, _x.target48.position.z, _x.target48.orientation.x, _x.target48.orientation.y, _x.target48.orientation.z, _x.target48.orientation.w, _x.target49.position.x, _x.target49.position.y, _x.target49.position.z, _x.target49.orientation.x, _x.target49.orientation.y, _x.target49.orientation.z, _x.target49.orientation.w, _x.target50.position.x, _x.target50.position.y, _x.target50.position.z, _x.target50.orientation.x, _x.target50.orientation.y, _x.target50.orientation.z, _x.target50.orientation.w, _x.target51.position.x, _x.target51.position.y, _x.target51.position.z, _x.target51.orientation.x, _x.target51.orientation.y, _x.target51.orientation.z, _x.target51.orientation.w, _x.target52.position.x, _x.target52.position.y, _x.target52.position.z, _x.target52.orientation.x, _x.target52.orientation.y, _x.target52.orientation.z, _x.target52.orientation.w, _x.target53.position.x, _x.target53.position.y, _x.target53.position.z, _x.target53.orientation.x, _x.target53.orientation.y, _x.target53.orientation.z, _x.target53.orientation.w, _x.target54.position.x, _x.target54.position.y, _x.target54.position.z, _x.target54.orientation.x, _x.target54.orientation.y, _x.target54.orientation.z, _x.target54.orientation.w, _x.target55.position.x, _x.target55.position.y, _x.target55.position.z, _x.target55.orientation.x, _x.target55.orientation.y, _x.target55.orientation.z, _x.target55.orientation.w, _x.target56.position.x, _x.target56.position.y, _x.target56.position.z, _x.target56.orientation.x, _x.target56.orientation.y, _x.target56.orientation.z, _x.target56.orientation.w, _x.target57.position.x, _x.target57.position.y, _x.target57.position.z, _x.target57.orientation.x, _x.target57.orientation.y, _x.target57.orientation.z, _x.target57.orientation.w, _x.target58.position.x, _x.target58.position.y, _x.target58.position.z, _x.target58.orientation.x, _x.target58.orientation.y, _x.target58.orientation.z, _x.target58.orientation.w, _x.target59.position.x, _x.target59.position.y, _x.target59.position.z, _x.target59.orientation.x, _x.target59.orientation.y, _x.target59.orientation.z, _x.target59.orientation.w, _x.target60.position.x, _x.target60.position.y, _x.target60.position.z, _x.target60.orientation.x, _x.target60.orientation.y, _x.target60.orientation.z, _x.target60.orientation.w, _x.target61.position.x, _x.target61.position.y, _x.target61.position.z, _x.target61.orientation.x, _x.target61.orientation.y, _x.target61.orientation.z, _x.target61.orientation.w, _x.target62.position.x, _x.target62.position.y, _x.target62.position.z, _x.target62.orientation.x, _x.target62.orientation.y, _x.target62.orientation.z, _x.target62.orientation.w, _x.target63.position.x, _x.target63.position.y, _x.target63.position.z, _x.target63.orientation.x, _x.target63.orientation.y, _x.target63.orientation.z, _x.target63.orientation.w, _x.target64.position.x, _x.target64.position.y, _x.target64.position.z, _x.target64.orientation.x, _x.target64.orientation.y, _x.target64.orientation.z, _x.target64.orientation.w, _x.target65.position.x, _x.target65.position.y, _x.target65.position.z, _x.target65.orientation.x, _x.target65.orientation.y, _x.target65.orientation.z, _x.target65.orientation.w, _x.target66.position.x, _x.target66.position.y, _x.target66.position.z, _x.target66.orientation.x, _x.target66.orientation.y, _x.target66.orientation.z, _x.target66.orientation.w, _x.target67.position.x, _x.target67.position.y, _x.target67.position.z, _x.target67.orientation.x, _x.target67.orientation.y, _x.target67.orientation.z, _x.target67.orientation.w, _x.target68.position.x, _x.target68.position.y, _x.target68.position.z, _x.target68.orientation.x, _x.target68.orientation.y, _x.target68.orientation.z, _x.target68.orientation.w, _x.target69.position.x, _x.target69.position.y, _x.target69.position.z, _x.target69.orientation.x, _x.target69.orientation.y, _x.target69.orientation.z, _x.target69.orientation.w, _x.target70.position.x, _x.target70.position.y, _x.target70.position.z, _x.target70.orientation.x, _x.target70.orientation.y, _x.target70.orientation.z, _x.target70.orientation.w, _x.target71.position.x, _x.target71.position.y, _x.target71.position.z, _x.target71.orientation.x, _x.target71.orientation.y, _x.target71.orientation.z, _x.target71.orientation.w, _x.target72.position.x, _x.target72.position.y, _x.target72.position.z, _x.target72.orientation.x, _x.target72.orientation.y, _x.target72.orientation.z, _x.target72.orientation.w, _x.target73.position.x, _x.target73.position.y, _x.target73.position.z, _x.target73.orientation.x, _x.target73.orientation.y, _x.target73.orientation.z, _x.target73.orientation.w, _x.target74.position.x, _x.target74.position.y, _x.target74.position.z, _x.target74.orientation.x, _x.target74.orientation.y, _x.target74.orientation.z, _x.target74.orientation.w, _x.target75.position.x, _x.target75.position.y, _x.target75.position.z, _x.target75.orientation.x, _x.target75.orientation.y, _x.target75.orientation.z, _x.target75.orientation.w, _x.target76.position.x, _x.target76.position.y, _x.target76.position.z, _x.target76.orientation.x, _x.target76.orientation.y, _x.target76.orientation.z, _x.target76.orientation.w, _x.target77.position.x, _x.target77.position.y, _x.target77.position.z, _x.target77.orientation.x, _x.target77.orientation.y, _x.target77.orientation.z, _x.target77.orientation.w, _x.target78.position.x, _x.target78.position.y, _x.target78.position.z, _x.target78.orientation.x, _x.target78.orientation.y, _x.target78.orientation.z, _x.target78.orientation.w, _x.target79.position.x, _x.target79.position.y, _x.target79.position.z, _x.target79.orientation.x, _x.target79.orientation.y, _x.target79.orientation.z))
      _x = self
      buff.write(_get_struct_255d().pack(_x.target79.orientation.w, _x.target80.position.x, _x.target80.position.y, _x.target80.position.z, _x.target80.orientation.x, _x.target80.orientation.y, _x.target80.orientation.z, _x.target80.orientation.w, _x.target81.position.x, _x.target81.position.y, _x.target81.position.z, _x.target81.orientation.x, _x.target81.orientation.y, _x.target81.orientation.z, _x.target81.orientation.w, _x.target82.position.x, _x.target82.position.y, _x.target82.position.z, _x.target82.orientation.x, _x.target82.orientation.y, _x.target82.orientation.z, _x.target82.orientation.w, _x.target83.position.x, _x.target83.position.y, _x.target83.position.z, _x.target83.orientation.x, _x.target83.orientation.y, _x.target83.orientation.z, _x.target83.orientation.w, _x.target84.position.x, _x.target84.position.y, _x.target84.position.z, _x.target84.orientation.x, _x.target84.orientation.y, _x.target84.orientation.z, _x.target84.orientation.w, _x.target85.position.x, _x.target85.position.y, _x.target85.position.z, _x.target85.orientation.x, _x.target85.orientation.y, _x.target85.orientation.z, _x.target85.orientation.w, _x.target86.position.x, _x.target86.position.y, _x.target86.position.z, _x.target86.orientation.x, _x.target86.orientation.y, _x.target86.orientation.z, _x.target86.orientation.w, _x.target87.position.x, _x.target87.position.y, _x.target87.position.z, _x.target87.orientation.x, _x.target87.orientation.y, _x.target87.orientation.z, _x.target87.orientation.w, _x.target88.position.x, _x.target88.position.y, _x.target88.position.z, _x.target88.orientation.x, _x.target88.orientation.y, _x.target88.orientation.z, _x.target88.orientation.w, _x.target89.position.x, _x.target89.position.y, _x.target89.position.z, _x.target89.orientation.x, _x.target89.orientation.y, _x.target89.orientation.z, _x.target89.orientation.w, _x.target90.position.x, _x.target90.position.y, _x.target90.position.z, _x.target90.orientation.x, _x.target90.orientation.y, _x.target90.orientation.z, _x.target90.orientation.w, _x.target91.position.x, _x.target91.position.y, _x.target91.position.z, _x.target91.orientation.x, _x.target91.orientation.y, _x.target91.orientation.z, _x.target91.orientation.w, _x.target92.position.x, _x.target92.position.y, _x.target92.position.z, _x.target92.orientation.x, _x.target92.orientation.y, _x.target92.orientation.z, _x.target92.orientation.w, _x.target93.position.x, _x.target93.position.y, _x.target93.position.z, _x.target93.orientation.x, _x.target93.orientation.y, _x.target93.orientation.z, _x.target93.orientation.w, _x.target94.position.x, _x.target94.position.y, _x.target94.position.z, _x.target94.orientation.x, _x.target94.orientation.y, _x.target94.orientation.z, _x.target94.orientation.w, _x.target95.position.x, _x.target95.position.y, _x.target95.position.z, _x.target95.orientation.x, _x.target95.orientation.y, _x.target95.orientation.z, _x.target95.orientation.w, _x.target96.position.x, _x.target96.position.y, _x.target96.position.z, _x.target96.orientation.x, _x.target96.orientation.y, _x.target96.orientation.z, _x.target96.orientation.w, _x.target97.position.x, _x.target97.position.y, _x.target97.position.z, _x.target97.orientation.x, _x.target97.orientation.y, _x.target97.orientation.z, _x.target97.orientation.w, _x.target98.position.x, _x.target98.position.y, _x.target98.position.z, _x.target98.orientation.x, _x.target98.orientation.y, _x.target98.orientation.z, _x.target98.orientation.w, _x.target99.position.x, _x.target99.position.y, _x.target99.position.z, _x.target99.orientation.x, _x.target99.orientation.y, _x.target99.orientation.z, _x.target99.orientation.w, _x.target100.position.x, _x.target100.position.y, _x.target100.position.z, _x.target100.orientation.x, _x.target100.orientation.y, _x.target100.orientation.z, _x.target100.orientation.w, _x.target101.position.x, _x.target101.position.y, _x.target101.position.z, _x.target101.orientation.x, _x.target101.orientation.y, _x.target101.orientation.z, _x.target101.orientation.w, _x.target102.position.x, _x.target102.position.y, _x.target102.position.z, _x.target102.orientation.x, _x.target102.orientation.y, _x.target102.orientation.z, _x.target102.orientation.w, _x.target103.position.x, _x.target103.position.y, _x.target103.position.z, _x.target103.orientation.x, _x.target103.orientation.y, _x.target103.orientation.z, _x.target103.orientation.w, _x.target104.position.x, _x.target104.position.y, _x.target104.position.z, _x.target104.orientation.x, _x.target104.orientation.y, _x.target104.orientation.z, _x.target104.orientation.w, _x.target105.position.x, _x.target105.position.y, _x.target105.position.z, _x.target105.orientation.x, _x.target105.orientation.y, _x.target105.orientation.z, _x.target105.orientation.w, _x.target106.position.x, _x.target106.position.y, _x.target106.position.z, _x.target106.orientation.x, _x.target106.orientation.y, _x.target106.orientation.z, _x.target106.orientation.w, _x.target107.position.x, _x.target107.position.y, _x.target107.position.z, _x.target107.orientation.x, _x.target107.orientation.y, _x.target107.orientation.z, _x.target107.orientation.w, _x.target108.position.x, _x.target108.position.y, _x.target108.position.z, _x.target108.orientation.x, _x.target108.orientation.y, _x.target108.orientation.z, _x.target108.orientation.w, _x.target109.position.x, _x.target109.position.y, _x.target109.position.z, _x.target109.orientation.x, _x.target109.orientation.y, _x.target109.orientation.z, _x.target109.orientation.w, _x.target110.position.x, _x.target110.position.y, _x.target110.position.z, _x.target110.orientation.x, _x.target110.orientation.y, _x.target110.orientation.z, _x.target110.orientation.w, _x.target111.position.x, _x.target111.position.y, _x.target111.position.z, _x.target111.orientation.x, _x.target111.orientation.y, _x.target111.orientation.z, _x.target111.orientation.w, _x.target112.position.x, _x.target112.position.y, _x.target112.position.z, _x.target112.orientation.x, _x.target112.orientation.y, _x.target112.orientation.z, _x.target112.orientation.w, _x.target113.position.x, _x.target113.position.y, _x.target113.position.z, _x.target113.orientation.x, _x.target113.orientation.y, _x.target113.orientation.z, _x.target113.orientation.w, _x.target114.position.x, _x.target114.position.y, _x.target114.position.z, _x.target114.orientation.x, _x.target114.orientation.y, _x.target114.orientation.z, _x.target114.orientation.w, _x.target115.position.x, _x.target115.position.y, _x.target115.position.z, _x.target115.orientation.x, _x.target115.orientation.y, _x.target115.orientation.z, _x.target115.orientation.w, _x.target116.position.x, _x.target116.position.y))
      _x = self
      buff.write(_get_struct_145d().pack(_x.target116.position.z, _x.target116.orientation.x, _x.target116.orientation.y, _x.target116.orientation.z, _x.target116.orientation.w, _x.target117.position.x, _x.target117.position.y, _x.target117.position.z, _x.target117.orientation.x, _x.target117.orientation.y, _x.target117.orientation.z, _x.target117.orientation.w, _x.target118.position.x, _x.target118.position.y, _x.target118.position.z, _x.target118.orientation.x, _x.target118.orientation.y, _x.target118.orientation.z, _x.target118.orientation.w, _x.target119.position.x, _x.target119.position.y, _x.target119.position.z, _x.target119.orientation.x, _x.target119.orientation.y, _x.target119.orientation.z, _x.target119.orientation.w, _x.target120.position.x, _x.target120.position.y, _x.target120.position.z, _x.target120.orientation.x, _x.target120.orientation.y, _x.target120.orientation.z, _x.target120.orientation.w, _x.target121.position.x, _x.target121.position.y, _x.target121.position.z, _x.target121.orientation.x, _x.target121.orientation.y, _x.target121.orientation.z, _x.target121.orientation.w, _x.target122.position.x, _x.target122.position.y, _x.target122.position.z, _x.target122.orientation.x, _x.target122.orientation.y, _x.target122.orientation.z, _x.target122.orientation.w, _x.target123.position.x, _x.target123.position.y, _x.target123.position.z, _x.target123.orientation.x, _x.target123.orientation.y, _x.target123.orientation.z, _x.target123.orientation.w, _x.target124.position.x, _x.target124.position.y, _x.target124.position.z, _x.target124.orientation.x, _x.target124.orientation.y, _x.target124.orientation.z, _x.target124.orientation.w, _x.target125.position.x, _x.target125.position.y, _x.target125.position.z, _x.target125.orientation.x, _x.target125.orientation.y, _x.target125.orientation.z, _x.target125.orientation.w, _x.target126.position.x, _x.target126.position.y, _x.target126.position.z, _x.target126.orientation.x, _x.target126.orientation.y, _x.target126.orientation.z, _x.target126.orientation.w, _x.target127.position.x, _x.target127.position.y, _x.target127.position.z, _x.target127.orientation.x, _x.target127.orientation.y, _x.target127.orientation.z, _x.target127.orientation.w, _x.target128.position.x, _x.target128.position.y, _x.target128.position.z, _x.target128.orientation.x, _x.target128.orientation.y, _x.target128.orientation.z, _x.target128.orientation.w, _x.target129.position.x, _x.target129.position.y, _x.target129.position.z, _x.target129.orientation.x, _x.target129.orientation.y, _x.target129.orientation.z, _x.target129.orientation.w, _x.target130.position.x, _x.target130.position.y, _x.target130.position.z, _x.target130.orientation.x, _x.target130.orientation.y, _x.target130.orientation.z, _x.target130.orientation.w, _x.target131.position.x, _x.target131.position.y, _x.target131.position.z, _x.target131.orientation.x, _x.target131.orientation.y, _x.target131.orientation.z, _x.target131.orientation.w, _x.target132.position.x, _x.target132.position.y, _x.target132.position.z, _x.target132.orientation.x, _x.target132.orientation.y, _x.target132.orientation.z, _x.target132.orientation.w, _x.target133.position.x, _x.target133.position.y, _x.target133.position.z, _x.target133.orientation.x, _x.target133.orientation.y, _x.target133.orientation.z, _x.target133.orientation.w, _x.target134.position.x, _x.target134.position.y, _x.target134.position.z, _x.target134.orientation.x, _x.target134.orientation.y, _x.target134.orientation.z, _x.target134.orientation.w, _x.target135.position.x, _x.target135.position.y, _x.target135.position.z, _x.target135.orientation.x, _x.target135.orientation.y, _x.target135.orientation.z, _x.target135.orientation.w, _x.target136.position.x, _x.target136.position.y, _x.target136.position.z, _x.target136.orientation.x, _x.target136.orientation.y, _x.target136.orientation.z, _x.target136.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joints_input_01 is None:
        self.joints_input_01 = robots_start.msg.MoveitJoints()
      if self.joints_input_02 is None:
        self.joints_input_02 = robots_start.msg.MoveitJoints()
      if self.joints_input_03 is None:
        self.joints_input_03 = robots_start.msg.MoveitJoints()
      if self.target01 is None:
        self.target01 = geometry_msgs.msg.Pose()
      if self.target02 is None:
        self.target02 = geometry_msgs.msg.Pose()
      if self.target03 is None:
        self.target03 = geometry_msgs.msg.Pose()
      if self.target04 is None:
        self.target04 = geometry_msgs.msg.Pose()
      if self.target05 is None:
        self.target05 = geometry_msgs.msg.Pose()
      if self.target06 is None:
        self.target06 = geometry_msgs.msg.Pose()
      if self.target07 is None:
        self.target07 = geometry_msgs.msg.Pose()
      if self.target08 is None:
        self.target08 = geometry_msgs.msg.Pose()
      if self.target09 is None:
        self.target09 = geometry_msgs.msg.Pose()
      if self.target10 is None:
        self.target10 = geometry_msgs.msg.Pose()
      if self.target11 is None:
        self.target11 = geometry_msgs.msg.Pose()
      if self.target12 is None:
        self.target12 = geometry_msgs.msg.Pose()
      if self.target13 is None:
        self.target13 = geometry_msgs.msg.Pose()
      if self.target14 is None:
        self.target14 = geometry_msgs.msg.Pose()
      if self.target15 is None:
        self.target15 = geometry_msgs.msg.Pose()
      if self.target16 is None:
        self.target16 = geometry_msgs.msg.Pose()
      if self.target17 is None:
        self.target17 = geometry_msgs.msg.Pose()
      if self.target18 is None:
        self.target18 = geometry_msgs.msg.Pose()
      if self.target19 is None:
        self.target19 = geometry_msgs.msg.Pose()
      if self.target20 is None:
        self.target20 = geometry_msgs.msg.Pose()
      if self.target21 is None:
        self.target21 = geometry_msgs.msg.Pose()
      if self.target22 is None:
        self.target22 = geometry_msgs.msg.Pose()
      if self.target23 is None:
        self.target23 = geometry_msgs.msg.Pose()
      if self.target24 is None:
        self.target24 = geometry_msgs.msg.Pose()
      if self.target25 is None:
        self.target25 = geometry_msgs.msg.Pose()
      if self.target26 is None:
        self.target26 = geometry_msgs.msg.Pose()
      if self.target27 is None:
        self.target27 = geometry_msgs.msg.Pose()
      if self.target28 is None:
        self.target28 = geometry_msgs.msg.Pose()
      if self.target41 is None:
        self.target41 = geometry_msgs.msg.Pose()
      if self.target42 is None:
        self.target42 = geometry_msgs.msg.Pose()
      if self.target43 is None:
        self.target43 = geometry_msgs.msg.Pose()
      if self.target44 is None:
        self.target44 = geometry_msgs.msg.Pose()
      if self.target45 is None:
        self.target45 = geometry_msgs.msg.Pose()
      if self.target46 is None:
        self.target46 = geometry_msgs.msg.Pose()
      if self.target47 is None:
        self.target47 = geometry_msgs.msg.Pose()
      if self.target48 is None:
        self.target48 = geometry_msgs.msg.Pose()
      if self.target49 is None:
        self.target49 = geometry_msgs.msg.Pose()
      if self.target50 is None:
        self.target50 = geometry_msgs.msg.Pose()
      if self.target51 is None:
        self.target51 = geometry_msgs.msg.Pose()
      if self.target52 is None:
        self.target52 = geometry_msgs.msg.Pose()
      if self.target53 is None:
        self.target53 = geometry_msgs.msg.Pose()
      if self.target54 is None:
        self.target54 = geometry_msgs.msg.Pose()
      if self.target55 is None:
        self.target55 = geometry_msgs.msg.Pose()
      if self.target56 is None:
        self.target56 = geometry_msgs.msg.Pose()
      if self.target57 is None:
        self.target57 = geometry_msgs.msg.Pose()
      if self.target58 is None:
        self.target58 = geometry_msgs.msg.Pose()
      if self.target59 is None:
        self.target59 = geometry_msgs.msg.Pose()
      if self.target60 is None:
        self.target60 = geometry_msgs.msg.Pose()
      if self.target61 is None:
        self.target61 = geometry_msgs.msg.Pose()
      if self.target62 is None:
        self.target62 = geometry_msgs.msg.Pose()
      if self.target63 is None:
        self.target63 = geometry_msgs.msg.Pose()
      if self.target64 is None:
        self.target64 = geometry_msgs.msg.Pose()
      if self.target65 is None:
        self.target65 = geometry_msgs.msg.Pose()
      if self.target66 is None:
        self.target66 = geometry_msgs.msg.Pose()
      if self.target67 is None:
        self.target67 = geometry_msgs.msg.Pose()
      if self.target68 is None:
        self.target68 = geometry_msgs.msg.Pose()
      if self.target69 is None:
        self.target69 = geometry_msgs.msg.Pose()
      if self.target70 is None:
        self.target70 = geometry_msgs.msg.Pose()
      if self.target71 is None:
        self.target71 = geometry_msgs.msg.Pose()
      if self.target72 is None:
        self.target72 = geometry_msgs.msg.Pose()
      if self.target73 is None:
        self.target73 = geometry_msgs.msg.Pose()
      if self.target74 is None:
        self.target74 = geometry_msgs.msg.Pose()
      if self.target75 is None:
        self.target75 = geometry_msgs.msg.Pose()
      if self.target76 is None:
        self.target76 = geometry_msgs.msg.Pose()
      if self.target77 is None:
        self.target77 = geometry_msgs.msg.Pose()
      if self.target78 is None:
        self.target78 = geometry_msgs.msg.Pose()
      if self.target79 is None:
        self.target79 = geometry_msgs.msg.Pose()
      if self.target80 is None:
        self.target80 = geometry_msgs.msg.Pose()
      if self.target81 is None:
        self.target81 = geometry_msgs.msg.Pose()
      if self.target82 is None:
        self.target82 = geometry_msgs.msg.Pose()
      if self.target83 is None:
        self.target83 = geometry_msgs.msg.Pose()
      if self.target84 is None:
        self.target84 = geometry_msgs.msg.Pose()
      if self.target85 is None:
        self.target85 = geometry_msgs.msg.Pose()
      if self.target86 is None:
        self.target86 = geometry_msgs.msg.Pose()
      if self.target87 is None:
        self.target87 = geometry_msgs.msg.Pose()
      if self.target88 is None:
        self.target88 = geometry_msgs.msg.Pose()
      if self.target89 is None:
        self.target89 = geometry_msgs.msg.Pose()
      if self.target90 is None:
        self.target90 = geometry_msgs.msg.Pose()
      if self.target91 is None:
        self.target91 = geometry_msgs.msg.Pose()
      if self.target92 is None:
        self.target92 = geometry_msgs.msg.Pose()
      if self.target93 is None:
        self.target93 = geometry_msgs.msg.Pose()
      if self.target94 is None:
        self.target94 = geometry_msgs.msg.Pose()
      if self.target95 is None:
        self.target95 = geometry_msgs.msg.Pose()
      if self.target96 is None:
        self.target96 = geometry_msgs.msg.Pose()
      if self.target97 is None:
        self.target97 = geometry_msgs.msg.Pose()
      if self.target98 is None:
        self.target98 = geometry_msgs.msg.Pose()
      if self.target99 is None:
        self.target99 = geometry_msgs.msg.Pose()
      if self.target100 is None:
        self.target100 = geometry_msgs.msg.Pose()
      if self.target101 is None:
        self.target101 = geometry_msgs.msg.Pose()
      if self.target102 is None:
        self.target102 = geometry_msgs.msg.Pose()
      if self.target103 is None:
        self.target103 = geometry_msgs.msg.Pose()
      if self.target104 is None:
        self.target104 = geometry_msgs.msg.Pose()
      if self.target105 is None:
        self.target105 = geometry_msgs.msg.Pose()
      if self.target106 is None:
        self.target106 = geometry_msgs.msg.Pose()
      if self.target107 is None:
        self.target107 = geometry_msgs.msg.Pose()
      if self.target108 is None:
        self.target108 = geometry_msgs.msg.Pose()
      if self.target109 is None:
        self.target109 = geometry_msgs.msg.Pose()
      if self.target110 is None:
        self.target110 = geometry_msgs.msg.Pose()
      if self.target111 is None:
        self.target111 = geometry_msgs.msg.Pose()
      if self.target112 is None:
        self.target112 = geometry_msgs.msg.Pose()
      if self.target113 is None:
        self.target113 = geometry_msgs.msg.Pose()
      if self.target114 is None:
        self.target114 = geometry_msgs.msg.Pose()
      if self.target115 is None:
        self.target115 = geometry_msgs.msg.Pose()
      if self.target116 is None:
        self.target116 = geometry_msgs.msg.Pose()
      if self.target117 is None:
        self.target117 = geometry_msgs.msg.Pose()
      if self.target118 is None:
        self.target118 = geometry_msgs.msg.Pose()
      if self.target119 is None:
        self.target119 = geometry_msgs.msg.Pose()
      if self.target120 is None:
        self.target120 = geometry_msgs.msg.Pose()
      if self.target121 is None:
        self.target121 = geometry_msgs.msg.Pose()
      if self.target122 is None:
        self.target122 = geometry_msgs.msg.Pose()
      if self.target123 is None:
        self.target123 = geometry_msgs.msg.Pose()
      if self.target124 is None:
        self.target124 = geometry_msgs.msg.Pose()
      if self.target125 is None:
        self.target125 = geometry_msgs.msg.Pose()
      if self.target126 is None:
        self.target126 = geometry_msgs.msg.Pose()
      if self.target127 is None:
        self.target127 = geometry_msgs.msg.Pose()
      if self.target128 is None:
        self.target128 = geometry_msgs.msg.Pose()
      if self.target129 is None:
        self.target129 = geometry_msgs.msg.Pose()
      if self.target130 is None:
        self.target130 = geometry_msgs.msg.Pose()
      if self.target131 is None:
        self.target131 = geometry_msgs.msg.Pose()
      if self.target132 is None:
        self.target132 = geometry_msgs.msg.Pose()
      if self.target133 is None:
        self.target133 = geometry_msgs.msg.Pose()
      if self.target134 is None:
        self.target134 = geometry_msgs.msg.Pose()
      if self.target135 is None:
        self.target135 = geometry_msgs.msg.Pose()
      if self.target136 is None:
        self.target136 = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 48
      self.joints_input_01.joints_input_01 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_01.joints_input_02 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_01.joints_input_03 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      _x = self
      start = end
      end += 336
      (_x.joints_input_01.bms.position.x, _x.joints_input_01.bms.position.y, _x.joints_input_01.bms.position.z, _x.joints_input_01.bms.orientation.x, _x.joints_input_01.bms.orientation.y, _x.joints_input_01.bms.orientation.z, _x.joints_input_01.bms.orientation.w, _x.joints_input_01.place_pose.position.x, _x.joints_input_01.place_pose.position.y, _x.joints_input_01.place_pose.position.z, _x.joints_input_01.place_pose.orientation.x, _x.joints_input_01.place_pose.orientation.y, _x.joints_input_01.place_pose.orientation.z, _x.joints_input_01.place_pose.orientation.w, _x.joints_input_01.batterylock1.position.x, _x.joints_input_01.batterylock1.position.y, _x.joints_input_01.batterylock1.position.z, _x.joints_input_01.batterylock1.orientation.x, _x.joints_input_01.batterylock1.orientation.y, _x.joints_input_01.batterylock1.orientation.z, _x.joints_input_01.batterylock1.orientation.w, _x.joints_input_01.batterylock2.position.x, _x.joints_input_01.batterylock2.position.y, _x.joints_input_01.batterylock2.position.z, _x.joints_input_01.batterylock2.orientation.x, _x.joints_input_01.batterylock2.orientation.y, _x.joints_input_01.batterylock2.orientation.z, _x.joints_input_01.batterylock2.orientation.w, _x.joints_input_01.batterylock3.position.x, _x.joints_input_01.batterylock3.position.y, _x.joints_input_01.batterylock3.position.z, _x.joints_input_01.batterylock3.orientation.x, _x.joints_input_01.batterylock3.orientation.y, _x.joints_input_01.batterylock3.orientation.z, _x.joints_input_01.batterylock3.orientation.w, _x.joints_input_01.batterylock4.position.x, _x.joints_input_01.batterylock4.position.y, _x.joints_input_01.batterylock4.position.z, _x.joints_input_01.batterylock4.orientation.x, _x.joints_input_01.batterylock4.orientation.y, _x.joints_input_01.batterylock4.orientation.z, _x.joints_input_01.batterylock4.orientation.w,) = _get_struct_42d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_02.joints_input_01 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_02.joints_input_02 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_02.joints_input_03 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      _x = self
      start = end
      end += 336
      (_x.joints_input_02.bms.position.x, _x.joints_input_02.bms.position.y, _x.joints_input_02.bms.position.z, _x.joints_input_02.bms.orientation.x, _x.joints_input_02.bms.orientation.y, _x.joints_input_02.bms.orientation.z, _x.joints_input_02.bms.orientation.w, _x.joints_input_02.place_pose.position.x, _x.joints_input_02.place_pose.position.y, _x.joints_input_02.place_pose.position.z, _x.joints_input_02.place_pose.orientation.x, _x.joints_input_02.place_pose.orientation.y, _x.joints_input_02.place_pose.orientation.z, _x.joints_input_02.place_pose.orientation.w, _x.joints_input_02.batterylock1.position.x, _x.joints_input_02.batterylock1.position.y, _x.joints_input_02.batterylock1.position.z, _x.joints_input_02.batterylock1.orientation.x, _x.joints_input_02.batterylock1.orientation.y, _x.joints_input_02.batterylock1.orientation.z, _x.joints_input_02.batterylock1.orientation.w, _x.joints_input_02.batterylock2.position.x, _x.joints_input_02.batterylock2.position.y, _x.joints_input_02.batterylock2.position.z, _x.joints_input_02.batterylock2.orientation.x, _x.joints_input_02.batterylock2.orientation.y, _x.joints_input_02.batterylock2.orientation.z, _x.joints_input_02.batterylock2.orientation.w, _x.joints_input_02.batterylock3.position.x, _x.joints_input_02.batterylock3.position.y, _x.joints_input_02.batterylock3.position.z, _x.joints_input_02.batterylock3.orientation.x, _x.joints_input_02.batterylock3.orientation.y, _x.joints_input_02.batterylock3.orientation.z, _x.joints_input_02.batterylock3.orientation.w, _x.joints_input_02.batterylock4.position.x, _x.joints_input_02.batterylock4.position.y, _x.joints_input_02.batterylock4.position.z, _x.joints_input_02.batterylock4.orientation.x, _x.joints_input_02.batterylock4.orientation.y, _x.joints_input_02.batterylock4.orientation.z, _x.joints_input_02.batterylock4.orientation.w,) = _get_struct_42d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_03.joints_input_01 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_03.joints_input_02 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_03.joints_input_03 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      _x = self
      start = end
      end += 2040
      (_x.joints_input_03.bms.position.x, _x.joints_input_03.bms.position.y, _x.joints_input_03.bms.position.z, _x.joints_input_03.bms.orientation.x, _x.joints_input_03.bms.orientation.y, _x.joints_input_03.bms.orientation.z, _x.joints_input_03.bms.orientation.w, _x.joints_input_03.place_pose.position.x, _x.joints_input_03.place_pose.position.y, _x.joints_input_03.place_pose.position.z, _x.joints_input_03.place_pose.orientation.x, _x.joints_input_03.place_pose.orientation.y, _x.joints_input_03.place_pose.orientation.z, _x.joints_input_03.place_pose.orientation.w, _x.joints_input_03.batterylock1.position.x, _x.joints_input_03.batterylock1.position.y, _x.joints_input_03.batterylock1.position.z, _x.joints_input_03.batterylock1.orientation.x, _x.joints_input_03.batterylock1.orientation.y, _x.joints_input_03.batterylock1.orientation.z, _x.joints_input_03.batterylock1.orientation.w, _x.joints_input_03.batterylock2.position.x, _x.joints_input_03.batterylock2.position.y, _x.joints_input_03.batterylock2.position.z, _x.joints_input_03.batterylock2.orientation.x, _x.joints_input_03.batterylock2.orientation.y, _x.joints_input_03.batterylock2.orientation.z, _x.joints_input_03.batterylock2.orientation.w, _x.joints_input_03.batterylock3.position.x, _x.joints_input_03.batterylock3.position.y, _x.joints_input_03.batterylock3.position.z, _x.joints_input_03.batterylock3.orientation.x, _x.joints_input_03.batterylock3.orientation.y, _x.joints_input_03.batterylock3.orientation.z, _x.joints_input_03.batterylock3.orientation.w, _x.joints_input_03.batterylock4.position.x, _x.joints_input_03.batterylock4.position.y, _x.joints_input_03.batterylock4.position.z, _x.joints_input_03.batterylock4.orientation.x, _x.joints_input_03.batterylock4.orientation.y, _x.joints_input_03.batterylock4.orientation.z, _x.joints_input_03.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w, _x.target09.position.x, _x.target09.position.y, _x.target09.position.z, _x.target09.orientation.x, _x.target09.orientation.y, _x.target09.orientation.z, _x.target09.orientation.w, _x.target10.position.x, _x.target10.position.y, _x.target10.position.z, _x.target10.orientation.x, _x.target10.orientation.y, _x.target10.orientation.z, _x.target10.orientation.w, _x.target11.position.x, _x.target11.position.y, _x.target11.position.z, _x.target11.orientation.x, _x.target11.orientation.y, _x.target11.orientation.z, _x.target11.orientation.w, _x.target12.position.x, _x.target12.position.y, _x.target12.position.z, _x.target12.orientation.x, _x.target12.orientation.y, _x.target12.orientation.z, _x.target12.orientation.w, _x.target13.position.x, _x.target13.position.y, _x.target13.position.z, _x.target13.orientation.x, _x.target13.orientation.y, _x.target13.orientation.z, _x.target13.orientation.w, _x.target14.position.x, _x.target14.position.y, _x.target14.position.z, _x.target14.orientation.x, _x.target14.orientation.y, _x.target14.orientation.z, _x.target14.orientation.w, _x.target15.position.x, _x.target15.position.y, _x.target15.position.z, _x.target15.orientation.x, _x.target15.orientation.y, _x.target15.orientation.z, _x.target15.orientation.w, _x.target16.position.x, _x.target16.position.y, _x.target16.position.z, _x.target16.orientation.x, _x.target16.orientation.y, _x.target16.orientation.z, _x.target16.orientation.w, _x.target17.position.x, _x.target17.position.y, _x.target17.position.z, _x.target17.orientation.x, _x.target17.orientation.y, _x.target17.orientation.z, _x.target17.orientation.w, _x.target18.position.x, _x.target18.position.y, _x.target18.position.z, _x.target18.orientation.x, _x.target18.orientation.y, _x.target18.orientation.z, _x.target18.orientation.w, _x.target19.position.x, _x.target19.position.y, _x.target19.position.z, _x.target19.orientation.x, _x.target19.orientation.y, _x.target19.orientation.z, _x.target19.orientation.w, _x.target20.position.x, _x.target20.position.y, _x.target20.position.z, _x.target20.orientation.x, _x.target20.orientation.y, _x.target20.orientation.z, _x.target20.orientation.w, _x.target21.position.x, _x.target21.position.y, _x.target21.position.z, _x.target21.orientation.x, _x.target21.orientation.y, _x.target21.orientation.z, _x.target21.orientation.w, _x.target22.position.x, _x.target22.position.y, _x.target22.position.z, _x.target22.orientation.x, _x.target22.orientation.y, _x.target22.orientation.z, _x.target22.orientation.w, _x.target23.position.x, _x.target23.position.y, _x.target23.position.z, _x.target23.orientation.x, _x.target23.orientation.y, _x.target23.orientation.z, _x.target23.orientation.w, _x.target24.position.x, _x.target24.position.y, _x.target24.position.z, _x.target24.orientation.x, _x.target24.orientation.y, _x.target24.orientation.z, _x.target24.orientation.w, _x.target25.position.x, _x.target25.position.y, _x.target25.position.z, _x.target25.orientation.x, _x.target25.orientation.y, _x.target25.orientation.z, _x.target25.orientation.w, _x.target26.position.x, _x.target26.position.y, _x.target26.position.z, _x.target26.orientation.x, _x.target26.orientation.y, _x.target26.orientation.z, _x.target26.orientation.w, _x.target27.position.x, _x.target27.position.y, _x.target27.position.z, _x.target27.orientation.x, _x.target27.orientation.y, _x.target27.orientation.z, _x.target27.orientation.w, _x.target28.position.x, _x.target28.position.y, _x.target28.position.z, _x.target28.orientation.x, _x.target28.orientation.y, _x.target28.orientation.z, _x.target28.orientation.w, _x.target41.position.x, _x.target41.position.y, _x.target41.position.z, _x.target41.orientation.x, _x.target41.orientation.y, _x.target41.orientation.z, _x.target41.orientation.w, _x.target42.position.x, _x.target42.position.y, _x.target42.position.z, _x.target42.orientation.x, _x.target42.orientation.y, _x.target42.orientation.z, _x.target42.orientation.w, _x.target43.position.x, _x.target43.position.y, _x.target43.position.z,) = _get_struct_255d().unpack(str[start:end])
      _x = self
      start = end
      end += 2040
      (_x.target43.orientation.x, _x.target43.orientation.y, _x.target43.orientation.z, _x.target43.orientation.w, _x.target44.position.x, _x.target44.position.y, _x.target44.position.z, _x.target44.orientation.x, _x.target44.orientation.y, _x.target44.orientation.z, _x.target44.orientation.w, _x.target45.position.x, _x.target45.position.y, _x.target45.position.z, _x.target45.orientation.x, _x.target45.orientation.y, _x.target45.orientation.z, _x.target45.orientation.w, _x.target46.position.x, _x.target46.position.y, _x.target46.position.z, _x.target46.orientation.x, _x.target46.orientation.y, _x.target46.orientation.z, _x.target46.orientation.w, _x.target47.position.x, _x.target47.position.y, _x.target47.position.z, _x.target47.orientation.x, _x.target47.orientation.y, _x.target47.orientation.z, _x.target47.orientation.w, _x.target48.position.x, _x.target48.position.y, _x.target48.position.z, _x.target48.orientation.x, _x.target48.orientation.y, _x.target48.orientation.z, _x.target48.orientation.w, _x.target49.position.x, _x.target49.position.y, _x.target49.position.z, _x.target49.orientation.x, _x.target49.orientation.y, _x.target49.orientation.z, _x.target49.orientation.w, _x.target50.position.x, _x.target50.position.y, _x.target50.position.z, _x.target50.orientation.x, _x.target50.orientation.y, _x.target50.orientation.z, _x.target50.orientation.w, _x.target51.position.x, _x.target51.position.y, _x.target51.position.z, _x.target51.orientation.x, _x.target51.orientation.y, _x.target51.orientation.z, _x.target51.orientation.w, _x.target52.position.x, _x.target52.position.y, _x.target52.position.z, _x.target52.orientation.x, _x.target52.orientation.y, _x.target52.orientation.z, _x.target52.orientation.w, _x.target53.position.x, _x.target53.position.y, _x.target53.position.z, _x.target53.orientation.x, _x.target53.orientation.y, _x.target53.orientation.z, _x.target53.orientation.w, _x.target54.position.x, _x.target54.position.y, _x.target54.position.z, _x.target54.orientation.x, _x.target54.orientation.y, _x.target54.orientation.z, _x.target54.orientation.w, _x.target55.position.x, _x.target55.position.y, _x.target55.position.z, _x.target55.orientation.x, _x.target55.orientation.y, _x.target55.orientation.z, _x.target55.orientation.w, _x.target56.position.x, _x.target56.position.y, _x.target56.position.z, _x.target56.orientation.x, _x.target56.orientation.y, _x.target56.orientation.z, _x.target56.orientation.w, _x.target57.position.x, _x.target57.position.y, _x.target57.position.z, _x.target57.orientation.x, _x.target57.orientation.y, _x.target57.orientation.z, _x.target57.orientation.w, _x.target58.position.x, _x.target58.position.y, _x.target58.position.z, _x.target58.orientation.x, _x.target58.orientation.y, _x.target58.orientation.z, _x.target58.orientation.w, _x.target59.position.x, _x.target59.position.y, _x.target59.position.z, _x.target59.orientation.x, _x.target59.orientation.y, _x.target59.orientation.z, _x.target59.orientation.w, _x.target60.position.x, _x.target60.position.y, _x.target60.position.z, _x.target60.orientation.x, _x.target60.orientation.y, _x.target60.orientation.z, _x.target60.orientation.w, _x.target61.position.x, _x.target61.position.y, _x.target61.position.z, _x.target61.orientation.x, _x.target61.orientation.y, _x.target61.orientation.z, _x.target61.orientation.w, _x.target62.position.x, _x.target62.position.y, _x.target62.position.z, _x.target62.orientation.x, _x.target62.orientation.y, _x.target62.orientation.z, _x.target62.orientation.w, _x.target63.position.x, _x.target63.position.y, _x.target63.position.z, _x.target63.orientation.x, _x.target63.orientation.y, _x.target63.orientation.z, _x.target63.orientation.w, _x.target64.position.x, _x.target64.position.y, _x.target64.position.z, _x.target64.orientation.x, _x.target64.orientation.y, _x.target64.orientation.z, _x.target64.orientation.w, _x.target65.position.x, _x.target65.position.y, _x.target65.position.z, _x.target65.orientation.x, _x.target65.orientation.y, _x.target65.orientation.z, _x.target65.orientation.w, _x.target66.position.x, _x.target66.position.y, _x.target66.position.z, _x.target66.orientation.x, _x.target66.orientation.y, _x.target66.orientation.z, _x.target66.orientation.w, _x.target67.position.x, _x.target67.position.y, _x.target67.position.z, _x.target67.orientation.x, _x.target67.orientation.y, _x.target67.orientation.z, _x.target67.orientation.w, _x.target68.position.x, _x.target68.position.y, _x.target68.position.z, _x.target68.orientation.x, _x.target68.orientation.y, _x.target68.orientation.z, _x.target68.orientation.w, _x.target69.position.x, _x.target69.position.y, _x.target69.position.z, _x.target69.orientation.x, _x.target69.orientation.y, _x.target69.orientation.z, _x.target69.orientation.w, _x.target70.position.x, _x.target70.position.y, _x.target70.position.z, _x.target70.orientation.x, _x.target70.orientation.y, _x.target70.orientation.z, _x.target70.orientation.w, _x.target71.position.x, _x.target71.position.y, _x.target71.position.z, _x.target71.orientation.x, _x.target71.orientation.y, _x.target71.orientation.z, _x.target71.orientation.w, _x.target72.position.x, _x.target72.position.y, _x.target72.position.z, _x.target72.orientation.x, _x.target72.orientation.y, _x.target72.orientation.z, _x.target72.orientation.w, _x.target73.position.x, _x.target73.position.y, _x.target73.position.z, _x.target73.orientation.x, _x.target73.orientation.y, _x.target73.orientation.z, _x.target73.orientation.w, _x.target74.position.x, _x.target74.position.y, _x.target74.position.z, _x.target74.orientation.x, _x.target74.orientation.y, _x.target74.orientation.z, _x.target74.orientation.w, _x.target75.position.x, _x.target75.position.y, _x.target75.position.z, _x.target75.orientation.x, _x.target75.orientation.y, _x.target75.orientation.z, _x.target75.orientation.w, _x.target76.position.x, _x.target76.position.y, _x.target76.position.z, _x.target76.orientation.x, _x.target76.orientation.y, _x.target76.orientation.z, _x.target76.orientation.w, _x.target77.position.x, _x.target77.position.y, _x.target77.position.z, _x.target77.orientation.x, _x.target77.orientation.y, _x.target77.orientation.z, _x.target77.orientation.w, _x.target78.position.x, _x.target78.position.y, _x.target78.position.z, _x.target78.orientation.x, _x.target78.orientation.y, _x.target78.orientation.z, _x.target78.orientation.w, _x.target79.position.x, _x.target79.position.y, _x.target79.position.z, _x.target79.orientation.x, _x.target79.orientation.y, _x.target79.orientation.z,) = _get_struct_255d().unpack(str[start:end])
      _x = self
      start = end
      end += 2040
      (_x.target79.orientation.w, _x.target80.position.x, _x.target80.position.y, _x.target80.position.z, _x.target80.orientation.x, _x.target80.orientation.y, _x.target80.orientation.z, _x.target80.orientation.w, _x.target81.position.x, _x.target81.position.y, _x.target81.position.z, _x.target81.orientation.x, _x.target81.orientation.y, _x.target81.orientation.z, _x.target81.orientation.w, _x.target82.position.x, _x.target82.position.y, _x.target82.position.z, _x.target82.orientation.x, _x.target82.orientation.y, _x.target82.orientation.z, _x.target82.orientation.w, _x.target83.position.x, _x.target83.position.y, _x.target83.position.z, _x.target83.orientation.x, _x.target83.orientation.y, _x.target83.orientation.z, _x.target83.orientation.w, _x.target84.position.x, _x.target84.position.y, _x.target84.position.z, _x.target84.orientation.x, _x.target84.orientation.y, _x.target84.orientation.z, _x.target84.orientation.w, _x.target85.position.x, _x.target85.position.y, _x.target85.position.z, _x.target85.orientation.x, _x.target85.orientation.y, _x.target85.orientation.z, _x.target85.orientation.w, _x.target86.position.x, _x.target86.position.y, _x.target86.position.z, _x.target86.orientation.x, _x.target86.orientation.y, _x.target86.orientation.z, _x.target86.orientation.w, _x.target87.position.x, _x.target87.position.y, _x.target87.position.z, _x.target87.orientation.x, _x.target87.orientation.y, _x.target87.orientation.z, _x.target87.orientation.w, _x.target88.position.x, _x.target88.position.y, _x.target88.position.z, _x.target88.orientation.x, _x.target88.orientation.y, _x.target88.orientation.z, _x.target88.orientation.w, _x.target89.position.x, _x.target89.position.y, _x.target89.position.z, _x.target89.orientation.x, _x.target89.orientation.y, _x.target89.orientation.z, _x.target89.orientation.w, _x.target90.position.x, _x.target90.position.y, _x.target90.position.z, _x.target90.orientation.x, _x.target90.orientation.y, _x.target90.orientation.z, _x.target90.orientation.w, _x.target91.position.x, _x.target91.position.y, _x.target91.position.z, _x.target91.orientation.x, _x.target91.orientation.y, _x.target91.orientation.z, _x.target91.orientation.w, _x.target92.position.x, _x.target92.position.y, _x.target92.position.z, _x.target92.orientation.x, _x.target92.orientation.y, _x.target92.orientation.z, _x.target92.orientation.w, _x.target93.position.x, _x.target93.position.y, _x.target93.position.z, _x.target93.orientation.x, _x.target93.orientation.y, _x.target93.orientation.z, _x.target93.orientation.w, _x.target94.position.x, _x.target94.position.y, _x.target94.position.z, _x.target94.orientation.x, _x.target94.orientation.y, _x.target94.orientation.z, _x.target94.orientation.w, _x.target95.position.x, _x.target95.position.y, _x.target95.position.z, _x.target95.orientation.x, _x.target95.orientation.y, _x.target95.orientation.z, _x.target95.orientation.w, _x.target96.position.x, _x.target96.position.y, _x.target96.position.z, _x.target96.orientation.x, _x.target96.orientation.y, _x.target96.orientation.z, _x.target96.orientation.w, _x.target97.position.x, _x.target97.position.y, _x.target97.position.z, _x.target97.orientation.x, _x.target97.orientation.y, _x.target97.orientation.z, _x.target97.orientation.w, _x.target98.position.x, _x.target98.position.y, _x.target98.position.z, _x.target98.orientation.x, _x.target98.orientation.y, _x.target98.orientation.z, _x.target98.orientation.w, _x.target99.position.x, _x.target99.position.y, _x.target99.position.z, _x.target99.orientation.x, _x.target99.orientation.y, _x.target99.orientation.z, _x.target99.orientation.w, _x.target100.position.x, _x.target100.position.y, _x.target100.position.z, _x.target100.orientation.x, _x.target100.orientation.y, _x.target100.orientation.z, _x.target100.orientation.w, _x.target101.position.x, _x.target101.position.y, _x.target101.position.z, _x.target101.orientation.x, _x.target101.orientation.y, _x.target101.orientation.z, _x.target101.orientation.w, _x.target102.position.x, _x.target102.position.y, _x.target102.position.z, _x.target102.orientation.x, _x.target102.orientation.y, _x.target102.orientation.z, _x.target102.orientation.w, _x.target103.position.x, _x.target103.position.y, _x.target103.position.z, _x.target103.orientation.x, _x.target103.orientation.y, _x.target103.orientation.z, _x.target103.orientation.w, _x.target104.position.x, _x.target104.position.y, _x.target104.position.z, _x.target104.orientation.x, _x.target104.orientation.y, _x.target104.orientation.z, _x.target104.orientation.w, _x.target105.position.x, _x.target105.position.y, _x.target105.position.z, _x.target105.orientation.x, _x.target105.orientation.y, _x.target105.orientation.z, _x.target105.orientation.w, _x.target106.position.x, _x.target106.position.y, _x.target106.position.z, _x.target106.orientation.x, _x.target106.orientation.y, _x.target106.orientation.z, _x.target106.orientation.w, _x.target107.position.x, _x.target107.position.y, _x.target107.position.z, _x.target107.orientation.x, _x.target107.orientation.y, _x.target107.orientation.z, _x.target107.orientation.w, _x.target108.position.x, _x.target108.position.y, _x.target108.position.z, _x.target108.orientation.x, _x.target108.orientation.y, _x.target108.orientation.z, _x.target108.orientation.w, _x.target109.position.x, _x.target109.position.y, _x.target109.position.z, _x.target109.orientation.x, _x.target109.orientation.y, _x.target109.orientation.z, _x.target109.orientation.w, _x.target110.position.x, _x.target110.position.y, _x.target110.position.z, _x.target110.orientation.x, _x.target110.orientation.y, _x.target110.orientation.z, _x.target110.orientation.w, _x.target111.position.x, _x.target111.position.y, _x.target111.position.z, _x.target111.orientation.x, _x.target111.orientation.y, _x.target111.orientation.z, _x.target111.orientation.w, _x.target112.position.x, _x.target112.position.y, _x.target112.position.z, _x.target112.orientation.x, _x.target112.orientation.y, _x.target112.orientation.z, _x.target112.orientation.w, _x.target113.position.x, _x.target113.position.y, _x.target113.position.z, _x.target113.orientation.x, _x.target113.orientation.y, _x.target113.orientation.z, _x.target113.orientation.w, _x.target114.position.x, _x.target114.position.y, _x.target114.position.z, _x.target114.orientation.x, _x.target114.orientation.y, _x.target114.orientation.z, _x.target114.orientation.w, _x.target115.position.x, _x.target115.position.y, _x.target115.position.z, _x.target115.orientation.x, _x.target115.orientation.y, _x.target115.orientation.z, _x.target115.orientation.w, _x.target116.position.x, _x.target116.position.y,) = _get_struct_255d().unpack(str[start:end])
      _x = self
      start = end
      end += 1160
      (_x.target116.position.z, _x.target116.orientation.x, _x.target116.orientation.y, _x.target116.orientation.z, _x.target116.orientation.w, _x.target117.position.x, _x.target117.position.y, _x.target117.position.z, _x.target117.orientation.x, _x.target117.orientation.y, _x.target117.orientation.z, _x.target117.orientation.w, _x.target118.position.x, _x.target118.position.y, _x.target118.position.z, _x.target118.orientation.x, _x.target118.orientation.y, _x.target118.orientation.z, _x.target118.orientation.w, _x.target119.position.x, _x.target119.position.y, _x.target119.position.z, _x.target119.orientation.x, _x.target119.orientation.y, _x.target119.orientation.z, _x.target119.orientation.w, _x.target120.position.x, _x.target120.position.y, _x.target120.position.z, _x.target120.orientation.x, _x.target120.orientation.y, _x.target120.orientation.z, _x.target120.orientation.w, _x.target121.position.x, _x.target121.position.y, _x.target121.position.z, _x.target121.orientation.x, _x.target121.orientation.y, _x.target121.orientation.z, _x.target121.orientation.w, _x.target122.position.x, _x.target122.position.y, _x.target122.position.z, _x.target122.orientation.x, _x.target122.orientation.y, _x.target122.orientation.z, _x.target122.orientation.w, _x.target123.position.x, _x.target123.position.y, _x.target123.position.z, _x.target123.orientation.x, _x.target123.orientation.y, _x.target123.orientation.z, _x.target123.orientation.w, _x.target124.position.x, _x.target124.position.y, _x.target124.position.z, _x.target124.orientation.x, _x.target124.orientation.y, _x.target124.orientation.z, _x.target124.orientation.w, _x.target125.position.x, _x.target125.position.y, _x.target125.position.z, _x.target125.orientation.x, _x.target125.orientation.y, _x.target125.orientation.z, _x.target125.orientation.w, _x.target126.position.x, _x.target126.position.y, _x.target126.position.z, _x.target126.orientation.x, _x.target126.orientation.y, _x.target126.orientation.z, _x.target126.orientation.w, _x.target127.position.x, _x.target127.position.y, _x.target127.position.z, _x.target127.orientation.x, _x.target127.orientation.y, _x.target127.orientation.z, _x.target127.orientation.w, _x.target128.position.x, _x.target128.position.y, _x.target128.position.z, _x.target128.orientation.x, _x.target128.orientation.y, _x.target128.orientation.z, _x.target128.orientation.w, _x.target129.position.x, _x.target129.position.y, _x.target129.position.z, _x.target129.orientation.x, _x.target129.orientation.y, _x.target129.orientation.z, _x.target129.orientation.w, _x.target130.position.x, _x.target130.position.y, _x.target130.position.z, _x.target130.orientation.x, _x.target130.orientation.y, _x.target130.orientation.z, _x.target130.orientation.w, _x.target131.position.x, _x.target131.position.y, _x.target131.position.z, _x.target131.orientation.x, _x.target131.orientation.y, _x.target131.orientation.z, _x.target131.orientation.w, _x.target132.position.x, _x.target132.position.y, _x.target132.position.z, _x.target132.orientation.x, _x.target132.orientation.y, _x.target132.orientation.z, _x.target132.orientation.w, _x.target133.position.x, _x.target133.position.y, _x.target133.position.z, _x.target133.orientation.x, _x.target133.orientation.y, _x.target133.orientation.z, _x.target133.orientation.w, _x.target134.position.x, _x.target134.position.y, _x.target134.position.z, _x.target134.orientation.x, _x.target134.orientation.y, _x.target134.orientation.z, _x.target134.orientation.w, _x.target135.position.x, _x.target135.position.y, _x.target135.position.z, _x.target135.orientation.x, _x.target135.orientation.y, _x.target135.orientation.z, _x.target135.orientation.w, _x.target136.position.x, _x.target136.position.y, _x.target136.position.z, _x.target136.orientation.x, _x.target136.orientation.y, _x.target136.orientation.z, _x.target136.orientation.w,) = _get_struct_145d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_145d = None
def _get_struct_145d():
    global _struct_145d
    if _struct_145d is None:
        _struct_145d = struct.Struct("<145d")
    return _struct_145d
_struct_255d = None
def _get_struct_255d():
    global _struct_255d
    if _struct_255d is None:
        _struct_255d = struct.Struct("<255d")
    return _struct_255d
_struct_42d = None
def _get_struct_42d():
    global _struct_42d
    if _struct_42d is None:
        _struct_42d = struct.Struct("<42d")
    return _struct_42d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_start/MoverServiceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class MoverServiceResponse(genpy.Message):
  _md5sum = "7567aee55e9b8d4faeb6b6ca8f552807"
  _type = "robots_start/MoverServiceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """moveit_msgs/RobotTrajectory[] trajectory01
moveit_msgs/RobotTrajectory[] trajectory02
moveit_msgs/RobotTrajectory[] trajectory03
moveit_msgs/RobotTrajectory[] trajectory04
moveit_msgs/RobotTrajectory[] trajectory05
moveit_msgs/RobotTrajectory[] trajectory06
moveit_msgs/RobotTrajectory[] trajectory07
moveit_msgs/RobotTrajectory[] trajectory11
moveit_msgs/RobotTrajectory[] trajectory12
moveit_msgs/RobotTrajectory[] trajectory13
moveit_msgs/RobotTrajectory[] trajectory14
moveit_msgs/RobotTrajectory[] trajectory15
moveit_msgs/RobotTrajectory[] trajectory16
moveit_msgs/RobotTrajectory[] trajectory17
moveit_msgs/RobotTrajectory[] trajectory18
moveit_msgs/RobotTrajectory[] trajectory19
moveit_msgs/RobotTrajectory[] trajectory20
moveit_msgs/RobotTrajectory[] trajectory21
moveit_msgs/RobotTrajectory[] trajectory22
moveit_msgs/RobotTrajectory[] trajectory23
moveit_msgs/RobotTrajectory[] trajectory24
moveit_msgs/RobotTrajectory[] trajectory25
moveit_msgs/RobotTrajectory[] trajectory26
moveit_msgs/RobotTrajectory[] trajectory27
moveit_msgs/RobotTrajectory[] trajectory28
moveit_msgs/RobotTrajectory[] trajectory29
moveit_msgs/RobotTrajectory[] trajectory30
moveit_msgs/RobotTrajectory[] trajectory31
moveit_msgs/RobotTrajectory[] trajectory32
moveit_msgs/RobotTrajectory[] trajectory33
moveit_msgs/RobotTrajectory[] trajectory34




================================================================================
MSG: moveit_msgs/RobotTrajectory
trajectory_msgs/JointTrajectory joint_trajectory
trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectory
# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['trajectory01','trajectory02','trajectory03','trajectory04','trajectory05','trajectory06','trajectory07','trajectory11','trajectory12','trajectory13','trajectory14','trajectory15','trajectory16','trajectory17','trajectory18','trajectory19','trajectory20','trajectory21','trajectory22','trajectory23','trajectory24','trajectory25','trajectory26','trajectory27','trajectory28','trajectory29','trajectory30','trajectory31','trajectory32','trajectory33','trajectory34']
  _slot_types = ['moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory01,trajectory02,trajectory03,trajectory04,trajectory05,trajectory06,trajectory07,trajectory11,trajectory12,trajectory13,trajectory14,trajectory15,trajectory16,trajectory17,trajectory18,trajectory19,trajectory20,trajectory21,trajectory22,trajectory23,trajectory24,trajectory25,trajectory26,trajectory27,trajectory28,trajectory29,trajectory30,trajectory31,trajectory32,trajectory33,trajectory34

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoverServiceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectory01 is None:
        self.trajectory01 = []
      if self.trajectory02 is None:
        self.trajectory02 = []
      if self.trajectory03 is None:
        self.trajectory03 = []
      if self.trajectory04 is None:
        self.trajectory04 = []
      if self.trajectory05 is None:
        self.trajectory05 = []
      if self.trajectory06 is None:
        self.trajectory06 = []
      if self.trajectory07 is None:
        self.trajectory07 = []
      if self.trajectory11 is None:
        self.trajectory11 = []
      if self.trajectory12 is None:
        self.trajectory12 = []
      if self.trajectory13 is None:
        self.trajectory13 = []
      if self.trajectory14 is None:
        self.trajectory14 = []
      if self.trajectory15 is None:
        self.trajectory15 = []
      if self.trajectory16 is None:
        self.trajectory16 = []
      if self.trajectory17 is None:
        self.trajectory17 = []
      if self.trajectory18 is None:
        self.trajectory18 = []
      if self.trajectory19 is None:
        self.trajectory19 = []
      if self.trajectory20 is None:
        self.trajectory20 = []
      if self.trajectory21 is None:
        self.trajectory21 = []
      if self.trajectory22 is None:
        self.trajectory22 = []
      if self.trajectory23 is None:
        self.trajectory23 = []
      if self.trajectory24 is None:
        self.trajectory24 = []
      if self.trajectory25 is None:
        self.trajectory25 = []
      if self.trajectory26 is None:
        self.trajectory26 = []
      if self.trajectory27 is None:
        self.trajectory27 = []
      if self.trajectory28 is None:
        self.trajectory28 = []
      if self.trajectory29 is None:
        self.trajectory29 = []
      if self.trajectory30 is None:
        self.trajectory30 = []
      if self.trajectory31 is None:
        self.trajectory31 = []
      if self.trajectory32 is None:
        self.trajectory32 = []
      if self.trajectory33 is None:
        self.trajectory33 = []
      if self.trajectory34 is None:
        self.trajectory34 = []
    else:
      self.trajectory01 = []
      self.trajectory02 = []
      self.trajectory03 = []
      self.trajectory04 = []
      self.trajectory05 = []
      self.trajectory06 = []
      self.trajectory07 = []
      self.trajectory11 = []
      self.trajectory12 = []
      self.trajectory13 = []
      self.trajectory14 = []
      self.trajectory15 = []
      self.trajectory16 = []
      self.trajectory17 = []
      self.trajectory18 = []
      self.trajectory19 = []
      self.trajectory20 = []
      self.trajectory21 = []
      self.trajectory22 = []
      self.trajectory23 = []
      self.trajectory24 = []
      self.trajectory25 = []
      self.trajectory26 = []
      self.trajectory27 = []
      self.trajectory28 = []
      self.trajectory29 = []
      self.trajectory30 = []
      self.trajectory31 = []
      self.trajectory32 = []
      self.trajectory33 = []
      self.trajectory34 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectory01)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory01:
        _v1 = val1.joint_trajectory
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v4 = val3.time_from_start
          _x = _v4
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v5 = val1.multi_dof_joint_trajectory
        _v6 = _v5.header
        _x = _v6.seq
        buff.write(_get_struct_I().pack(_x))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v5.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v5.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v8 = val4.translation
            _x = _v8
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v9 = val4.rotation
            _x = _v9
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v10 = val4.linear
            _x = _v10
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v11 = val4.angular
            _x = _v11
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v12 = val4.linear
            _x = _v12
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v13 = val4.angular
            _x = _v13
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = val3.time_from_start
          _x = _v14
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory02)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory02:
        _v15 = val1.joint_trajectory
        _v16 = _v15.header
        _x = _v16.seq
        buff.write(_get_struct_I().pack(_x))
        _v17 = _v16.stamp
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v16.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v15.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v15.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v18 = val3.time_from_start
          _x = _v18
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v19 = val1.multi_dof_joint_trajectory
        _v20 = _v19.header
        _x = _v20.seq
        buff.write(_get_struct_I().pack(_x))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v19.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v22 = val4.translation
            _x = _v22
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v23 = val4.rotation
            _x = _v23
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v24 = val4.linear
            _x = _v24
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v25 = val4.angular
            _x = _v25
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v26 = val4.linear
            _x = _v26
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v27 = val4.angular
            _x = _v27
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v28 = val3.time_from_start
          _x = _v28
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory03)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory03:
        _v29 = val1.joint_trajectory
        _v30 = _v29.header
        _x = _v30.seq
        buff.write(_get_struct_I().pack(_x))
        _v31 = _v30.stamp
        _x = _v31
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v30.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v29.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v29.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v29.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v29.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v32 = val3.time_from_start
          _x = _v32
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v33 = val1.multi_dof_joint_trajectory
        _v34 = _v33.header
        _x = _v34.seq
        buff.write(_get_struct_I().pack(_x))
        _v35 = _v34.stamp
        _x = _v35
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v34.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v33.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v33.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v33.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v33.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v36 = val4.translation
            _x = _v36
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v37 = val4.rotation
            _x = _v37
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v38 = val4.linear
            _x = _v38
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v39 = val4.angular
            _x = _v39
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v40 = val4.linear
            _x = _v40
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v41 = val4.angular
            _x = _v41
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v42 = val3.time_from_start
          _x = _v42
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory04)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory04:
        _v43 = val1.joint_trajectory
        _v44 = _v43.header
        _x = _v44.seq
        buff.write(_get_struct_I().pack(_x))
        _v45 = _v44.stamp
        _x = _v45
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v44.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v43.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v43.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v43.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v43.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v46 = val3.time_from_start
          _x = _v46
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v47 = val1.multi_dof_joint_trajectory
        _v48 = _v47.header
        _x = _v48.seq
        buff.write(_get_struct_I().pack(_x))
        _v49 = _v48.stamp
        _x = _v49
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v48.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v47.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v47.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v47.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v50 = val4.translation
            _x = _v50
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v51 = val4.rotation
            _x = _v51
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v52 = val4.linear
            _x = _v52
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v53 = val4.angular
            _x = _v53
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v54 = val4.linear
            _x = _v54
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v55 = val4.angular
            _x = _v55
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v56 = val3.time_from_start
          _x = _v56
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory05)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory05:
        _v57 = val1.joint_trajectory
        _v58 = _v57.header
        _x = _v58.seq
        buff.write(_get_struct_I().pack(_x))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v57.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v57.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v60 = val3.time_from_start
          _x = _v60
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v61 = val1.multi_dof_joint_trajectory
        _v62 = _v61.header
        _x = _v62.seq
        buff.write(_get_struct_I().pack(_x))
        _v63 = _v62.stamp
        _x = _v63
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v62.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v61.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v61.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v61.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v61.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v64 = val4.translation
            _x = _v64
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v65 = val4.rotation
            _x = _v65
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v66 = val4.linear
            _x = _v66
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v67 = val4.angular
            _x = _v67
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v68 = val4.linear
            _x = _v68
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v69 = val4.angular
            _x = _v69
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v70 = val3.time_from_start
          _x = _v70
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory06)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory06:
        _v71 = val1.joint_trajectory
        _v72 = _v71.header
        _x = _v72.seq
        buff.write(_get_struct_I().pack(_x))
        _v73 = _v72.stamp
        _x = _v73
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v72.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v71.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v71.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v71.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v71.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v74 = val3.time_from_start
          _x = _v74
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v75 = val1.multi_dof_joint_trajectory
        _v76 = _v75.header
        _x = _v76.seq
        buff.write(_get_struct_I().pack(_x))
        _v77 = _v76.stamp
        _x = _v77
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v76.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v75.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v75.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v75.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v75.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v78 = val4.translation
            _x = _v78
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v79 = val4.rotation
            _x = _v79
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v80 = val4.linear
            _x = _v80
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v81 = val4.angular
            _x = _v81
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v82 = val4.linear
            _x = _v82
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v83 = val4.angular
            _x = _v83
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v84 = val3.time_from_start
          _x = _v84
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory07)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory07:
        _v85 = val1.joint_trajectory
        _v86 = _v85.header
        _x = _v86.seq
        buff.write(_get_struct_I().pack(_x))
        _v87 = _v86.stamp
        _x = _v87
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v86.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v85.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v85.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v85.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v85.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v88 = val3.time_from_start
          _x = _v88
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v89 = val1.multi_dof_joint_trajectory
        _v90 = _v89.header
        _x = _v90.seq
        buff.write(_get_struct_I().pack(_x))
        _v91 = _v90.stamp
        _x = _v91
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v90.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v89.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v89.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v89.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v89.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v92 = val4.translation
            _x = _v92
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v93 = val4.rotation
            _x = _v93
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v94 = val4.linear
            _x = _v94
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v95 = val4.angular
            _x = _v95
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v96 = val4.linear
            _x = _v96
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v97 = val4.angular
            _x = _v97
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v98 = val3.time_from_start
          _x = _v98
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory11)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory11:
        _v99 = val1.joint_trajectory
        _v100 = _v99.header
        _x = _v100.seq
        buff.write(_get_struct_I().pack(_x))
        _v101 = _v100.stamp
        _x = _v101
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v100.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v99.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v99.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v99.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v99.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v102 = val3.time_from_start
          _x = _v102
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v103 = val1.multi_dof_joint_trajectory
        _v104 = _v103.header
        _x = _v104.seq
        buff.write(_get_struct_I().pack(_x))
        _v105 = _v104.stamp
        _x = _v105
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v104.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v103.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v103.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v103.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v103.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v106 = val4.translation
            _x = _v106
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v107 = val4.rotation
            _x = _v107
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v108 = val4.linear
            _x = _v108
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v109 = val4.angular
            _x = _v109
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v110 = val4.linear
            _x = _v110
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v111 = val4.angular
            _x = _v111
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v112 = val3.time_from_start
          _x = _v112
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory12)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory12:
        _v113 = val1.joint_trajectory
        _v114 = _v113.header
        _x = _v114.seq
        buff.write(_get_struct_I().pack(_x))
        _v115 = _v114.stamp
        _x = _v115
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v114.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v113.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v113.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v116 = val3.time_from_start
          _x = _v116
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v117 = val1.multi_dof_joint_trajectory
        _v118 = _v117.header
        _x = _v118.seq
        buff.write(_get_struct_I().pack(_x))
        _v119 = _v118.stamp
        _x = _v119
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v118.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v117.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v117.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v117.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v117.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v120 = val4.translation
            _x = _v120
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v121 = val4.rotation
            _x = _v121
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v122 = val4.linear
            _x = _v122
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v123 = val4.angular
            _x = _v123
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v124 = val4.linear
            _x = _v124
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v125 = val4.angular
            _x = _v125
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v126 = val3.time_from_start
          _x = _v126
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory13)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory13:
        _v127 = val1.joint_trajectory
        _v128 = _v127.header
        _x = _v128.seq
        buff.write(_get_struct_I().pack(_x))
        _v129 = _v128.stamp
        _x = _v129
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v128.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v127.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v127.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v127.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v127.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v130 = val3.time_from_start
          _x = _v130
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v131 = val1.multi_dof_joint_trajectory
        _v132 = _v131.header
        _x = _v132.seq
        buff.write(_get_struct_I().pack(_x))
        _v133 = _v132.stamp
        _x = _v133
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v132.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v131.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v131.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v131.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v131.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v134 = val4.translation
            _x = _v134
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v135 = val4.rotation
            _x = _v135
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v136 = val4.linear
            _x = _v136
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v137 = val4.angular
            _x = _v137
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v138 = val4.linear
            _x = _v138
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v139 = val4.angular
            _x = _v139
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v140 = val3.time_from_start
          _x = _v140
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory14)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory14:
        _v141 = val1.joint_trajectory
        _v142 = _v141.header
        _x = _v142.seq
        buff.write(_get_struct_I().pack(_x))
        _v143 = _v142.stamp
        _x = _v143
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v142.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v141.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v141.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v141.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v141.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v144 = val3.time_from_start
          _x = _v144
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v145 = val1.multi_dof_joint_trajectory
        _v146 = _v145.header
        _x = _v146.seq
        buff.write(_get_struct_I().pack(_x))
        _v147 = _v146.stamp
        _x = _v147
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v146.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v145.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v145.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v145.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v145.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v148 = val4.translation
            _x = _v148
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v149 = val4.rotation
            _x = _v149
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v150 = val4.linear
            _x = _v150
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v151 = val4.angular
            _x = _v151
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v152 = val4.linear
            _x = _v152
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v153 = val4.angular
            _x = _v153
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v154 = val3.time_from_start
          _x = _v154
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory15)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory15:
        _v155 = val1.joint_trajectory
        _v156 = _v155.header
        _x = _v156.seq
        buff.write(_get_struct_I().pack(_x))
        _v157 = _v156.stamp
        _x = _v157
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v156.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v155.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v155.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v158 = val3.time_from_start
          _x = _v158
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v159 = val1.multi_dof_joint_trajectory
        _v160 = _v159.header
        _x = _v160.seq
        buff.write(_get_struct_I().pack(_x))
        _v161 = _v160.stamp
        _x = _v161
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v160.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v159.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v159.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v159.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v159.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v162 = val4.translation
            _x = _v162
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v163 = val4.rotation
            _x = _v163
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v164 = val4.linear
            _x = _v164
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v165 = val4.angular
            _x = _v165
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v166 = val4.linear
            _x = _v166
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v167 = val4.angular
            _x = _v167
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v168 = val3.time_from_start
          _x = _v168
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory16)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory16:
        _v169 = val1.joint_trajectory
        _v170 = _v169.header
        _x = _v170.seq
        buff.write(_get_struct_I().pack(_x))
        _v171 = _v170.stamp
        _x = _v171
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v170.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v169.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v169.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v169.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v169.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v172 = val3.time_from_start
          _x = _v172
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v173 = val1.multi_dof_joint_trajectory
        _v174 = _v173.header
        _x = _v174.seq
        buff.write(_get_struct_I().pack(_x))
        _v175 = _v174.stamp
        _x = _v175
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v174.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v173.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v173.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v173.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v173.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v176 = val4.translation
            _x = _v176
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v177 = val4.rotation
            _x = _v177
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v178 = val4.linear
            _x = _v178
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v179 = val4.angular
            _x = _v179
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v180 = val4.linear
            _x = _v180
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v181 = val4.angular
            _x = _v181
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v182 = val3.time_from_start
          _x = _v182
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory17)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory17:
        _v183 = val1.joint_trajectory
        _v184 = _v183.header
        _x = _v184.seq
        buff.write(_get_struct_I().pack(_x))
        _v185 = _v184.stamp
        _x = _v185
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v184.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v183.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v183.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v183.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v183.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v186 = val3.time_from_start
          _x = _v186
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v187 = val1.multi_dof_joint_trajectory
        _v188 = _v187.header
        _x = _v188.seq
        buff.write(_get_struct_I().pack(_x))
        _v189 = _v188.stamp
        _x = _v189
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v188.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v187.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v187.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v187.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v187.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v190 = val4.translation
            _x = _v190
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v191 = val4.rotation
            _x = _v191
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v192 = val4.linear
            _x = _v192
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v193 = val4.angular
            _x = _v193
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v194 = val4.linear
            _x = _v194
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v195 = val4.angular
            _x = _v195
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v196 = val3.time_from_start
          _x = _v196
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory18)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory18:
        _v197 = val1.joint_trajectory
        _v198 = _v197.header
        _x = _v198.seq
        buff.write(_get_struct_I().pack(_x))
        _v199 = _v198.stamp
        _x = _v199
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v198.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v197.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v197.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v197.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v197.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v200 = val3.time_from_start
          _x = _v200
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v201 = val1.multi_dof_joint_trajectory
        _v202 = _v201.header
        _x = _v202.seq
        buff.write(_get_struct_I().pack(_x))
        _v203 = _v202.stamp
        _x = _v203
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v202.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v201.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v201.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v201.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v201.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v204 = val4.translation
            _x = _v204
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v205 = val4.rotation
            _x = _v205
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v206 = val4.linear
            _x = _v206
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v207 = val4.angular
            _x = _v207
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v208 = val4.linear
            _x = _v208
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v209 = val4.angular
            _x = _v209
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v210 = val3.time_from_start
          _x = _v210
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory19)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory19:
        _v211 = val1.joint_trajectory
        _v212 = _v211.header
        _x = _v212.seq
        buff.write(_get_struct_I().pack(_x))
        _v213 = _v212.stamp
        _x = _v213
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v212.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v211.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v211.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v211.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v211.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v214 = val3.time_from_start
          _x = _v214
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v215 = val1.multi_dof_joint_trajectory
        _v216 = _v215.header
        _x = _v216.seq
        buff.write(_get_struct_I().pack(_x))
        _v217 = _v216.stamp
        _x = _v217
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v216.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v215.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v215.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v215.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v215.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v218 = val4.translation
            _x = _v218
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v219 = val4.rotation
            _x = _v219
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v220 = val4.linear
            _x = _v220
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v221 = val4.angular
            _x = _v221
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v222 = val4.linear
            _x = _v222
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v223 = val4.angular
            _x = _v223
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v224 = val3.time_from_start
          _x = _v224
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory20)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory20:
        _v225 = val1.joint_trajectory
        _v226 = _v225.header
        _x = _v226.seq
        buff.write(_get_struct_I().pack(_x))
        _v227 = _v226.stamp
        _x = _v227
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v226.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v225.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v225.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v228 = val3.time_from_start
          _x = _v228
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v229 = val1.multi_dof_joint_trajectory
        _v230 = _v229.header
        _x = _v230.seq
        buff.write(_get_struct_I().pack(_x))
        _v231 = _v230.stamp
        _x = _v231
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v230.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v229.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v229.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v229.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v229.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v232 = val4.translation
            _x = _v232
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v233 = val4.rotation
            _x = _v233
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v234 = val4.linear
            _x = _v234
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v235 = val4.angular
            _x = _v235
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v236 = val4.linear
            _x = _v236
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v237 = val4.angular
            _x = _v237
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v238 = val3.time_from_start
          _x = _v238
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory21)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory21:
        _v239 = val1.joint_trajectory
        _v240 = _v239.header
        _x = _v240.seq
        buff.write(_get_struct_I().pack(_x))
        _v241 = _v240.stamp
        _x = _v241
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v240.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v239.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v239.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v239.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v239.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v242 = val3.time_from_start
          _x = _v242
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v243 = val1.multi_dof_joint_trajectory
        _v244 = _v243.header
        _x = _v244.seq
        buff.write(_get_struct_I().pack(_x))
        _v245 = _v244.stamp
        _x = _v245
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v244.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v243.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v243.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v243.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v243.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v246 = val4.translation
            _x = _v246
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v247 = val4.rotation
            _x = _v247
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v248 = val4.linear
            _x = _v248
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v249 = val4.angular
            _x = _v249
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v250 = val4.linear
            _x = _v250
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v251 = val4.angular
            _x = _v251
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v252 = val3.time_from_start
          _x = _v252
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory22)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory22:
        _v253 = val1.joint_trajectory
        _v254 = _v253.header
        _x = _v254.seq
        buff.write(_get_struct_I().pack(_x))
        _v255 = _v254.stamp
        _x = _v255
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v254.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v253.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v253.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v253.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v256 = val3.time_from_start
          _x = _v256
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v257 = val1.multi_dof_joint_trajectory
        _v258 = _v257.header
        _x = _v258.seq
        buff.write(_get_struct_I().pack(_x))
        _v259 = _v258.stamp
        _x = _v259
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v258.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v257.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v257.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v257.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v257.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v260 = val4.translation
            _x = _v260
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v261 = val4.rotation
            _x = _v261
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v262 = val4.linear
            _x = _v262
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v263 = val4.angular
            _x = _v263
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v264 = val4.linear
            _x = _v264
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v265 = val4.angular
            _x = _v265
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v266 = val3.time_from_start
          _x = _v266
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory23)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory23:
        _v267 = val1.joint_trajectory
        _v268 = _v267.header
        _x = _v268.seq
        buff.write(_get_struct_I().pack(_x))
        _v269 = _v268.stamp
        _x = _v269
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v268.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v267.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v267.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v267.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v270 = val3.time_from_start
          _x = _v270
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v271 = val1.multi_dof_joint_trajectory
        _v272 = _v271.header
        _x = _v272.seq
        buff.write(_get_struct_I().pack(_x))
        _v273 = _v272.stamp
        _x = _v273
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v272.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v271.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v271.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v271.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v271.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v274 = val4.translation
            _x = _v274
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v275 = val4.rotation
            _x = _v275
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v276 = val4.linear
            _x = _v276
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v277 = val4.angular
            _x = _v277
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v278 = val4.linear
            _x = _v278
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v279 = val4.angular
            _x = _v279
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v280 = val3.time_from_start
          _x = _v280
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory24)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory24:
        _v281 = val1.joint_trajectory
        _v282 = _v281.header
        _x = _v282.seq
        buff.write(_get_struct_I().pack(_x))
        _v283 = _v282.stamp
        _x = _v283
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v282.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v281.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v281.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v281.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v281.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v284 = val3.time_from_start
          _x = _v284
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v285 = val1.multi_dof_joint_trajectory
        _v286 = _v285.header
        _x = _v286.seq
        buff.write(_get_struct_I().pack(_x))
        _v287 = _v286.stamp
        _x = _v287
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v286.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v285.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v285.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v285.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v285.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v288 = val4.translation
            _x = _v288
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v289 = val4.rotation
            _x = _v289
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v290 = val4.linear
            _x = _v290
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v291 = val4.angular
            _x = _v291
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v292 = val4.linear
            _x = _v292
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v293 = val4.angular
            _x = _v293
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v294 = val3.time_from_start
          _x = _v294
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory25)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory25:
        _v295 = val1.joint_trajectory
        _v296 = _v295.header
        _x = _v296.seq
        buff.write(_get_struct_I().pack(_x))
        _v297 = _v296.stamp
        _x = _v297
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v296.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v295.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v295.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v295.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v295.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v298 = val3.time_from_start
          _x = _v298
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v299 = val1.multi_dof_joint_trajectory
        _v300 = _v299.header
        _x = _v300.seq
        buff.write(_get_struct_I().pack(_x))
        _v301 = _v300.stamp
        _x = _v301
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v300.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v299.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v299.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v299.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v299.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v302 = val4.translation
            _x = _v302
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v303 = val4.rotation
            _x = _v303
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v304 = val4.linear
            _x = _v304
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v305 = val4.angular
            _x = _v305
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v306 = val4.linear
            _x = _v306
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v307 = val4.angular
            _x = _v307
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v308 = val3.time_from_start
          _x = _v308
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory26)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory26:
        _v309 = val1.joint_trajectory
        _v310 = _v309.header
        _x = _v310.seq
        buff.write(_get_struct_I().pack(_x))
        _v311 = _v310.stamp
        _x = _v311
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v310.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v309.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v309.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v309.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v309.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v312 = val3.time_from_start
          _x = _v312
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v313 = val1.multi_dof_joint_trajectory
        _v314 = _v313.header
        _x = _v314.seq
        buff.write(_get_struct_I().pack(_x))
        _v315 = _v314.stamp
        _x = _v315
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v314.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v313.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v313.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v313.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v313.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v316 = val4.translation
            _x = _v316
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v317 = val4.rotation
            _x = _v317
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v318 = val4.linear
            _x = _v318
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v319 = val4.angular
            _x = _v319
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v320 = val4.linear
            _x = _v320
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v321 = val4.angular
            _x = _v321
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v322 = val3.time_from_start
          _x = _v322
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory27)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory27:
        _v323 = val1.joint_trajectory
        _v324 = _v323.header
        _x = _v324.seq
        buff.write(_get_struct_I().pack(_x))
        _v325 = _v324.stamp
        _x = _v325
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v324.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v323.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v323.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v323.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v323.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v326 = val3.time_from_start
          _x = _v326
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v327 = val1.multi_dof_joint_trajectory
        _v328 = _v327.header
        _x = _v328.seq
        buff.write(_get_struct_I().pack(_x))
        _v329 = _v328.stamp
        _x = _v329
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v328.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v327.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v327.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v327.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v327.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v330 = val4.translation
            _x = _v330
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v331 = val4.rotation
            _x = _v331
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v332 = val4.linear
            _x = _v332
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v333 = val4.angular
            _x = _v333
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v334 = val4.linear
            _x = _v334
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v335 = val4.angular
            _x = _v335
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v336 = val3.time_from_start
          _x = _v336
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory28)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory28:
        _v337 = val1.joint_trajectory
        _v338 = _v337.header
        _x = _v338.seq
        buff.write(_get_struct_I().pack(_x))
        _v339 = _v338.stamp
        _x = _v339
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v338.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v337.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v337.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v337.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v337.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v340 = val3.time_from_start
          _x = _v340
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v341 = val1.multi_dof_joint_trajectory
        _v342 = _v341.header
        _x = _v342.seq
        buff.write(_get_struct_I().pack(_x))
        _v343 = _v342.stamp
        _x = _v343
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v342.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v341.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v341.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v341.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v341.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v344 = val4.translation
            _x = _v344
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v345 = val4.rotation
            _x = _v345
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v346 = val4.linear
            _x = _v346
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v347 = val4.angular
            _x = _v347
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v348 = val4.linear
            _x = _v348
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v349 = val4.angular
            _x = _v349
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v350 = val3.time_from_start
          _x = _v350
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory29)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory29:
        _v351 = val1.joint_trajectory
        _v352 = _v351.header
        _x = _v352.seq
        buff.write(_get_struct_I().pack(_x))
        _v353 = _v352.stamp
        _x = _v353
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v352.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v351.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v351.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v351.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v351.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v354 = val3.time_from_start
          _x = _v354
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v355 = val1.multi_dof_joint_trajectory
        _v356 = _v355.header
        _x = _v356.seq
        buff.write(_get_struct_I().pack(_x))
        _v357 = _v356.stamp
        _x = _v357
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v356.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v355.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v355.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v355.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v355.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v358 = val4.translation
            _x = _v358
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v359 = val4.rotation
            _x = _v359
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v360 = val4.linear
            _x = _v360
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v361 = val4.angular
            _x = _v361
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v362 = val4.linear
            _x = _v362
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v363 = val4.angular
            _x = _v363
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v364 = val3.time_from_start
          _x = _v364
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory30)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory30:
        _v365 = val1.joint_trajectory
        _v366 = _v365.header
        _x = _v366.seq
        buff.write(_get_struct_I().pack(_x))
        _v367 = _v366.stamp
        _x = _v367
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v366.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v365.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v365.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v365.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v365.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v368 = val3.time_from_start
          _x = _v368
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v369 = val1.multi_dof_joint_trajectory
        _v370 = _v369.header
        _x = _v370.seq
        buff.write(_get_struct_I().pack(_x))
        _v371 = _v370.stamp
        _x = _v371
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v370.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v369.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v369.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v369.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v369.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v372 = val4.translation
            _x = _v372
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v373 = val4.rotation
            _x = _v373
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v374 = val4.linear
            _x = _v374
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v375 = val4.angular
            _x = _v375
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v376 = val4.linear
            _x = _v376
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v377 = val4.angular
            _x = _v377
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v378 = val3.time_from_start
          _x = _v378
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory31)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory31:
        _v379 = val1.joint_trajectory
        _v380 = _v379.header
        _x = _v380.seq
        buff.write(_get_struct_I().pack(_x))
        _v381 = _v380.stamp
        _x = _v381
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v380.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v379.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v379.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v382 = val3.time_from_start
          _x = _v382
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v383 = val1.multi_dof_joint_trajectory
        _v384 = _v383.header
        _x = _v384.seq
        buff.write(_get_struct_I().pack(_x))
        _v385 = _v384.stamp
        _x = _v385
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v384.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v383.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v383.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v383.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v383.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v386 = val4.translation
            _x = _v386
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v387 = val4.rotation
            _x = _v387
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v388 = val4.linear
            _x = _v388
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v389 = val4.angular
            _x = _v389
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v390 = val4.linear
            _x = _v390
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v391 = val4.angular
            _x = _v391
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v392 = val3.time_from_start
          _x = _v392
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory32)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory32:
        _v393 = val1.joint_trajectory
        _v394 = _v393.header
        _x = _v394.seq
        buff.write(_get_struct_I().pack(_x))
        _v395 = _v394.stamp
        _x = _v395
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v394.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v393.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v393.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v393.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v393.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v396 = val3.time_from_start
          _x = _v396
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v397 = val1.multi_dof_joint_trajectory
        _v398 = _v397.header
        _x = _v398.seq
        buff.write(_get_struct_I().pack(_x))
        _v399 = _v398.stamp
        _x = _v399
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v398.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v397.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v397.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v397.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v397.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v400 = val4.translation
            _x = _v400
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v401 = val4.rotation
            _x = _v401
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v402 = val4.linear
            _x = _v402
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v403 = val4.angular
            _x = _v403
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v404 = val4.linear
            _x = _v404
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v405 = val4.angular
            _x = _v405
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v406 = val3.time_from_start
          _x = _v406
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory33)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory33:
        _v407 = val1.joint_trajectory
        _v408 = _v407.header
        _x = _v408.seq
        buff.write(_get_struct_I().pack(_x))
        _v409 = _v408.stamp
        _x = _v409
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v408.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v407.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v407.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v407.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v407.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v410 = val3.time_from_start
          _x = _v410
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v411 = val1.multi_dof_joint_trajectory
        _v412 = _v411.header
        _x = _v412.seq
        buff.write(_get_struct_I().pack(_x))
        _v413 = _v412.stamp
        _x = _v413
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v412.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v411.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v411.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v411.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v411.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v414 = val4.translation
            _x = _v414
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v415 = val4.rotation
            _x = _v415
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v416 = val4.linear
            _x = _v416
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v417 = val4.angular
            _x = _v417
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v418 = val4.linear
            _x = _v418
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v419 = val4.angular
            _x = _v419
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v420 = val3.time_from_start
          _x = _v420
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory34)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory34:
        _v421 = val1.joint_trajectory
        _v422 = _v421.header
        _x = _v422.seq
        buff.write(_get_struct_I().pack(_x))
        _v423 = _v422.stamp
        _x = _v423
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v422.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v421.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v421.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v421.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v421.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v424 = val3.time_from_start
          _x = _v424
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v425 = val1.multi_dof_joint_trajectory
        _v426 = _v425.header
        _x = _v426.seq
        buff.write(_get_struct_I().pack(_x))
        _v427 = _v426.stamp
        _x = _v427
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v426.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v425.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v425.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v425.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v425.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v428 = val4.translation
            _x = _v428
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v429 = val4.rotation
            _x = _v429
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v430 = val4.linear
            _x = _v430
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v431 = val4.angular
            _x = _v431
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v432 = val4.linear
            _x = _v432
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v433 = val4.angular
            _x = _v433
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v434 = val3.time_from_start
          _x = _v434
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory01 is None:
        self.trajectory01 = None
      if self.trajectory02 is None:
        self.trajectory02 = None
      if self.trajectory03 is None:
        self.trajectory03 = None
      if self.trajectory04 is None:
        self.trajectory04 = None
      if self.trajectory05 is None:
        self.trajectory05 = None
      if self.trajectory06 is None:
        self.trajectory06 = None
      if self.trajectory07 is None:
        self.trajectory07 = None
      if self.trajectory11 is None:
        self.trajectory11 = None
      if self.trajectory12 is None:
        self.trajectory12 = None
      if self.trajectory13 is None:
        self.trajectory13 = None
      if self.trajectory14 is None:
        self.trajectory14 = None
      if self.trajectory15 is None:
        self.trajectory15 = None
      if self.trajectory16 is None:
        self.trajectory16 = None
      if self.trajectory17 is None:
        self.trajectory17 = None
      if self.trajectory18 is None:
        self.trajectory18 = None
      if self.trajectory19 is None:
        self.trajectory19 = None
      if self.trajectory20 is None:
        self.trajectory20 = None
      if self.trajectory21 is None:
        self.trajectory21 = None
      if self.trajectory22 is None:
        self.trajectory22 = None
      if self.trajectory23 is None:
        self.trajectory23 = None
      if self.trajectory24 is None:
        self.trajectory24 = None
      if self.trajectory25 is None:
        self.trajectory25 = None
      if self.trajectory26 is None:
        self.trajectory26 = None
      if self.trajectory27 is None:
        self.trajectory27 = None
      if self.trajectory28 is None:
        self.trajectory28 = None
      if self.trajectory29 is None:
        self.trajectory29 = None
      if self.trajectory30 is None:
        self.trajectory30 = None
      if self.trajectory31 is None:
        self.trajectory31 = None
      if self.trajectory32 is None:
        self.trajectory32 = None
      if self.trajectory33 is None:
        self.trajectory33 = None
      if self.trajectory34 is None:
        self.trajectory34 = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory01 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v435 = val1.joint_trajectory
        _v436 = _v435.header
        start = end
        end += 4
        (_v436.seq,) = _get_struct_I().unpack(str[start:end])
        _v437 = _v436.stamp
        _x = _v437
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v436.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v436.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v435.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v435.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v435.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v438 = val3.time_from_start
          _x = _v438
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v435.points.append(val3)
        _v439 = val1.multi_dof_joint_trajectory
        _v440 = _v439.header
        start = end
        end += 4
        (_v440.seq,) = _get_struct_I().unpack(str[start:end])
        _v441 = _v440.stamp
        _x = _v441
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v440.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v440.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v439.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v439.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v439.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v442 = val4.translation
            _x = _v442
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v443 = val4.rotation
            _x = _v443
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v444 = val4.linear
            _x = _v444
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v445 = val4.angular
            _x = _v445
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v446 = val4.linear
            _x = _v446
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v447 = val4.angular
            _x = _v447
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v448 = val3.time_from_start
          _x = _v448
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v439.points.append(val3)
        self.trajectory01.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory02 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v449 = val1.joint_trajectory
        _v450 = _v449.header
        start = end
        end += 4
        (_v450.seq,) = _get_struct_I().unpack(str[start:end])
        _v451 = _v450.stamp
        _x = _v451
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v450.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v450.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v449.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v449.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v449.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v452 = val3.time_from_start
          _x = _v452
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v449.points.append(val3)
        _v453 = val1.multi_dof_joint_trajectory
        _v454 = _v453.header
        start = end
        end += 4
        (_v454.seq,) = _get_struct_I().unpack(str[start:end])
        _v455 = _v454.stamp
        _x = _v455
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v454.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v454.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v453.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v453.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v453.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v456 = val4.translation
            _x = _v456
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v457 = val4.rotation
            _x = _v457
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v458 = val4.linear
            _x = _v458
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v459 = val4.angular
            _x = _v459
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v460 = val4.linear
            _x = _v460
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v461 = val4.angular
            _x = _v461
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v462 = val3.time_from_start
          _x = _v462
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v453.points.append(val3)
        self.trajectory02.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory03 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v463 = val1.joint_trajectory
        _v464 = _v463.header
        start = end
        end += 4
        (_v464.seq,) = _get_struct_I().unpack(str[start:end])
        _v465 = _v464.stamp
        _x = _v465
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v464.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v464.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v463.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v466 = val3.time_from_start
          _x = _v466
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v463.points.append(val3)
        _v467 = val1.multi_dof_joint_trajectory
        _v468 = _v467.header
        start = end
        end += 4
        (_v468.seq,) = _get_struct_I().unpack(str[start:end])
        _v469 = _v468.stamp
        _x = _v469
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v468.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v468.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v467.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v467.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v467.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v470 = val4.translation
            _x = _v470
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v471 = val4.rotation
            _x = _v471
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v472 = val4.linear
            _x = _v472
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v473 = val4.angular
            _x = _v473
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v474 = val4.linear
            _x = _v474
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v475 = val4.angular
            _x = _v475
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v476 = val3.time_from_start
          _x = _v476
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v467.points.append(val3)
        self.trajectory03.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory04 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v477 = val1.joint_trajectory
        _v478 = _v477.header
        start = end
        end += 4
        (_v478.seq,) = _get_struct_I().unpack(str[start:end])
        _v479 = _v478.stamp
        _x = _v479
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v478.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v478.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v477.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v477.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v477.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v480 = val3.time_from_start
          _x = _v480
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v477.points.append(val3)
        _v481 = val1.multi_dof_joint_trajectory
        _v482 = _v481.header
        start = end
        end += 4
        (_v482.seq,) = _get_struct_I().unpack(str[start:end])
        _v483 = _v482.stamp
        _x = _v483
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v482.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v482.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v481.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v481.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v481.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v484 = val4.translation
            _x = _v484
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v485 = val4.rotation
            _x = _v485
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v486 = val4.linear
            _x = _v486
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v487 = val4.angular
            _x = _v487
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v488 = val4.linear
            _x = _v488
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v489 = val4.angular
            _x = _v489
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v490 = val3.time_from_start
          _x = _v490
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v481.points.append(val3)
        self.trajectory04.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory05 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v491 = val1.joint_trajectory
        _v492 = _v491.header
        start = end
        end += 4
        (_v492.seq,) = _get_struct_I().unpack(str[start:end])
        _v493 = _v492.stamp
        _x = _v493
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v492.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v492.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v491.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v491.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v491.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v494 = val3.time_from_start
          _x = _v494
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v491.points.append(val3)
        _v495 = val1.multi_dof_joint_trajectory
        _v496 = _v495.header
        start = end
        end += 4
        (_v496.seq,) = _get_struct_I().unpack(str[start:end])
        _v497 = _v496.stamp
        _x = _v497
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v496.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v496.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v495.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v495.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v495.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v498 = val4.translation
            _x = _v498
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v499 = val4.rotation
            _x = _v499
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v500 = val4.linear
            _x = _v500
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v501 = val4.angular
            _x = _v501
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v502 = val4.linear
            _x = _v502
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v503 = val4.angular
            _x = _v503
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v504 = val3.time_from_start
          _x = _v504
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v495.points.append(val3)
        self.trajectory05.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory06 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v505 = val1.joint_trajectory
        _v506 = _v505.header
        start = end
        end += 4
        (_v506.seq,) = _get_struct_I().unpack(str[start:end])
        _v507 = _v506.stamp
        _x = _v507
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v506.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v506.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v505.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v505.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v505.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v508 = val3.time_from_start
          _x = _v508
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v505.points.append(val3)
        _v509 = val1.multi_dof_joint_trajectory
        _v510 = _v509.header
        start = end
        end += 4
        (_v510.seq,) = _get_struct_I().unpack(str[start:end])
        _v511 = _v510.stamp
        _x = _v511
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v510.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v510.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v509.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v509.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v509.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v512 = val4.translation
            _x = _v512
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v513 = val4.rotation
            _x = _v513
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v514 = val4.linear
            _x = _v514
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v515 = val4.angular
            _x = _v515
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v516 = val4.linear
            _x = _v516
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v517 = val4.angular
            _x = _v517
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v518 = val3.time_from_start
          _x = _v518
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v509.points.append(val3)
        self.trajectory06.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory07 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v519 = val1.joint_trajectory
        _v520 = _v519.header
        start = end
        end += 4
        (_v520.seq,) = _get_struct_I().unpack(str[start:end])
        _v521 = _v520.stamp
        _x = _v521
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v520.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v520.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v519.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v519.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v519.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v522 = val3.time_from_start
          _x = _v522
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v519.points.append(val3)
        _v523 = val1.multi_dof_joint_trajectory
        _v524 = _v523.header
        start = end
        end += 4
        (_v524.seq,) = _get_struct_I().unpack(str[start:end])
        _v525 = _v524.stamp
        _x = _v525
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v524.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v524.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v523.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v523.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v523.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v526 = val4.translation
            _x = _v526
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v527 = val4.rotation
            _x = _v527
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v528 = val4.linear
            _x = _v528
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v529 = val4.angular
            _x = _v529
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v530 = val4.linear
            _x = _v530
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v531 = val4.angular
            _x = _v531
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v532 = val3.time_from_start
          _x = _v532
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v523.points.append(val3)
        self.trajectory07.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory11 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v533 = val1.joint_trajectory
        _v534 = _v533.header
        start = end
        end += 4
        (_v534.seq,) = _get_struct_I().unpack(str[start:end])
        _v535 = _v534.stamp
        _x = _v535
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v534.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v534.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v533.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v533.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v533.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v536 = val3.time_from_start
          _x = _v536
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v533.points.append(val3)
        _v537 = val1.multi_dof_joint_trajectory
        _v538 = _v537.header
        start = end
        end += 4
        (_v538.seq,) = _get_struct_I().unpack(str[start:end])
        _v539 = _v538.stamp
        _x = _v539
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v538.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v538.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v537.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v537.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v537.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v540 = val4.translation
            _x = _v540
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v541 = val4.rotation
            _x = _v541
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v542 = val4.linear
            _x = _v542
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v543 = val4.angular
            _x = _v543
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v544 = val4.linear
            _x = _v544
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v545 = val4.angular
            _x = _v545
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v546 = val3.time_from_start
          _x = _v546
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v537.points.append(val3)
        self.trajectory11.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory12 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v547 = val1.joint_trajectory
        _v548 = _v547.header
        start = end
        end += 4
        (_v548.seq,) = _get_struct_I().unpack(str[start:end])
        _v549 = _v548.stamp
        _x = _v549
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v548.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v548.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v547.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v547.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v547.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v550 = val3.time_from_start
          _x = _v550
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v547.points.append(val3)
        _v551 = val1.multi_dof_joint_trajectory
        _v552 = _v551.header
        start = end
        end += 4
        (_v552.seq,) = _get_struct_I().unpack(str[start:end])
        _v553 = _v552.stamp
        _x = _v553
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v552.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v552.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v551.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v551.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v551.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v554 = val4.translation
            _x = _v554
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v555 = val4.rotation
            _x = _v555
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v556 = val4.linear
            _x = _v556
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v557 = val4.angular
            _x = _v557
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v558 = val4.linear
            _x = _v558
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v559 = val4.angular
            _x = _v559
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v560 = val3.time_from_start
          _x = _v560
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v551.points.append(val3)
        self.trajectory12.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory13 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v561 = val1.joint_trajectory
        _v562 = _v561.header
        start = end
        end += 4
        (_v562.seq,) = _get_struct_I().unpack(str[start:end])
        _v563 = _v562.stamp
        _x = _v563
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v562.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v562.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v561.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v561.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v561.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v564 = val3.time_from_start
          _x = _v564
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v561.points.append(val3)
        _v565 = val1.multi_dof_joint_trajectory
        _v566 = _v565.header
        start = end
        end += 4
        (_v566.seq,) = _get_struct_I().unpack(str[start:end])
        _v567 = _v566.stamp
        _x = _v567
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v566.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v566.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v565.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v568 = val4.translation
            _x = _v568
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v569 = val4.rotation
            _x = _v569
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v570 = val4.linear
            _x = _v570
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v571 = val4.angular
            _x = _v571
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v572 = val4.linear
            _x = _v572
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v573 = val4.angular
            _x = _v573
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v574 = val3.time_from_start
          _x = _v574
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v565.points.append(val3)
        self.trajectory13.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory14 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v575 = val1.joint_trajectory
        _v576 = _v575.header
        start = end
        end += 4
        (_v576.seq,) = _get_struct_I().unpack(str[start:end])
        _v577 = _v576.stamp
        _x = _v577
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v576.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v576.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v575.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v575.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v575.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v578 = val3.time_from_start
          _x = _v578
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v575.points.append(val3)
        _v579 = val1.multi_dof_joint_trajectory
        _v580 = _v579.header
        start = end
        end += 4
        (_v580.seq,) = _get_struct_I().unpack(str[start:end])
        _v581 = _v580.stamp
        _x = _v581
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v580.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v580.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v579.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v579.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v579.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v582 = val4.translation
            _x = _v582
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v583 = val4.rotation
            _x = _v583
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v584 = val4.linear
            _x = _v584
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v585 = val4.angular
            _x = _v585
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v586 = val4.linear
            _x = _v586
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v587 = val4.angular
            _x = _v587
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v588 = val3.time_from_start
          _x = _v588
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v579.points.append(val3)
        self.trajectory14.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory15 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v589 = val1.joint_trajectory
        _v590 = _v589.header
        start = end
        end += 4
        (_v590.seq,) = _get_struct_I().unpack(str[start:end])
        _v591 = _v590.stamp
        _x = _v591
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v590.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v590.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v589.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v589.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v589.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v592 = val3.time_from_start
          _x = _v592
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v589.points.append(val3)
        _v593 = val1.multi_dof_joint_trajectory
        _v594 = _v593.header
        start = end
        end += 4
        (_v594.seq,) = _get_struct_I().unpack(str[start:end])
        _v595 = _v594.stamp
        _x = _v595
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v594.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v594.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v593.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v593.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v593.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v596 = val4.translation
            _x = _v596
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v597 = val4.rotation
            _x = _v597
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v598 = val4.linear
            _x = _v598
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v599 = val4.angular
            _x = _v599
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v600 = val4.linear
            _x = _v600
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v601 = val4.angular
            _x = _v601
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v602 = val3.time_from_start
          _x = _v602
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v593.points.append(val3)
        self.trajectory15.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory16 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v603 = val1.joint_trajectory
        _v604 = _v603.header
        start = end
        end += 4
        (_v604.seq,) = _get_struct_I().unpack(str[start:end])
        _v605 = _v604.stamp
        _x = _v605
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v604.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v604.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v603.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v603.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v603.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v606 = val3.time_from_start
          _x = _v606
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v603.points.append(val3)
        _v607 = val1.multi_dof_joint_trajectory
        _v608 = _v607.header
        start = end
        end += 4
        (_v608.seq,) = _get_struct_I().unpack(str[start:end])
        _v609 = _v608.stamp
        _x = _v609
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v608.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v608.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v607.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v607.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v607.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v610 = val4.translation
            _x = _v610
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v611 = val4.rotation
            _x = _v611
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v612 = val4.linear
            _x = _v612
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v613 = val4.angular
            _x = _v613
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v614 = val4.linear
            _x = _v614
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v615 = val4.angular
            _x = _v615
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v616 = val3.time_from_start
          _x = _v616
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v607.points.append(val3)
        self.trajectory16.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory17 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v617 = val1.joint_trajectory
        _v618 = _v617.header
        start = end
        end += 4
        (_v618.seq,) = _get_struct_I().unpack(str[start:end])
        _v619 = _v618.stamp
        _x = _v619
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v618.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v618.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v617.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v617.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v617.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v620 = val3.time_from_start
          _x = _v620
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v617.points.append(val3)
        _v621 = val1.multi_dof_joint_trajectory
        _v622 = _v621.header
        start = end
        end += 4
        (_v622.seq,) = _get_struct_I().unpack(str[start:end])
        _v623 = _v622.stamp
        _x = _v623
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v622.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v622.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v621.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v621.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v621.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v624 = val4.translation
            _x = _v624
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v625 = val4.rotation
            _x = _v625
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v626 = val4.linear
            _x = _v626
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v627 = val4.angular
            _x = _v627
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v628 = val4.linear
            _x = _v628
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v629 = val4.angular
            _x = _v629
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v630 = val3.time_from_start
          _x = _v630
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v621.points.append(val3)
        self.trajectory17.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory18 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v631 = val1.joint_trajectory
        _v632 = _v631.header
        start = end
        end += 4
        (_v632.seq,) = _get_struct_I().unpack(str[start:end])
        _v633 = _v632.stamp
        _x = _v633
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v632.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v632.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v631.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v631.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v631.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v634 = val3.time_from_start
          _x = _v634
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v631.points.append(val3)
        _v635 = val1.multi_dof_joint_trajectory
        _v636 = _v635.header
        start = end
        end += 4
        (_v636.seq,) = _get_struct_I().unpack(str[start:end])
        _v637 = _v636.stamp
        _x = _v637
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v636.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v636.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v635.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v635.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v635.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v638 = val4.translation
            _x = _v638
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v639 = val4.rotation
            _x = _v639
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v640 = val4.linear
            _x = _v640
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v641 = val4.angular
            _x = _v641
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v642 = val4.linear
            _x = _v642
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v643 = val4.angular
            _x = _v643
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v644 = val3.time_from_start
          _x = _v644
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v635.points.append(val3)
        self.trajectory18.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory19 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v645 = val1.joint_trajectory
        _v646 = _v645.header
        start = end
        end += 4
        (_v646.seq,) = _get_struct_I().unpack(str[start:end])
        _v647 = _v646.stamp
        _x = _v647
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v646.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v646.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v645.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v645.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v645.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v648 = val3.time_from_start
          _x = _v648
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v645.points.append(val3)
        _v649 = val1.multi_dof_joint_trajectory
        _v650 = _v649.header
        start = end
        end += 4
        (_v650.seq,) = _get_struct_I().unpack(str[start:end])
        _v651 = _v650.stamp
        _x = _v651
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v650.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v650.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v649.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v649.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v649.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v652 = val4.translation
            _x = _v652
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v653 = val4.rotation
            _x = _v653
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v654 = val4.linear
            _x = _v654
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v655 = val4.angular
            _x = _v655
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v656 = val4.linear
            _x = _v656
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v657 = val4.angular
            _x = _v657
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v658 = val3.time_from_start
          _x = _v658
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v649.points.append(val3)
        self.trajectory19.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory20 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v659 = val1.joint_trajectory
        _v660 = _v659.header
        start = end
        end += 4
        (_v660.seq,) = _get_struct_I().unpack(str[start:end])
        _v661 = _v660.stamp
        _x = _v661
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v660.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v660.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v659.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v659.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v659.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v662 = val3.time_from_start
          _x = _v662
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v659.points.append(val3)
        _v663 = val1.multi_dof_joint_trajectory
        _v664 = _v663.header
        start = end
        end += 4
        (_v664.seq,) = _get_struct_I().unpack(str[start:end])
        _v665 = _v664.stamp
        _x = _v665
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v664.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v664.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v663.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v663.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v663.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v666 = val4.translation
            _x = _v666
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v667 = val4.rotation
            _x = _v667
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v668 = val4.linear
            _x = _v668
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v669 = val4.angular
            _x = _v669
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v670 = val4.linear
            _x = _v670
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v671 = val4.angular
            _x = _v671
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v672 = val3.time_from_start
          _x = _v672
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v663.points.append(val3)
        self.trajectory20.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory21 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v673 = val1.joint_trajectory
        _v674 = _v673.header
        start = end
        end += 4
        (_v674.seq,) = _get_struct_I().unpack(str[start:end])
        _v675 = _v674.stamp
        _x = _v675
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v674.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v674.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v673.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v673.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v673.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v676 = val3.time_from_start
          _x = _v676
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v673.points.append(val3)
        _v677 = val1.multi_dof_joint_trajectory
        _v678 = _v677.header
        start = end
        end += 4
        (_v678.seq,) = _get_struct_I().unpack(str[start:end])
        _v679 = _v678.stamp
        _x = _v679
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v678.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v678.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v677.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v677.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v677.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v680 = val4.translation
            _x = _v680
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v681 = val4.rotation
            _x = _v681
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v682 = val4.linear
            _x = _v682
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v683 = val4.angular
            _x = _v683
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v684 = val4.linear
            _x = _v684
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v685 = val4.angular
            _x = _v685
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v686 = val3.time_from_start
          _x = _v686
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v677.points.append(val3)
        self.trajectory21.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory22 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v687 = val1.joint_trajectory
        _v688 = _v687.header
        start = end
        end += 4
        (_v688.seq,) = _get_struct_I().unpack(str[start:end])
        _v689 = _v688.stamp
        _x = _v689
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v688.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v688.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v687.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v687.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v687.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v690 = val3.time_from_start
          _x = _v690
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v687.points.append(val3)
        _v691 = val1.multi_dof_joint_trajectory
        _v692 = _v691.header
        start = end
        end += 4
        (_v692.seq,) = _get_struct_I().unpack(str[start:end])
        _v693 = _v692.stamp
        _x = _v693
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v692.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v692.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v691.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v691.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v691.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v694 = val4.translation
            _x = _v694
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v695 = val4.rotation
            _x = _v695
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v696 = val4.linear
            _x = _v696
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v697 = val4.angular
            _x = _v697
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v698 = val4.linear
            _x = _v698
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v699 = val4.angular
            _x = _v699
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v700 = val3.time_from_start
          _x = _v700
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v691.points.append(val3)
        self.trajectory22.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory23 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v701 = val1.joint_trajectory
        _v702 = _v701.header
        start = end
        end += 4
        (_v702.seq,) = _get_struct_I().unpack(str[start:end])
        _v703 = _v702.stamp
        _x = _v703
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v702.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v702.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v701.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v701.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v701.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v704 = val3.time_from_start
          _x = _v704
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v701.points.append(val3)
        _v705 = val1.multi_dof_joint_trajectory
        _v706 = _v705.header
        start = end
        end += 4
        (_v706.seq,) = _get_struct_I().unpack(str[start:end])
        _v707 = _v706.stamp
        _x = _v707
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v706.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v706.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v705.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v705.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v705.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v708 = val4.translation
            _x = _v708
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v709 = val4.rotation
            _x = _v709
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v710 = val4.linear
            _x = _v710
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v711 = val4.angular
            _x = _v711
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v712 = val4.linear
            _x = _v712
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v713 = val4.angular
            _x = _v713
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v714 = val3.time_from_start
          _x = _v714
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v705.points.append(val3)
        self.trajectory23.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory24 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v715 = val1.joint_trajectory
        _v716 = _v715.header
        start = end
        end += 4
        (_v716.seq,) = _get_struct_I().unpack(str[start:end])
        _v717 = _v716.stamp
        _x = _v717
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v716.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v716.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v715.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v715.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v715.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v718 = val3.time_from_start
          _x = _v718
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v715.points.append(val3)
        _v719 = val1.multi_dof_joint_trajectory
        _v720 = _v719.header
        start = end
        end += 4
        (_v720.seq,) = _get_struct_I().unpack(str[start:end])
        _v721 = _v720.stamp
        _x = _v721
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v720.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v720.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v719.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v719.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v719.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v722 = val4.translation
            _x = _v722
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v723 = val4.rotation
            _x = _v723
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v724 = val4.linear
            _x = _v724
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v725 = val4.angular
            _x = _v725
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v726 = val4.linear
            _x = _v726
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v727 = val4.angular
            _x = _v727
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v728 = val3.time_from_start
          _x = _v728
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v719.points.append(val3)
        self.trajectory24.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory25 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v729 = val1.joint_trajectory
        _v730 = _v729.header
        start = end
        end += 4
        (_v730.seq,) = _get_struct_I().unpack(str[start:end])
        _v731 = _v730.stamp
        _x = _v731
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v730.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v730.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v729.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v729.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v729.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v732 = val3.time_from_start
          _x = _v732
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v729.points.append(val3)
        _v733 = val1.multi_dof_joint_trajectory
        _v734 = _v733.header
        start = end
        end += 4
        (_v734.seq,) = _get_struct_I().unpack(str[start:end])
        _v735 = _v734.stamp
        _x = _v735
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v734.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v734.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v733.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v733.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v733.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v736 = val4.translation
            _x = _v736
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v737 = val4.rotation
            _x = _v737
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v738 = val4.linear
            _x = _v738
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v739 = val4.angular
            _x = _v739
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v740 = val4.linear
            _x = _v740
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v741 = val4.angular
            _x = _v741
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v742 = val3.time_from_start
          _x = _v742
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v733.points.append(val3)
        self.trajectory25.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory26 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v743 = val1.joint_trajectory
        _v744 = _v743.header
        start = end
        end += 4
        (_v744.seq,) = _get_struct_I().unpack(str[start:end])
        _v745 = _v744.stamp
        _x = _v745
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v744.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v744.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v743.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v743.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v743.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v746 = val3.time_from_start
          _x = _v746
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v743.points.append(val3)
        _v747 = val1.multi_dof_joint_trajectory
        _v748 = _v747.header
        start = end
        end += 4
        (_v748.seq,) = _get_struct_I().unpack(str[start:end])
        _v749 = _v748.stamp
        _x = _v749
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v748.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v748.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v747.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v747.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v747.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v750 = val4.translation
            _x = _v750
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v751 = val4.rotation
            _x = _v751
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v752 = val4.linear
            _x = _v752
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v753 = val4.angular
            _x = _v753
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v754 = val4.linear
            _x = _v754
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v755 = val4.angular
            _x = _v755
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v756 = val3.time_from_start
          _x = _v756
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v747.points.append(val3)
        self.trajectory26.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory27 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v757 = val1.joint_trajectory
        _v758 = _v757.header
        start = end
        end += 4
        (_v758.seq,) = _get_struct_I().unpack(str[start:end])
        _v759 = _v758.stamp
        _x = _v759
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v758.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v758.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v757.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v757.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v757.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v760 = val3.time_from_start
          _x = _v760
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v757.points.append(val3)
        _v761 = val1.multi_dof_joint_trajectory
        _v762 = _v761.header
        start = end
        end += 4
        (_v762.seq,) = _get_struct_I().unpack(str[start:end])
        _v763 = _v762.stamp
        _x = _v763
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v762.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v762.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v761.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v761.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v761.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v764 = val4.translation
            _x = _v764
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v765 = val4.rotation
            _x = _v765
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v766 = val4.linear
            _x = _v766
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v767 = val4.angular
            _x = _v767
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v768 = val4.linear
            _x = _v768
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v769 = val4.angular
            _x = _v769
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v770 = val3.time_from_start
          _x = _v770
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v761.points.append(val3)
        self.trajectory27.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory28 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v771 = val1.joint_trajectory
        _v772 = _v771.header
        start = end
        end += 4
        (_v772.seq,) = _get_struct_I().unpack(str[start:end])
        _v773 = _v772.stamp
        _x = _v773
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v772.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v772.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v771.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v771.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v771.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v774 = val3.time_from_start
          _x = _v774
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v771.points.append(val3)
        _v775 = val1.multi_dof_joint_trajectory
        _v776 = _v775.header
        start = end
        end += 4
        (_v776.seq,) = _get_struct_I().unpack(str[start:end])
        _v777 = _v776.stamp
        _x = _v777
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v776.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v776.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v775.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v775.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v775.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v778 = val4.translation
            _x = _v778
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v779 = val4.rotation
            _x = _v779
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v780 = val4.linear
            _x = _v780
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v781 = val4.angular
            _x = _v781
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v782 = val4.linear
            _x = _v782
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v783 = val4.angular
            _x = _v783
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v784 = val3.time_from_start
          _x = _v784
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v775.points.append(val3)
        self.trajectory28.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory29 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v785 = val1.joint_trajectory
        _v786 = _v785.header
        start = end
        end += 4
        (_v786.seq,) = _get_struct_I().unpack(str[start:end])
        _v787 = _v786.stamp
        _x = _v787
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v786.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v786.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v785.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v785.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v785.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v788 = val3.time_from_start
          _x = _v788
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v785.points.append(val3)
        _v789 = val1.multi_dof_joint_trajectory
        _v790 = _v789.header
        start = end
        end += 4
        (_v790.seq,) = _get_struct_I().unpack(str[start:end])
        _v791 = _v790.stamp
        _x = _v791
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v790.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v790.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v789.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v789.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v789.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v792 = val4.translation
            _x = _v792
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v793 = val4.rotation
            _x = _v793
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v794 = val4.linear
            _x = _v794
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v795 = val4.angular
            _x = _v795
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v796 = val4.linear
            _x = _v796
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v797 = val4.angular
            _x = _v797
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v798 = val3.time_from_start
          _x = _v798
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v789.points.append(val3)
        self.trajectory29.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory30 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v799 = val1.joint_trajectory
        _v800 = _v799.header
        start = end
        end += 4
        (_v800.seq,) = _get_struct_I().unpack(str[start:end])
        _v801 = _v800.stamp
        _x = _v801
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v800.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v800.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v799.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v799.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v799.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v802 = val3.time_from_start
          _x = _v802
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v799.points.append(val3)
        _v803 = val1.multi_dof_joint_trajectory
        _v804 = _v803.header
        start = end
        end += 4
        (_v804.seq,) = _get_struct_I().unpack(str[start:end])
        _v805 = _v804.stamp
        _x = _v805
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v804.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v804.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v803.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v803.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v803.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v806 = val4.translation
            _x = _v806
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v807 = val4.rotation
            _x = _v807
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v808 = val4.linear
            _x = _v808
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v809 = val4.angular
            _x = _v809
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v810 = val4.linear
            _x = _v810
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v811 = val4.angular
            _x = _v811
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v812 = val3.time_from_start
          _x = _v812
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v803.points.append(val3)
        self.trajectory30.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory31 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v813 = val1.joint_trajectory
        _v814 = _v813.header
        start = end
        end += 4
        (_v814.seq,) = _get_struct_I().unpack(str[start:end])
        _v815 = _v814.stamp
        _x = _v815
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v814.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v814.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v813.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v813.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v813.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v816 = val3.time_from_start
          _x = _v816
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v813.points.append(val3)
        _v817 = val1.multi_dof_joint_trajectory
        _v818 = _v817.header
        start = end
        end += 4
        (_v818.seq,) = _get_struct_I().unpack(str[start:end])
        _v819 = _v818.stamp
        _x = _v819
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v818.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v818.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v817.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v817.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v817.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v820 = val4.translation
            _x = _v820
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v821 = val4.rotation
            _x = _v821
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v822 = val4.linear
            _x = _v822
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v823 = val4.angular
            _x = _v823
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v824 = val4.linear
            _x = _v824
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v825 = val4.angular
            _x = _v825
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v826 = val3.time_from_start
          _x = _v826
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v817.points.append(val3)
        self.trajectory31.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory32 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v827 = val1.joint_trajectory
        _v828 = _v827.header
        start = end
        end += 4
        (_v828.seq,) = _get_struct_I().unpack(str[start:end])
        _v829 = _v828.stamp
        _x = _v829
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v828.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v828.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v827.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v827.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v827.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v830 = val3.time_from_start
          _x = _v830
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v827.points.append(val3)
        _v831 = val1.multi_dof_joint_trajectory
        _v832 = _v831.header
        start = end
        end += 4
        (_v832.seq,) = _get_struct_I().unpack(str[start:end])
        _v833 = _v832.stamp
        _x = _v833
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v832.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v832.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v831.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v831.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v831.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v834 = val4.translation
            _x = _v834
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v835 = val4.rotation
            _x = _v835
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v836 = val4.linear
            _x = _v836
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v837 = val4.angular
            _x = _v837
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v838 = val4.linear
            _x = _v838
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v839 = val4.angular
            _x = _v839
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v840 = val3.time_from_start
          _x = _v840
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v831.points.append(val3)
        self.trajectory32.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory33 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v841 = val1.joint_trajectory
        _v842 = _v841.header
        start = end
        end += 4
        (_v842.seq,) = _get_struct_I().unpack(str[start:end])
        _v843 = _v842.stamp
        _x = _v843
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v842.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v842.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v841.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v841.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v841.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v844 = val3.time_from_start
          _x = _v844
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v841.points.append(val3)
        _v845 = val1.multi_dof_joint_trajectory
        _v846 = _v845.header
        start = end
        end += 4
        (_v846.seq,) = _get_struct_I().unpack(str[start:end])
        _v847 = _v846.stamp
        _x = _v847
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v846.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v846.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v845.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v845.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v845.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v848 = val4.translation
            _x = _v848
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v849 = val4.rotation
            _x = _v849
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v850 = val4.linear
            _x = _v850
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v851 = val4.angular
            _x = _v851
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v852 = val4.linear
            _x = _v852
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v853 = val4.angular
            _x = _v853
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v854 = val3.time_from_start
          _x = _v854
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v845.points.append(val3)
        self.trajectory33.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory34 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v855 = val1.joint_trajectory
        _v856 = _v855.header
        start = end
        end += 4
        (_v856.seq,) = _get_struct_I().unpack(str[start:end])
        _v857 = _v856.stamp
        _x = _v857
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v856.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v856.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v855.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v855.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v855.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v858 = val3.time_from_start
          _x = _v858
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v855.points.append(val3)
        _v859 = val1.multi_dof_joint_trajectory
        _v860 = _v859.header
        start = end
        end += 4
        (_v860.seq,) = _get_struct_I().unpack(str[start:end])
        _v861 = _v860.stamp
        _x = _v861
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v860.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v860.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v859.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v859.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v859.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v862 = val4.translation
            _x = _v862
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v863 = val4.rotation
            _x = _v863
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v864 = val4.linear
            _x = _v864
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v865 = val4.angular
            _x = _v865
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v866 = val4.linear
            _x = _v866
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v867 = val4.angular
            _x = _v867
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v868 = val3.time_from_start
          _x = _v868
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v859.points.append(val3)
        self.trajectory34.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectory01)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory01:
        _v869 = val1.joint_trajectory
        _v870 = _v869.header
        _x = _v870.seq
        buff.write(_get_struct_I().pack(_x))
        _v871 = _v870.stamp
        _x = _v871
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v870.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v869.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v869.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v869.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v869.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v872 = val3.time_from_start
          _x = _v872
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v873 = val1.multi_dof_joint_trajectory
        _v874 = _v873.header
        _x = _v874.seq
        buff.write(_get_struct_I().pack(_x))
        _v875 = _v874.stamp
        _x = _v875
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v874.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v873.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v873.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v873.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v873.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v876 = val4.translation
            _x = _v876
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v877 = val4.rotation
            _x = _v877
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v878 = val4.linear
            _x = _v878
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v879 = val4.angular
            _x = _v879
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v880 = val4.linear
            _x = _v880
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v881 = val4.angular
            _x = _v881
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v882 = val3.time_from_start
          _x = _v882
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory02)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory02:
        _v883 = val1.joint_trajectory
        _v884 = _v883.header
        _x = _v884.seq
        buff.write(_get_struct_I().pack(_x))
        _v885 = _v884.stamp
        _x = _v885
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v884.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v883.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v883.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v883.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v883.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v886 = val3.time_from_start
          _x = _v886
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v887 = val1.multi_dof_joint_trajectory
        _v888 = _v887.header
        _x = _v888.seq
        buff.write(_get_struct_I().pack(_x))
        _v889 = _v888.stamp
        _x = _v889
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v888.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v887.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v887.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v887.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v887.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v890 = val4.translation
            _x = _v890
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v891 = val4.rotation
            _x = _v891
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v892 = val4.linear
            _x = _v892
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v893 = val4.angular
            _x = _v893
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v894 = val4.linear
            _x = _v894
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v895 = val4.angular
            _x = _v895
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v896 = val3.time_from_start
          _x = _v896
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory03)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory03:
        _v897 = val1.joint_trajectory
        _v898 = _v897.header
        _x = _v898.seq
        buff.write(_get_struct_I().pack(_x))
        _v899 = _v898.stamp
        _x = _v899
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v898.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v897.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v897.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v897.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v897.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v900 = val3.time_from_start
          _x = _v900
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v901 = val1.multi_dof_joint_trajectory
        _v902 = _v901.header
        _x = _v902.seq
        buff.write(_get_struct_I().pack(_x))
        _v903 = _v902.stamp
        _x = _v903
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v902.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v901.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v901.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v901.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v901.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v904 = val4.translation
            _x = _v904
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v905 = val4.rotation
            _x = _v905
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v906 = val4.linear
            _x = _v906
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v907 = val4.angular
            _x = _v907
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v908 = val4.linear
            _x = _v908
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v909 = val4.angular
            _x = _v909
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v910 = val3.time_from_start
          _x = _v910
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory04)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory04:
        _v911 = val1.joint_trajectory
        _v912 = _v911.header
        _x = _v912.seq
        buff.write(_get_struct_I().pack(_x))
        _v913 = _v912.stamp
        _x = _v913
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v912.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v911.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v911.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v911.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v911.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v914 = val3.time_from_start
          _x = _v914
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v915 = val1.multi_dof_joint_trajectory
        _v916 = _v915.header
        _x = _v916.seq
        buff.write(_get_struct_I().pack(_x))
        _v917 = _v916.stamp
        _x = _v917
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v916.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v915.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v915.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v915.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v915.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v918 = val4.translation
            _x = _v918
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v919 = val4.rotation
            _x = _v919
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v920 = val4.linear
            _x = _v920
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v921 = val4.angular
            _x = _v921
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v922 = val4.linear
            _x = _v922
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v923 = val4.angular
            _x = _v923
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v924 = val3.time_from_start
          _x = _v924
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory05)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory05:
        _v925 = val1.joint_trajectory
        _v926 = _v925.header
        _x = _v926.seq
        buff.write(_get_struct_I().pack(_x))
        _v927 = _v926.stamp
        _x = _v927
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v926.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v925.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v925.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v925.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v925.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v928 = val3.time_from_start
          _x = _v928
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v929 = val1.multi_dof_joint_trajectory
        _v930 = _v929.header
        _x = _v930.seq
        buff.write(_get_struct_I().pack(_x))
        _v931 = _v930.stamp
        _x = _v931
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v930.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v929.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v929.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v929.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v929.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v932 = val4.translation
            _x = _v932
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v933 = val4.rotation
            _x = _v933
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v934 = val4.linear
            _x = _v934
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v935 = val4.angular
            _x = _v935
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v936 = val4.linear
            _x = _v936
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v937 = val4.angular
            _x = _v937
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v938 = val3.time_from_start
          _x = _v938
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory06)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory06:
        _v939 = val1.joint_trajectory
        _v940 = _v939.header
        _x = _v940.seq
        buff.write(_get_struct_I().pack(_x))
        _v941 = _v940.stamp
        _x = _v941
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v940.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v939.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v939.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v939.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v939.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v942 = val3.time_from_start
          _x = _v942
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v943 = val1.multi_dof_joint_trajectory
        _v944 = _v943.header
        _x = _v944.seq
        buff.write(_get_struct_I().pack(_x))
        _v945 = _v944.stamp
        _x = _v945
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v944.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v943.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v943.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v943.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v943.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v946 = val4.translation
            _x = _v946
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v947 = val4.rotation
            _x = _v947
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v948 = val4.linear
            _x = _v948
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v949 = val4.angular
            _x = _v949
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v950 = val4.linear
            _x = _v950
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v951 = val4.angular
            _x = _v951
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v952 = val3.time_from_start
          _x = _v952
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory07)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory07:
        _v953 = val1.joint_trajectory
        _v954 = _v953.header
        _x = _v954.seq
        buff.write(_get_struct_I().pack(_x))
        _v955 = _v954.stamp
        _x = _v955
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v954.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v953.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v953.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v953.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v953.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v956 = val3.time_from_start
          _x = _v956
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v957 = val1.multi_dof_joint_trajectory
        _v958 = _v957.header
        _x = _v958.seq
        buff.write(_get_struct_I().pack(_x))
        _v959 = _v958.stamp
        _x = _v959
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v958.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v957.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v957.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v957.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v957.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v960 = val4.translation
            _x = _v960
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v961 = val4.rotation
            _x = _v961
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v962 = val4.linear
            _x = _v962
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v963 = val4.angular
            _x = _v963
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v964 = val4.linear
            _x = _v964
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v965 = val4.angular
            _x = _v965
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v966 = val3.time_from_start
          _x = _v966
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory11)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory11:
        _v967 = val1.joint_trajectory
        _v968 = _v967.header
        _x = _v968.seq
        buff.write(_get_struct_I().pack(_x))
        _v969 = _v968.stamp
        _x = _v969
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v968.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v967.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v967.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v967.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v967.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v970 = val3.time_from_start
          _x = _v970
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v971 = val1.multi_dof_joint_trajectory
        _v972 = _v971.header
        _x = _v972.seq
        buff.write(_get_struct_I().pack(_x))
        _v973 = _v972.stamp
        _x = _v973
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v972.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v971.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v971.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v971.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v971.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v974 = val4.translation
            _x = _v974
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v975 = val4.rotation
            _x = _v975
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v976 = val4.linear
            _x = _v976
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v977 = val4.angular
            _x = _v977
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v978 = val4.linear
            _x = _v978
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v979 = val4.angular
            _x = _v979
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v980 = val3.time_from_start
          _x = _v980
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory12)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory12:
        _v981 = val1.joint_trajectory
        _v982 = _v981.header
        _x = _v982.seq
        buff.write(_get_struct_I().pack(_x))
        _v983 = _v982.stamp
        _x = _v983
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v982.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v981.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v981.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v981.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v981.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v984 = val3.time_from_start
          _x = _v984
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v985 = val1.multi_dof_joint_trajectory
        _v986 = _v985.header
        _x = _v986.seq
        buff.write(_get_struct_I().pack(_x))
        _v987 = _v986.stamp
        _x = _v987
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v986.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v985.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v985.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v985.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v985.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v988 = val4.translation
            _x = _v988
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v989 = val4.rotation
            _x = _v989
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v990 = val4.linear
            _x = _v990
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v991 = val4.angular
            _x = _v991
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v992 = val4.linear
            _x = _v992
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v993 = val4.angular
            _x = _v993
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v994 = val3.time_from_start
          _x = _v994
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory13)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory13:
        _v995 = val1.joint_trajectory
        _v996 = _v995.header
        _x = _v996.seq
        buff.write(_get_struct_I().pack(_x))
        _v997 = _v996.stamp
        _x = _v997
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v996.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v995.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v995.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v995.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v995.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v998 = val3.time_from_start
          _x = _v998
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v999 = val1.multi_dof_joint_trajectory
        _v1000 = _v999.header
        _x = _v1000.seq
        buff.write(_get_struct_I().pack(_x))
        _v1001 = _v1000.stamp
        _x = _v1001
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1000.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v999.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v999.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v999.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v999.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1002 = val4.translation
            _x = _v1002
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1003 = val4.rotation
            _x = _v1003
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1004 = val4.linear
            _x = _v1004
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1005 = val4.angular
            _x = _v1005
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1006 = val4.linear
            _x = _v1006
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1007 = val4.angular
            _x = _v1007
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1008 = val3.time_from_start
          _x = _v1008
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory14)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory14:
        _v1009 = val1.joint_trajectory
        _v1010 = _v1009.header
        _x = _v1010.seq
        buff.write(_get_struct_I().pack(_x))
        _v1011 = _v1010.stamp
        _x = _v1011
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1010.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1009.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1009.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1009.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1009.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1012 = val3.time_from_start
          _x = _v1012
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1013 = val1.multi_dof_joint_trajectory
        _v1014 = _v1013.header
        _x = _v1014.seq
        buff.write(_get_struct_I().pack(_x))
        _v1015 = _v1014.stamp
        _x = _v1015
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1014.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1013.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1013.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1013.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1013.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1016 = val4.translation
            _x = _v1016
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1017 = val4.rotation
            _x = _v1017
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1018 = val4.linear
            _x = _v1018
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1019 = val4.angular
            _x = _v1019
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1020 = val4.linear
            _x = _v1020
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1021 = val4.angular
            _x = _v1021
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1022 = val3.time_from_start
          _x = _v1022
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory15)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory15:
        _v1023 = val1.joint_trajectory
        _v1024 = _v1023.header
        _x = _v1024.seq
        buff.write(_get_struct_I().pack(_x))
        _v1025 = _v1024.stamp
        _x = _v1025
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1024.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1023.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1023.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1023.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1023.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1026 = val3.time_from_start
          _x = _v1026
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1027 = val1.multi_dof_joint_trajectory
        _v1028 = _v1027.header
        _x = _v1028.seq
        buff.write(_get_struct_I().pack(_x))
        _v1029 = _v1028.stamp
        _x = _v1029
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1028.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1027.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1027.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1027.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1027.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1030 = val4.translation
            _x = _v1030
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1031 = val4.rotation
            _x = _v1031
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1032 = val4.linear
            _x = _v1032
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1033 = val4.angular
            _x = _v1033
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1034 = val4.linear
            _x = _v1034
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1035 = val4.angular
            _x = _v1035
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1036 = val3.time_from_start
          _x = _v1036
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory16)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory16:
        _v1037 = val1.joint_trajectory
        _v1038 = _v1037.header
        _x = _v1038.seq
        buff.write(_get_struct_I().pack(_x))
        _v1039 = _v1038.stamp
        _x = _v1039
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1038.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1037.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1037.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1037.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1037.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1040 = val3.time_from_start
          _x = _v1040
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1041 = val1.multi_dof_joint_trajectory
        _v1042 = _v1041.header
        _x = _v1042.seq
        buff.write(_get_struct_I().pack(_x))
        _v1043 = _v1042.stamp
        _x = _v1043
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1042.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1041.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1041.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1041.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1041.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1044 = val4.translation
            _x = _v1044
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1045 = val4.rotation
            _x = _v1045
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1046 = val4.linear
            _x = _v1046
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1047 = val4.angular
            _x = _v1047
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1048 = val4.linear
            _x = _v1048
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1049 = val4.angular
            _x = _v1049
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1050 = val3.time_from_start
          _x = _v1050
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory17)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory17:
        _v1051 = val1.joint_trajectory
        _v1052 = _v1051.header
        _x = _v1052.seq
        buff.write(_get_struct_I().pack(_x))
        _v1053 = _v1052.stamp
        _x = _v1053
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1052.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1051.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1051.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1051.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1051.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1054 = val3.time_from_start
          _x = _v1054
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1055 = val1.multi_dof_joint_trajectory
        _v1056 = _v1055.header
        _x = _v1056.seq
        buff.write(_get_struct_I().pack(_x))
        _v1057 = _v1056.stamp
        _x = _v1057
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1056.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1055.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1055.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1055.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1055.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1058 = val4.translation
            _x = _v1058
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1059 = val4.rotation
            _x = _v1059
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1060 = val4.linear
            _x = _v1060
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1061 = val4.angular
            _x = _v1061
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1062 = val4.linear
            _x = _v1062
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1063 = val4.angular
            _x = _v1063
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1064 = val3.time_from_start
          _x = _v1064
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory18)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory18:
        _v1065 = val1.joint_trajectory
        _v1066 = _v1065.header
        _x = _v1066.seq
        buff.write(_get_struct_I().pack(_x))
        _v1067 = _v1066.stamp
        _x = _v1067
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1066.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1065.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1065.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1065.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1065.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1068 = val3.time_from_start
          _x = _v1068
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1069 = val1.multi_dof_joint_trajectory
        _v1070 = _v1069.header
        _x = _v1070.seq
        buff.write(_get_struct_I().pack(_x))
        _v1071 = _v1070.stamp
        _x = _v1071
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1070.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1069.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1069.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1069.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1069.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1072 = val4.translation
            _x = _v1072
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1073 = val4.rotation
            _x = _v1073
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1074 = val4.linear
            _x = _v1074
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1075 = val4.angular
            _x = _v1075
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1076 = val4.linear
            _x = _v1076
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1077 = val4.angular
            _x = _v1077
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1078 = val3.time_from_start
          _x = _v1078
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory19)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory19:
        _v1079 = val1.joint_trajectory
        _v1080 = _v1079.header
        _x = _v1080.seq
        buff.write(_get_struct_I().pack(_x))
        _v1081 = _v1080.stamp
        _x = _v1081
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1080.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1079.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1079.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1079.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1079.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1082 = val3.time_from_start
          _x = _v1082
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1083 = val1.multi_dof_joint_trajectory
        _v1084 = _v1083.header
        _x = _v1084.seq
        buff.write(_get_struct_I().pack(_x))
        _v1085 = _v1084.stamp
        _x = _v1085
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1084.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1083.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1083.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1083.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1083.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1086 = val4.translation
            _x = _v1086
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1087 = val4.rotation
            _x = _v1087
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1088 = val4.linear
            _x = _v1088
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1089 = val4.angular
            _x = _v1089
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1090 = val4.linear
            _x = _v1090
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1091 = val4.angular
            _x = _v1091
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1092 = val3.time_from_start
          _x = _v1092
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory20)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory20:
        _v1093 = val1.joint_trajectory
        _v1094 = _v1093.header
        _x = _v1094.seq
        buff.write(_get_struct_I().pack(_x))
        _v1095 = _v1094.stamp
        _x = _v1095
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1094.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1093.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1093.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1093.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1093.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1096 = val3.time_from_start
          _x = _v1096
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1097 = val1.multi_dof_joint_trajectory
        _v1098 = _v1097.header
        _x = _v1098.seq
        buff.write(_get_struct_I().pack(_x))
        _v1099 = _v1098.stamp
        _x = _v1099
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1098.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1097.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1097.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1097.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1097.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1100 = val4.translation
            _x = _v1100
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1101 = val4.rotation
            _x = _v1101
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1102 = val4.linear
            _x = _v1102
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1103 = val4.angular
            _x = _v1103
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1104 = val4.linear
            _x = _v1104
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1105 = val4.angular
            _x = _v1105
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1106 = val3.time_from_start
          _x = _v1106
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory21)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory21:
        _v1107 = val1.joint_trajectory
        _v1108 = _v1107.header
        _x = _v1108.seq
        buff.write(_get_struct_I().pack(_x))
        _v1109 = _v1108.stamp
        _x = _v1109
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1108.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1107.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1107.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1107.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1107.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1110 = val3.time_from_start
          _x = _v1110
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1111 = val1.multi_dof_joint_trajectory
        _v1112 = _v1111.header
        _x = _v1112.seq
        buff.write(_get_struct_I().pack(_x))
        _v1113 = _v1112.stamp
        _x = _v1113
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1112.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1111.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1111.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1111.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1111.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1114 = val4.translation
            _x = _v1114
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1115 = val4.rotation
            _x = _v1115
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1116 = val4.linear
            _x = _v1116
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1117 = val4.angular
            _x = _v1117
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1118 = val4.linear
            _x = _v1118
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1119 = val4.angular
            _x = _v1119
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1120 = val3.time_from_start
          _x = _v1120
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory22)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory22:
        _v1121 = val1.joint_trajectory
        _v1122 = _v1121.header
        _x = _v1122.seq
        buff.write(_get_struct_I().pack(_x))
        _v1123 = _v1122.stamp
        _x = _v1123
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1122.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1121.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1121.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1121.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1121.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1124 = val3.time_from_start
          _x = _v1124
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1125 = val1.multi_dof_joint_trajectory
        _v1126 = _v1125.header
        _x = _v1126.seq
        buff.write(_get_struct_I().pack(_x))
        _v1127 = _v1126.stamp
        _x = _v1127
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1126.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1125.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1125.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1125.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1125.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1128 = val4.translation
            _x = _v1128
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1129 = val4.rotation
            _x = _v1129
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1130 = val4.linear
            _x = _v1130
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1131 = val4.angular
            _x = _v1131
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1132 = val4.linear
            _x = _v1132
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1133 = val4.angular
            _x = _v1133
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1134 = val3.time_from_start
          _x = _v1134
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory23)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory23:
        _v1135 = val1.joint_trajectory
        _v1136 = _v1135.header
        _x = _v1136.seq
        buff.write(_get_struct_I().pack(_x))
        _v1137 = _v1136.stamp
        _x = _v1137
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1136.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1135.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1135.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1135.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1135.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1138 = val3.time_from_start
          _x = _v1138
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1139 = val1.multi_dof_joint_trajectory
        _v1140 = _v1139.header
        _x = _v1140.seq
        buff.write(_get_struct_I().pack(_x))
        _v1141 = _v1140.stamp
        _x = _v1141
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1140.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1139.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1139.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1139.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1139.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1142 = val4.translation
            _x = _v1142
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1143 = val4.rotation
            _x = _v1143
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1144 = val4.linear
            _x = _v1144
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1145 = val4.angular
            _x = _v1145
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1146 = val4.linear
            _x = _v1146
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1147 = val4.angular
            _x = _v1147
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1148 = val3.time_from_start
          _x = _v1148
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory24)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory24:
        _v1149 = val1.joint_trajectory
        _v1150 = _v1149.header
        _x = _v1150.seq
        buff.write(_get_struct_I().pack(_x))
        _v1151 = _v1150.stamp
        _x = _v1151
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1150.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1149.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1149.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1149.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1149.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1152 = val3.time_from_start
          _x = _v1152
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1153 = val1.multi_dof_joint_trajectory
        _v1154 = _v1153.header
        _x = _v1154.seq
        buff.write(_get_struct_I().pack(_x))
        _v1155 = _v1154.stamp
        _x = _v1155
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1154.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1153.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1153.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1153.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1153.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1156 = val4.translation
            _x = _v1156
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1157 = val4.rotation
            _x = _v1157
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1158 = val4.linear
            _x = _v1158
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1159 = val4.angular
            _x = _v1159
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1160 = val4.linear
            _x = _v1160
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1161 = val4.angular
            _x = _v1161
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1162 = val3.time_from_start
          _x = _v1162
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory25)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory25:
        _v1163 = val1.joint_trajectory
        _v1164 = _v1163.header
        _x = _v1164.seq
        buff.write(_get_struct_I().pack(_x))
        _v1165 = _v1164.stamp
        _x = _v1165
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1164.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1163.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1163.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1163.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1163.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1166 = val3.time_from_start
          _x = _v1166
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1167 = val1.multi_dof_joint_trajectory
        _v1168 = _v1167.header
        _x = _v1168.seq
        buff.write(_get_struct_I().pack(_x))
        _v1169 = _v1168.stamp
        _x = _v1169
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1168.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1167.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1167.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1167.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1167.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1170 = val4.translation
            _x = _v1170
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1171 = val4.rotation
            _x = _v1171
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1172 = val4.linear
            _x = _v1172
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1173 = val4.angular
            _x = _v1173
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1174 = val4.linear
            _x = _v1174
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1175 = val4.angular
            _x = _v1175
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1176 = val3.time_from_start
          _x = _v1176
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory26)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory26:
        _v1177 = val1.joint_trajectory
        _v1178 = _v1177.header
        _x = _v1178.seq
        buff.write(_get_struct_I().pack(_x))
        _v1179 = _v1178.stamp
        _x = _v1179
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1178.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1177.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1177.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1177.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1177.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1180 = val3.time_from_start
          _x = _v1180
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1181 = val1.multi_dof_joint_trajectory
        _v1182 = _v1181.header
        _x = _v1182.seq
        buff.write(_get_struct_I().pack(_x))
        _v1183 = _v1182.stamp
        _x = _v1183
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1182.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1181.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1181.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1181.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1181.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1184 = val4.translation
            _x = _v1184
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1185 = val4.rotation
            _x = _v1185
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1186 = val4.linear
            _x = _v1186
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1187 = val4.angular
            _x = _v1187
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1188 = val4.linear
            _x = _v1188
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1189 = val4.angular
            _x = _v1189
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1190 = val3.time_from_start
          _x = _v1190
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory27)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory27:
        _v1191 = val1.joint_trajectory
        _v1192 = _v1191.header
        _x = _v1192.seq
        buff.write(_get_struct_I().pack(_x))
        _v1193 = _v1192.stamp
        _x = _v1193
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1192.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1191.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1191.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1191.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1191.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1194 = val3.time_from_start
          _x = _v1194
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1195 = val1.multi_dof_joint_trajectory
        _v1196 = _v1195.header
        _x = _v1196.seq
        buff.write(_get_struct_I().pack(_x))
        _v1197 = _v1196.stamp
        _x = _v1197
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1196.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1195.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1195.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1195.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1195.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1198 = val4.translation
            _x = _v1198
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1199 = val4.rotation
            _x = _v1199
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1200 = val4.linear
            _x = _v1200
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1201 = val4.angular
            _x = _v1201
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1202 = val4.linear
            _x = _v1202
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1203 = val4.angular
            _x = _v1203
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1204 = val3.time_from_start
          _x = _v1204
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory28)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory28:
        _v1205 = val1.joint_trajectory
        _v1206 = _v1205.header
        _x = _v1206.seq
        buff.write(_get_struct_I().pack(_x))
        _v1207 = _v1206.stamp
        _x = _v1207
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1206.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1205.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1205.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1205.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1205.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1208 = val3.time_from_start
          _x = _v1208
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1209 = val1.multi_dof_joint_trajectory
        _v1210 = _v1209.header
        _x = _v1210.seq
        buff.write(_get_struct_I().pack(_x))
        _v1211 = _v1210.stamp
        _x = _v1211
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1210.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1209.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1209.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1209.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1209.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1212 = val4.translation
            _x = _v1212
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1213 = val4.rotation
            _x = _v1213
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1214 = val4.linear
            _x = _v1214
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1215 = val4.angular
            _x = _v1215
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1216 = val4.linear
            _x = _v1216
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1217 = val4.angular
            _x = _v1217
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1218 = val3.time_from_start
          _x = _v1218
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory29)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory29:
        _v1219 = val1.joint_trajectory
        _v1220 = _v1219.header
        _x = _v1220.seq
        buff.write(_get_struct_I().pack(_x))
        _v1221 = _v1220.stamp
        _x = _v1221
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1220.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1219.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1219.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1219.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1219.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1222 = val3.time_from_start
          _x = _v1222
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1223 = val1.multi_dof_joint_trajectory
        _v1224 = _v1223.header
        _x = _v1224.seq
        buff.write(_get_struct_I().pack(_x))
        _v1225 = _v1224.stamp
        _x = _v1225
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1224.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1223.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1223.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1223.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1223.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1226 = val4.translation
            _x = _v1226
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1227 = val4.rotation
            _x = _v1227
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1228 = val4.linear
            _x = _v1228
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1229 = val4.angular
            _x = _v1229
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1230 = val4.linear
            _x = _v1230
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1231 = val4.angular
            _x = _v1231
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1232 = val3.time_from_start
          _x = _v1232
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory30)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory30:
        _v1233 = val1.joint_trajectory
        _v1234 = _v1233.header
        _x = _v1234.seq
        buff.write(_get_struct_I().pack(_x))
        _v1235 = _v1234.stamp
        _x = _v1235
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1234.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1233.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1233.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1233.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1233.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1236 = val3.time_from_start
          _x = _v1236
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1237 = val1.multi_dof_joint_trajectory
        _v1238 = _v1237.header
        _x = _v1238.seq
        buff.write(_get_struct_I().pack(_x))
        _v1239 = _v1238.stamp
        _x = _v1239
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1238.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1237.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1237.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1237.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1237.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1240 = val4.translation
            _x = _v1240
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1241 = val4.rotation
            _x = _v1241
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1242 = val4.linear
            _x = _v1242
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1243 = val4.angular
            _x = _v1243
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1244 = val4.linear
            _x = _v1244
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1245 = val4.angular
            _x = _v1245
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1246 = val3.time_from_start
          _x = _v1246
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory31)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory31:
        _v1247 = val1.joint_trajectory
        _v1248 = _v1247.header
        _x = _v1248.seq
        buff.write(_get_struct_I().pack(_x))
        _v1249 = _v1248.stamp
        _x = _v1249
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1248.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1247.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1247.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1247.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1247.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1250 = val3.time_from_start
          _x = _v1250
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1251 = val1.multi_dof_joint_trajectory
        _v1252 = _v1251.header
        _x = _v1252.seq
        buff.write(_get_struct_I().pack(_x))
        _v1253 = _v1252.stamp
        _x = _v1253
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1252.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1251.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1251.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1251.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1251.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1254 = val4.translation
            _x = _v1254
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1255 = val4.rotation
            _x = _v1255
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1256 = val4.linear
            _x = _v1256
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1257 = val4.angular
            _x = _v1257
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1258 = val4.linear
            _x = _v1258
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1259 = val4.angular
            _x = _v1259
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1260 = val3.time_from_start
          _x = _v1260
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory32)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory32:
        _v1261 = val1.joint_trajectory
        _v1262 = _v1261.header
        _x = _v1262.seq
        buff.write(_get_struct_I().pack(_x))
        _v1263 = _v1262.stamp
        _x = _v1263
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1262.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1261.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1261.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1261.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1261.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1264 = val3.time_from_start
          _x = _v1264
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1265 = val1.multi_dof_joint_trajectory
        _v1266 = _v1265.header
        _x = _v1266.seq
        buff.write(_get_struct_I().pack(_x))
        _v1267 = _v1266.stamp
        _x = _v1267
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1266.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1265.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1265.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1265.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1265.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1268 = val4.translation
            _x = _v1268
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1269 = val4.rotation
            _x = _v1269
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1270 = val4.linear
            _x = _v1270
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1271 = val4.angular
            _x = _v1271
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1272 = val4.linear
            _x = _v1272
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1273 = val4.angular
            _x = _v1273
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1274 = val3.time_from_start
          _x = _v1274
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory33)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory33:
        _v1275 = val1.joint_trajectory
        _v1276 = _v1275.header
        _x = _v1276.seq
        buff.write(_get_struct_I().pack(_x))
        _v1277 = _v1276.stamp
        _x = _v1277
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1276.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1275.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1275.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1275.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1275.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1278 = val3.time_from_start
          _x = _v1278
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1279 = val1.multi_dof_joint_trajectory
        _v1280 = _v1279.header
        _x = _v1280.seq
        buff.write(_get_struct_I().pack(_x))
        _v1281 = _v1280.stamp
        _x = _v1281
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1280.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1279.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1279.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1279.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1279.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1282 = val4.translation
            _x = _v1282
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1283 = val4.rotation
            _x = _v1283
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1284 = val4.linear
            _x = _v1284
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1285 = val4.angular
            _x = _v1285
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1286 = val4.linear
            _x = _v1286
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1287 = val4.angular
            _x = _v1287
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1288 = val3.time_from_start
          _x = _v1288
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectory34)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory34:
        _v1289 = val1.joint_trajectory
        _v1290 = _v1289.header
        _x = _v1290.seq
        buff.write(_get_struct_I().pack(_x))
        _v1291 = _v1290.stamp
        _x = _v1291
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1290.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1289.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1289.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1289.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1289.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v1292 = val3.time_from_start
          _x = _v1292
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v1293 = val1.multi_dof_joint_trajectory
        _v1294 = _v1293.header
        _x = _v1294.seq
        buff.write(_get_struct_I().pack(_x))
        _v1295 = _v1294.stamp
        _x = _v1295
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1294.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1293.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1293.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1293.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1293.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v1296 = val4.translation
            _x = _v1296
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1297 = val4.rotation
            _x = _v1297
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v1298 = val4.linear
            _x = _v1298
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1299 = val4.angular
            _x = _v1299
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v1300 = val4.linear
            _x = _v1300
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v1301 = val4.angular
            _x = _v1301
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v1302 = val3.time_from_start
          _x = _v1302
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory01 is None:
        self.trajectory01 = None
      if self.trajectory02 is None:
        self.trajectory02 = None
      if self.trajectory03 is None:
        self.trajectory03 = None
      if self.trajectory04 is None:
        self.trajectory04 = None
      if self.trajectory05 is None:
        self.trajectory05 = None
      if self.trajectory06 is None:
        self.trajectory06 = None
      if self.trajectory07 is None:
        self.trajectory07 = None
      if self.trajectory11 is None:
        self.trajectory11 = None
      if self.trajectory12 is None:
        self.trajectory12 = None
      if self.trajectory13 is None:
        self.trajectory13 = None
      if self.trajectory14 is None:
        self.trajectory14 = None
      if self.trajectory15 is None:
        self.trajectory15 = None
      if self.trajectory16 is None:
        self.trajectory16 = None
      if self.trajectory17 is None:
        self.trajectory17 = None
      if self.trajectory18 is None:
        self.trajectory18 = None
      if self.trajectory19 is None:
        self.trajectory19 = None
      if self.trajectory20 is None:
        self.trajectory20 = None
      if self.trajectory21 is None:
        self.trajectory21 = None
      if self.trajectory22 is None:
        self.trajectory22 = None
      if self.trajectory23 is None:
        self.trajectory23 = None
      if self.trajectory24 is None:
        self.trajectory24 = None
      if self.trajectory25 is None:
        self.trajectory25 = None
      if self.trajectory26 is None:
        self.trajectory26 = None
      if self.trajectory27 is None:
        self.trajectory27 = None
      if self.trajectory28 is None:
        self.trajectory28 = None
      if self.trajectory29 is None:
        self.trajectory29 = None
      if self.trajectory30 is None:
        self.trajectory30 = None
      if self.trajectory31 is None:
        self.trajectory31 = None
      if self.trajectory32 is None:
        self.trajectory32 = None
      if self.trajectory33 is None:
        self.trajectory33 = None
      if self.trajectory34 is None:
        self.trajectory34 = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory01 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1303 = val1.joint_trajectory
        _v1304 = _v1303.header
        start = end
        end += 4
        (_v1304.seq,) = _get_struct_I().unpack(str[start:end])
        _v1305 = _v1304.stamp
        _x = _v1305
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1304.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1304.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1303.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1303.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1303.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1306 = val3.time_from_start
          _x = _v1306
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1303.points.append(val3)
        _v1307 = val1.multi_dof_joint_trajectory
        _v1308 = _v1307.header
        start = end
        end += 4
        (_v1308.seq,) = _get_struct_I().unpack(str[start:end])
        _v1309 = _v1308.stamp
        _x = _v1309
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1308.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1308.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1307.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1307.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1307.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1310 = val4.translation
            _x = _v1310
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1311 = val4.rotation
            _x = _v1311
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1312 = val4.linear
            _x = _v1312
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1313 = val4.angular
            _x = _v1313
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1314 = val4.linear
            _x = _v1314
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1315 = val4.angular
            _x = _v1315
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1316 = val3.time_from_start
          _x = _v1316
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1307.points.append(val3)
        self.trajectory01.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory02 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1317 = val1.joint_trajectory
        _v1318 = _v1317.header
        start = end
        end += 4
        (_v1318.seq,) = _get_struct_I().unpack(str[start:end])
        _v1319 = _v1318.stamp
        _x = _v1319
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1318.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1318.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1317.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1317.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1317.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1320 = val3.time_from_start
          _x = _v1320
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1317.points.append(val3)
        _v1321 = val1.multi_dof_joint_trajectory
        _v1322 = _v1321.header
        start = end
        end += 4
        (_v1322.seq,) = _get_struct_I().unpack(str[start:end])
        _v1323 = _v1322.stamp
        _x = _v1323
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1322.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1322.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1321.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1321.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1321.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1324 = val4.translation
            _x = _v1324
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1325 = val4.rotation
            _x = _v1325
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1326 = val4.linear
            _x = _v1326
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1327 = val4.angular
            _x = _v1327
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1328 = val4.linear
            _x = _v1328
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1329 = val4.angular
            _x = _v1329
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1330 = val3.time_from_start
          _x = _v1330
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1321.points.append(val3)
        self.trajectory02.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory03 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1331 = val1.joint_trajectory
        _v1332 = _v1331.header
        start = end
        end += 4
        (_v1332.seq,) = _get_struct_I().unpack(str[start:end])
        _v1333 = _v1332.stamp
        _x = _v1333
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1332.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1332.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1331.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1331.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1331.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1334 = val3.time_from_start
          _x = _v1334
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1331.points.append(val3)
        _v1335 = val1.multi_dof_joint_trajectory
        _v1336 = _v1335.header
        start = end
        end += 4
        (_v1336.seq,) = _get_struct_I().unpack(str[start:end])
        _v1337 = _v1336.stamp
        _x = _v1337
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1336.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1336.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1335.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1335.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1335.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1338 = val4.translation
            _x = _v1338
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1339 = val4.rotation
            _x = _v1339
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1340 = val4.linear
            _x = _v1340
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1341 = val4.angular
            _x = _v1341
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1342 = val4.linear
            _x = _v1342
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1343 = val4.angular
            _x = _v1343
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1344 = val3.time_from_start
          _x = _v1344
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1335.points.append(val3)
        self.trajectory03.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory04 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1345 = val1.joint_trajectory
        _v1346 = _v1345.header
        start = end
        end += 4
        (_v1346.seq,) = _get_struct_I().unpack(str[start:end])
        _v1347 = _v1346.stamp
        _x = _v1347
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1346.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1346.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1345.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1345.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1345.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1348 = val3.time_from_start
          _x = _v1348
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1345.points.append(val3)
        _v1349 = val1.multi_dof_joint_trajectory
        _v1350 = _v1349.header
        start = end
        end += 4
        (_v1350.seq,) = _get_struct_I().unpack(str[start:end])
        _v1351 = _v1350.stamp
        _x = _v1351
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1350.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1350.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1349.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1349.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1349.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1352 = val4.translation
            _x = _v1352
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1353 = val4.rotation
            _x = _v1353
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1354 = val4.linear
            _x = _v1354
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1355 = val4.angular
            _x = _v1355
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1356 = val4.linear
            _x = _v1356
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1357 = val4.angular
            _x = _v1357
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1358 = val3.time_from_start
          _x = _v1358
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1349.points.append(val3)
        self.trajectory04.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory05 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1359 = val1.joint_trajectory
        _v1360 = _v1359.header
        start = end
        end += 4
        (_v1360.seq,) = _get_struct_I().unpack(str[start:end])
        _v1361 = _v1360.stamp
        _x = _v1361
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1360.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1360.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1359.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1359.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1359.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1362 = val3.time_from_start
          _x = _v1362
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1359.points.append(val3)
        _v1363 = val1.multi_dof_joint_trajectory
        _v1364 = _v1363.header
        start = end
        end += 4
        (_v1364.seq,) = _get_struct_I().unpack(str[start:end])
        _v1365 = _v1364.stamp
        _x = _v1365
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1364.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1364.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1363.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1363.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1363.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1366 = val4.translation
            _x = _v1366
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1367 = val4.rotation
            _x = _v1367
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1368 = val4.linear
            _x = _v1368
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1369 = val4.angular
            _x = _v1369
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1370 = val4.linear
            _x = _v1370
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1371 = val4.angular
            _x = _v1371
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1372 = val3.time_from_start
          _x = _v1372
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1363.points.append(val3)
        self.trajectory05.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory06 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1373 = val1.joint_trajectory
        _v1374 = _v1373.header
        start = end
        end += 4
        (_v1374.seq,) = _get_struct_I().unpack(str[start:end])
        _v1375 = _v1374.stamp
        _x = _v1375
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1374.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1374.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1373.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1373.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1373.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1376 = val3.time_from_start
          _x = _v1376
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1373.points.append(val3)
        _v1377 = val1.multi_dof_joint_trajectory
        _v1378 = _v1377.header
        start = end
        end += 4
        (_v1378.seq,) = _get_struct_I().unpack(str[start:end])
        _v1379 = _v1378.stamp
        _x = _v1379
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1378.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1378.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1377.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1377.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1377.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1380 = val4.translation
            _x = _v1380
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1381 = val4.rotation
            _x = _v1381
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1382 = val4.linear
            _x = _v1382
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1383 = val4.angular
            _x = _v1383
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1384 = val4.linear
            _x = _v1384
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1385 = val4.angular
            _x = _v1385
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1386 = val3.time_from_start
          _x = _v1386
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1377.points.append(val3)
        self.trajectory06.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory07 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1387 = val1.joint_trajectory
        _v1388 = _v1387.header
        start = end
        end += 4
        (_v1388.seq,) = _get_struct_I().unpack(str[start:end])
        _v1389 = _v1388.stamp
        _x = _v1389
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1388.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1388.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1387.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1387.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1387.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1390 = val3.time_from_start
          _x = _v1390
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1387.points.append(val3)
        _v1391 = val1.multi_dof_joint_trajectory
        _v1392 = _v1391.header
        start = end
        end += 4
        (_v1392.seq,) = _get_struct_I().unpack(str[start:end])
        _v1393 = _v1392.stamp
        _x = _v1393
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1392.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1392.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1391.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1391.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1391.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1394 = val4.translation
            _x = _v1394
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1395 = val4.rotation
            _x = _v1395
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1396 = val4.linear
            _x = _v1396
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1397 = val4.angular
            _x = _v1397
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1398 = val4.linear
            _x = _v1398
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1399 = val4.angular
            _x = _v1399
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1400 = val3.time_from_start
          _x = _v1400
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1391.points.append(val3)
        self.trajectory07.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory11 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1401 = val1.joint_trajectory
        _v1402 = _v1401.header
        start = end
        end += 4
        (_v1402.seq,) = _get_struct_I().unpack(str[start:end])
        _v1403 = _v1402.stamp
        _x = _v1403
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1402.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1402.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1401.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1401.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1401.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1404 = val3.time_from_start
          _x = _v1404
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1401.points.append(val3)
        _v1405 = val1.multi_dof_joint_trajectory
        _v1406 = _v1405.header
        start = end
        end += 4
        (_v1406.seq,) = _get_struct_I().unpack(str[start:end])
        _v1407 = _v1406.stamp
        _x = _v1407
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1406.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1406.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1405.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1405.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1405.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1408 = val4.translation
            _x = _v1408
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1409 = val4.rotation
            _x = _v1409
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1410 = val4.linear
            _x = _v1410
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1411 = val4.angular
            _x = _v1411
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1412 = val4.linear
            _x = _v1412
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1413 = val4.angular
            _x = _v1413
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1414 = val3.time_from_start
          _x = _v1414
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1405.points.append(val3)
        self.trajectory11.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory12 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1415 = val1.joint_trajectory
        _v1416 = _v1415.header
        start = end
        end += 4
        (_v1416.seq,) = _get_struct_I().unpack(str[start:end])
        _v1417 = _v1416.stamp
        _x = _v1417
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1416.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1416.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1415.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1415.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1415.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1418 = val3.time_from_start
          _x = _v1418
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1415.points.append(val3)
        _v1419 = val1.multi_dof_joint_trajectory
        _v1420 = _v1419.header
        start = end
        end += 4
        (_v1420.seq,) = _get_struct_I().unpack(str[start:end])
        _v1421 = _v1420.stamp
        _x = _v1421
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1420.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1420.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1419.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1419.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1419.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1422 = val4.translation
            _x = _v1422
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1423 = val4.rotation
            _x = _v1423
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1424 = val4.linear
            _x = _v1424
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1425 = val4.angular
            _x = _v1425
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1426 = val4.linear
            _x = _v1426
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1427 = val4.angular
            _x = _v1427
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1428 = val3.time_from_start
          _x = _v1428
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1419.points.append(val3)
        self.trajectory12.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory13 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1429 = val1.joint_trajectory
        _v1430 = _v1429.header
        start = end
        end += 4
        (_v1430.seq,) = _get_struct_I().unpack(str[start:end])
        _v1431 = _v1430.stamp
        _x = _v1431
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1430.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1430.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1429.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1429.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1429.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1432 = val3.time_from_start
          _x = _v1432
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1429.points.append(val3)
        _v1433 = val1.multi_dof_joint_trajectory
        _v1434 = _v1433.header
        start = end
        end += 4
        (_v1434.seq,) = _get_struct_I().unpack(str[start:end])
        _v1435 = _v1434.stamp
        _x = _v1435
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1434.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1434.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1433.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1433.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1433.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1436 = val4.translation
            _x = _v1436
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1437 = val4.rotation
            _x = _v1437
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1438 = val4.linear
            _x = _v1438
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1439 = val4.angular
            _x = _v1439
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1440 = val4.linear
            _x = _v1440
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1441 = val4.angular
            _x = _v1441
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1442 = val3.time_from_start
          _x = _v1442
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1433.points.append(val3)
        self.trajectory13.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory14 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1443 = val1.joint_trajectory
        _v1444 = _v1443.header
        start = end
        end += 4
        (_v1444.seq,) = _get_struct_I().unpack(str[start:end])
        _v1445 = _v1444.stamp
        _x = _v1445
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1444.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1444.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1443.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1443.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1443.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1446 = val3.time_from_start
          _x = _v1446
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1443.points.append(val3)
        _v1447 = val1.multi_dof_joint_trajectory
        _v1448 = _v1447.header
        start = end
        end += 4
        (_v1448.seq,) = _get_struct_I().unpack(str[start:end])
        _v1449 = _v1448.stamp
        _x = _v1449
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1448.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1448.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1447.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1447.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1447.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1450 = val4.translation
            _x = _v1450
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1451 = val4.rotation
            _x = _v1451
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1452 = val4.linear
            _x = _v1452
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1453 = val4.angular
            _x = _v1453
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1454 = val4.linear
            _x = _v1454
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1455 = val4.angular
            _x = _v1455
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1456 = val3.time_from_start
          _x = _v1456
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1447.points.append(val3)
        self.trajectory14.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory15 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1457 = val1.joint_trajectory
        _v1458 = _v1457.header
        start = end
        end += 4
        (_v1458.seq,) = _get_struct_I().unpack(str[start:end])
        _v1459 = _v1458.stamp
        _x = _v1459
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1458.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1458.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1457.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1457.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1457.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1460 = val3.time_from_start
          _x = _v1460
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1457.points.append(val3)
        _v1461 = val1.multi_dof_joint_trajectory
        _v1462 = _v1461.header
        start = end
        end += 4
        (_v1462.seq,) = _get_struct_I().unpack(str[start:end])
        _v1463 = _v1462.stamp
        _x = _v1463
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1462.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1462.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1461.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1461.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1461.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1464 = val4.translation
            _x = _v1464
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1465 = val4.rotation
            _x = _v1465
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1466 = val4.linear
            _x = _v1466
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1467 = val4.angular
            _x = _v1467
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1468 = val4.linear
            _x = _v1468
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1469 = val4.angular
            _x = _v1469
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1470 = val3.time_from_start
          _x = _v1470
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1461.points.append(val3)
        self.trajectory15.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory16 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1471 = val1.joint_trajectory
        _v1472 = _v1471.header
        start = end
        end += 4
        (_v1472.seq,) = _get_struct_I().unpack(str[start:end])
        _v1473 = _v1472.stamp
        _x = _v1473
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1472.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1472.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1471.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1471.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1471.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1474 = val3.time_from_start
          _x = _v1474
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1471.points.append(val3)
        _v1475 = val1.multi_dof_joint_trajectory
        _v1476 = _v1475.header
        start = end
        end += 4
        (_v1476.seq,) = _get_struct_I().unpack(str[start:end])
        _v1477 = _v1476.stamp
        _x = _v1477
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1476.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1476.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1475.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1475.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1475.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1478 = val4.translation
            _x = _v1478
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1479 = val4.rotation
            _x = _v1479
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1480 = val4.linear
            _x = _v1480
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1481 = val4.angular
            _x = _v1481
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1482 = val4.linear
            _x = _v1482
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1483 = val4.angular
            _x = _v1483
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1484 = val3.time_from_start
          _x = _v1484
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1475.points.append(val3)
        self.trajectory16.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory17 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1485 = val1.joint_trajectory
        _v1486 = _v1485.header
        start = end
        end += 4
        (_v1486.seq,) = _get_struct_I().unpack(str[start:end])
        _v1487 = _v1486.stamp
        _x = _v1487
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1486.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1486.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1485.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1485.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1485.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1488 = val3.time_from_start
          _x = _v1488
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1485.points.append(val3)
        _v1489 = val1.multi_dof_joint_trajectory
        _v1490 = _v1489.header
        start = end
        end += 4
        (_v1490.seq,) = _get_struct_I().unpack(str[start:end])
        _v1491 = _v1490.stamp
        _x = _v1491
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1490.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1490.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1489.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1489.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1489.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1492 = val4.translation
            _x = _v1492
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1493 = val4.rotation
            _x = _v1493
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1494 = val4.linear
            _x = _v1494
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1495 = val4.angular
            _x = _v1495
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1496 = val4.linear
            _x = _v1496
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1497 = val4.angular
            _x = _v1497
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1498 = val3.time_from_start
          _x = _v1498
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1489.points.append(val3)
        self.trajectory17.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory18 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1499 = val1.joint_trajectory
        _v1500 = _v1499.header
        start = end
        end += 4
        (_v1500.seq,) = _get_struct_I().unpack(str[start:end])
        _v1501 = _v1500.stamp
        _x = _v1501
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1500.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1500.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1499.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1499.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1499.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1502 = val3.time_from_start
          _x = _v1502
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1499.points.append(val3)
        _v1503 = val1.multi_dof_joint_trajectory
        _v1504 = _v1503.header
        start = end
        end += 4
        (_v1504.seq,) = _get_struct_I().unpack(str[start:end])
        _v1505 = _v1504.stamp
        _x = _v1505
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1504.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1504.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1503.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1503.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1503.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1506 = val4.translation
            _x = _v1506
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1507 = val4.rotation
            _x = _v1507
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1508 = val4.linear
            _x = _v1508
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1509 = val4.angular
            _x = _v1509
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1510 = val4.linear
            _x = _v1510
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1511 = val4.angular
            _x = _v1511
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1512 = val3.time_from_start
          _x = _v1512
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1503.points.append(val3)
        self.trajectory18.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory19 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1513 = val1.joint_trajectory
        _v1514 = _v1513.header
        start = end
        end += 4
        (_v1514.seq,) = _get_struct_I().unpack(str[start:end])
        _v1515 = _v1514.stamp
        _x = _v1515
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1514.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1514.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1513.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1513.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1513.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1516 = val3.time_from_start
          _x = _v1516
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1513.points.append(val3)
        _v1517 = val1.multi_dof_joint_trajectory
        _v1518 = _v1517.header
        start = end
        end += 4
        (_v1518.seq,) = _get_struct_I().unpack(str[start:end])
        _v1519 = _v1518.stamp
        _x = _v1519
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1518.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1518.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1517.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1517.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1517.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1520 = val4.translation
            _x = _v1520
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1521 = val4.rotation
            _x = _v1521
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1522 = val4.linear
            _x = _v1522
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1523 = val4.angular
            _x = _v1523
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1524 = val4.linear
            _x = _v1524
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1525 = val4.angular
            _x = _v1525
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1526 = val3.time_from_start
          _x = _v1526
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1517.points.append(val3)
        self.trajectory19.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory20 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1527 = val1.joint_trajectory
        _v1528 = _v1527.header
        start = end
        end += 4
        (_v1528.seq,) = _get_struct_I().unpack(str[start:end])
        _v1529 = _v1528.stamp
        _x = _v1529
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1528.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1528.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1527.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1527.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1527.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1530 = val3.time_from_start
          _x = _v1530
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1527.points.append(val3)
        _v1531 = val1.multi_dof_joint_trajectory
        _v1532 = _v1531.header
        start = end
        end += 4
        (_v1532.seq,) = _get_struct_I().unpack(str[start:end])
        _v1533 = _v1532.stamp
        _x = _v1533
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1532.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1532.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1531.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1531.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1531.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1534 = val4.translation
            _x = _v1534
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1535 = val4.rotation
            _x = _v1535
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1536 = val4.linear
            _x = _v1536
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1537 = val4.angular
            _x = _v1537
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1538 = val4.linear
            _x = _v1538
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1539 = val4.angular
            _x = _v1539
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1540 = val3.time_from_start
          _x = _v1540
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1531.points.append(val3)
        self.trajectory20.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory21 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1541 = val1.joint_trajectory
        _v1542 = _v1541.header
        start = end
        end += 4
        (_v1542.seq,) = _get_struct_I().unpack(str[start:end])
        _v1543 = _v1542.stamp
        _x = _v1543
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1542.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1542.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1541.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1541.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1541.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1544 = val3.time_from_start
          _x = _v1544
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1541.points.append(val3)
        _v1545 = val1.multi_dof_joint_trajectory
        _v1546 = _v1545.header
        start = end
        end += 4
        (_v1546.seq,) = _get_struct_I().unpack(str[start:end])
        _v1547 = _v1546.stamp
        _x = _v1547
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1546.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1546.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1545.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1545.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1545.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1548 = val4.translation
            _x = _v1548
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1549 = val4.rotation
            _x = _v1549
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1550 = val4.linear
            _x = _v1550
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1551 = val4.angular
            _x = _v1551
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1552 = val4.linear
            _x = _v1552
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1553 = val4.angular
            _x = _v1553
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1554 = val3.time_from_start
          _x = _v1554
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1545.points.append(val3)
        self.trajectory21.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory22 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1555 = val1.joint_trajectory
        _v1556 = _v1555.header
        start = end
        end += 4
        (_v1556.seq,) = _get_struct_I().unpack(str[start:end])
        _v1557 = _v1556.stamp
        _x = _v1557
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1556.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1556.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1555.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1555.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1555.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1558 = val3.time_from_start
          _x = _v1558
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1555.points.append(val3)
        _v1559 = val1.multi_dof_joint_trajectory
        _v1560 = _v1559.header
        start = end
        end += 4
        (_v1560.seq,) = _get_struct_I().unpack(str[start:end])
        _v1561 = _v1560.stamp
        _x = _v1561
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1560.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1560.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1559.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1559.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1559.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1562 = val4.translation
            _x = _v1562
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1563 = val4.rotation
            _x = _v1563
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1564 = val4.linear
            _x = _v1564
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1565 = val4.angular
            _x = _v1565
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1566 = val4.linear
            _x = _v1566
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1567 = val4.angular
            _x = _v1567
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1568 = val3.time_from_start
          _x = _v1568
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1559.points.append(val3)
        self.trajectory22.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory23 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1569 = val1.joint_trajectory
        _v1570 = _v1569.header
        start = end
        end += 4
        (_v1570.seq,) = _get_struct_I().unpack(str[start:end])
        _v1571 = _v1570.stamp
        _x = _v1571
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1570.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1570.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1569.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1569.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1569.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1572 = val3.time_from_start
          _x = _v1572
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1569.points.append(val3)
        _v1573 = val1.multi_dof_joint_trajectory
        _v1574 = _v1573.header
        start = end
        end += 4
        (_v1574.seq,) = _get_struct_I().unpack(str[start:end])
        _v1575 = _v1574.stamp
        _x = _v1575
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1574.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1574.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1573.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1573.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1573.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1576 = val4.translation
            _x = _v1576
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1577 = val4.rotation
            _x = _v1577
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1578 = val4.linear
            _x = _v1578
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1579 = val4.angular
            _x = _v1579
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1580 = val4.linear
            _x = _v1580
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1581 = val4.angular
            _x = _v1581
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1582 = val3.time_from_start
          _x = _v1582
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1573.points.append(val3)
        self.trajectory23.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory24 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1583 = val1.joint_trajectory
        _v1584 = _v1583.header
        start = end
        end += 4
        (_v1584.seq,) = _get_struct_I().unpack(str[start:end])
        _v1585 = _v1584.stamp
        _x = _v1585
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1584.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1584.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1583.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1583.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1583.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1586 = val3.time_from_start
          _x = _v1586
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1583.points.append(val3)
        _v1587 = val1.multi_dof_joint_trajectory
        _v1588 = _v1587.header
        start = end
        end += 4
        (_v1588.seq,) = _get_struct_I().unpack(str[start:end])
        _v1589 = _v1588.stamp
        _x = _v1589
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1588.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1588.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1587.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1587.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1587.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1590 = val4.translation
            _x = _v1590
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1591 = val4.rotation
            _x = _v1591
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1592 = val4.linear
            _x = _v1592
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1593 = val4.angular
            _x = _v1593
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1594 = val4.linear
            _x = _v1594
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1595 = val4.angular
            _x = _v1595
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1596 = val3.time_from_start
          _x = _v1596
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1587.points.append(val3)
        self.trajectory24.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory25 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1597 = val1.joint_trajectory
        _v1598 = _v1597.header
        start = end
        end += 4
        (_v1598.seq,) = _get_struct_I().unpack(str[start:end])
        _v1599 = _v1598.stamp
        _x = _v1599
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1598.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1598.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1597.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1597.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1597.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1600 = val3.time_from_start
          _x = _v1600
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1597.points.append(val3)
        _v1601 = val1.multi_dof_joint_trajectory
        _v1602 = _v1601.header
        start = end
        end += 4
        (_v1602.seq,) = _get_struct_I().unpack(str[start:end])
        _v1603 = _v1602.stamp
        _x = _v1603
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1602.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1602.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1601.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1601.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1601.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1604 = val4.translation
            _x = _v1604
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1605 = val4.rotation
            _x = _v1605
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1606 = val4.linear
            _x = _v1606
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1607 = val4.angular
            _x = _v1607
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1608 = val4.linear
            _x = _v1608
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1609 = val4.angular
            _x = _v1609
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1610 = val3.time_from_start
          _x = _v1610
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1601.points.append(val3)
        self.trajectory25.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory26 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1611 = val1.joint_trajectory
        _v1612 = _v1611.header
        start = end
        end += 4
        (_v1612.seq,) = _get_struct_I().unpack(str[start:end])
        _v1613 = _v1612.stamp
        _x = _v1613
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1612.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1612.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1611.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1611.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1611.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1614 = val3.time_from_start
          _x = _v1614
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1611.points.append(val3)
        _v1615 = val1.multi_dof_joint_trajectory
        _v1616 = _v1615.header
        start = end
        end += 4
        (_v1616.seq,) = _get_struct_I().unpack(str[start:end])
        _v1617 = _v1616.stamp
        _x = _v1617
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1616.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1616.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1615.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1615.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1615.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1618 = val4.translation
            _x = _v1618
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1619 = val4.rotation
            _x = _v1619
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1620 = val4.linear
            _x = _v1620
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1621 = val4.angular
            _x = _v1621
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1622 = val4.linear
            _x = _v1622
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1623 = val4.angular
            _x = _v1623
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1624 = val3.time_from_start
          _x = _v1624
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1615.points.append(val3)
        self.trajectory26.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory27 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1625 = val1.joint_trajectory
        _v1626 = _v1625.header
        start = end
        end += 4
        (_v1626.seq,) = _get_struct_I().unpack(str[start:end])
        _v1627 = _v1626.stamp
        _x = _v1627
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1626.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1626.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1625.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1625.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1625.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1628 = val3.time_from_start
          _x = _v1628
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1625.points.append(val3)
        _v1629 = val1.multi_dof_joint_trajectory
        _v1630 = _v1629.header
        start = end
        end += 4
        (_v1630.seq,) = _get_struct_I().unpack(str[start:end])
        _v1631 = _v1630.stamp
        _x = _v1631
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1630.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1630.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1629.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1629.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1629.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1632 = val4.translation
            _x = _v1632
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1633 = val4.rotation
            _x = _v1633
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1634 = val4.linear
            _x = _v1634
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1635 = val4.angular
            _x = _v1635
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1636 = val4.linear
            _x = _v1636
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1637 = val4.angular
            _x = _v1637
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1638 = val3.time_from_start
          _x = _v1638
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1629.points.append(val3)
        self.trajectory27.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory28 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1639 = val1.joint_trajectory
        _v1640 = _v1639.header
        start = end
        end += 4
        (_v1640.seq,) = _get_struct_I().unpack(str[start:end])
        _v1641 = _v1640.stamp
        _x = _v1641
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1640.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1640.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1639.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1639.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1639.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1642 = val3.time_from_start
          _x = _v1642
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1639.points.append(val3)
        _v1643 = val1.multi_dof_joint_trajectory
        _v1644 = _v1643.header
        start = end
        end += 4
        (_v1644.seq,) = _get_struct_I().unpack(str[start:end])
        _v1645 = _v1644.stamp
        _x = _v1645
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1644.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1644.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1643.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1643.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1643.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1646 = val4.translation
            _x = _v1646
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1647 = val4.rotation
            _x = _v1647
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1648 = val4.linear
            _x = _v1648
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1649 = val4.angular
            _x = _v1649
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1650 = val4.linear
            _x = _v1650
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1651 = val4.angular
            _x = _v1651
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1652 = val3.time_from_start
          _x = _v1652
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1643.points.append(val3)
        self.trajectory28.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory29 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1653 = val1.joint_trajectory
        _v1654 = _v1653.header
        start = end
        end += 4
        (_v1654.seq,) = _get_struct_I().unpack(str[start:end])
        _v1655 = _v1654.stamp
        _x = _v1655
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1654.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1654.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1653.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1653.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1653.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1656 = val3.time_from_start
          _x = _v1656
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1653.points.append(val3)
        _v1657 = val1.multi_dof_joint_trajectory
        _v1658 = _v1657.header
        start = end
        end += 4
        (_v1658.seq,) = _get_struct_I().unpack(str[start:end])
        _v1659 = _v1658.stamp
        _x = _v1659
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1658.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1658.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1657.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1657.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1657.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1660 = val4.translation
            _x = _v1660
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1661 = val4.rotation
            _x = _v1661
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1662 = val4.linear
            _x = _v1662
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1663 = val4.angular
            _x = _v1663
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1664 = val4.linear
            _x = _v1664
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1665 = val4.angular
            _x = _v1665
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1666 = val3.time_from_start
          _x = _v1666
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1657.points.append(val3)
        self.trajectory29.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory30 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1667 = val1.joint_trajectory
        _v1668 = _v1667.header
        start = end
        end += 4
        (_v1668.seq,) = _get_struct_I().unpack(str[start:end])
        _v1669 = _v1668.stamp
        _x = _v1669
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1668.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1668.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1667.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1667.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1667.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1670 = val3.time_from_start
          _x = _v1670
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1667.points.append(val3)
        _v1671 = val1.multi_dof_joint_trajectory
        _v1672 = _v1671.header
        start = end
        end += 4
        (_v1672.seq,) = _get_struct_I().unpack(str[start:end])
        _v1673 = _v1672.stamp
        _x = _v1673
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1672.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1672.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1671.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1671.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1671.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1674 = val4.translation
            _x = _v1674
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1675 = val4.rotation
            _x = _v1675
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1676 = val4.linear
            _x = _v1676
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1677 = val4.angular
            _x = _v1677
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1678 = val4.linear
            _x = _v1678
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1679 = val4.angular
            _x = _v1679
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1680 = val3.time_from_start
          _x = _v1680
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1671.points.append(val3)
        self.trajectory30.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory31 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1681 = val1.joint_trajectory
        _v1682 = _v1681.header
        start = end
        end += 4
        (_v1682.seq,) = _get_struct_I().unpack(str[start:end])
        _v1683 = _v1682.stamp
        _x = _v1683
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1682.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1682.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1681.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1681.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1681.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1684 = val3.time_from_start
          _x = _v1684
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1681.points.append(val3)
        _v1685 = val1.multi_dof_joint_trajectory
        _v1686 = _v1685.header
        start = end
        end += 4
        (_v1686.seq,) = _get_struct_I().unpack(str[start:end])
        _v1687 = _v1686.stamp
        _x = _v1687
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1686.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1686.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1685.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1685.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1685.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1688 = val4.translation
            _x = _v1688
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1689 = val4.rotation
            _x = _v1689
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1690 = val4.linear
            _x = _v1690
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1691 = val4.angular
            _x = _v1691
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1692 = val4.linear
            _x = _v1692
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1693 = val4.angular
            _x = _v1693
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1694 = val3.time_from_start
          _x = _v1694
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1685.points.append(val3)
        self.trajectory31.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory32 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1695 = val1.joint_trajectory
        _v1696 = _v1695.header
        start = end
        end += 4
        (_v1696.seq,) = _get_struct_I().unpack(str[start:end])
        _v1697 = _v1696.stamp
        _x = _v1697
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1696.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1696.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1695.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1695.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1695.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1698 = val3.time_from_start
          _x = _v1698
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1695.points.append(val3)
        _v1699 = val1.multi_dof_joint_trajectory
        _v1700 = _v1699.header
        start = end
        end += 4
        (_v1700.seq,) = _get_struct_I().unpack(str[start:end])
        _v1701 = _v1700.stamp
        _x = _v1701
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1700.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1700.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1699.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1699.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1699.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1702 = val4.translation
            _x = _v1702
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1703 = val4.rotation
            _x = _v1703
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1704 = val4.linear
            _x = _v1704
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1705 = val4.angular
            _x = _v1705
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1706 = val4.linear
            _x = _v1706
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1707 = val4.angular
            _x = _v1707
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1708 = val3.time_from_start
          _x = _v1708
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1699.points.append(val3)
        self.trajectory32.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory33 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1709 = val1.joint_trajectory
        _v1710 = _v1709.header
        start = end
        end += 4
        (_v1710.seq,) = _get_struct_I().unpack(str[start:end])
        _v1711 = _v1710.stamp
        _x = _v1711
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1710.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1710.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1709.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1709.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1709.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1712 = val3.time_from_start
          _x = _v1712
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1709.points.append(val3)
        _v1713 = val1.multi_dof_joint_trajectory
        _v1714 = _v1713.header
        start = end
        end += 4
        (_v1714.seq,) = _get_struct_I().unpack(str[start:end])
        _v1715 = _v1714.stamp
        _x = _v1715
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1714.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1714.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1713.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1713.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1713.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1716 = val4.translation
            _x = _v1716
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1717 = val4.rotation
            _x = _v1717
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1718 = val4.linear
            _x = _v1718
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1719 = val4.angular
            _x = _v1719
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1720 = val4.linear
            _x = _v1720
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1721 = val4.angular
            _x = _v1721
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1722 = val3.time_from_start
          _x = _v1722
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1713.points.append(val3)
        self.trajectory33.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory34 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v1723 = val1.joint_trajectory
        _v1724 = _v1723.header
        start = end
        end += 4
        (_v1724.seq,) = _get_struct_I().unpack(str[start:end])
        _v1725 = _v1724.stamp
        _x = _v1725
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1724.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1724.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1723.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1723.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1723.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v1726 = val3.time_from_start
          _x = _v1726
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1723.points.append(val3)
        _v1727 = val1.multi_dof_joint_trajectory
        _v1728 = _v1727.header
        start = end
        end += 4
        (_v1728.seq,) = _get_struct_I().unpack(str[start:end])
        _v1729 = _v1728.stamp
        _x = _v1729
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v1728.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v1728.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1727.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v1727.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v1727.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v1730 = val4.translation
            _x = _v1730
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1731 = val4.rotation
            _x = _v1731
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1732 = val4.linear
            _x = _v1732
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1733 = val4.angular
            _x = _v1733
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v1734 = val4.linear
            _x = _v1734
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v1735 = val4.angular
            _x = _v1735
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v1736 = val3.time_from_start
          _x = _v1736
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v1727.points.append(val3)
        self.trajectory34.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
class MoverService(object):
  _type          = 'robots_start/MoverService'
  _md5sum = 'c44af60b9394ecf6f3d5ea1f70a99bb3'
  _request_class  = MoverServiceRequest
  _response_class = MoverServiceResponse
