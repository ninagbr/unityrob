# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_start/MoverService2Request.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import robots_start.msg

class MoverService2Request(genpy.Message):
  _md5sum = "fe2e99216136a9c3e3f68ced32870e6a"
  _type = "robots_start/MoverService2Request"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """NiryoMoveitJoints joints_input_abb02


geometry_msgs/Pose target01
geometry_msgs/Pose target02
geometry_msgs/Pose target03
geometry_msgs/Pose target04
geometry_msgs/Pose target05
geometry_msgs/Pose target06
geometry_msgs/Pose target07
geometry_msgs/Pose target08

================================================================================
MSG: robots_start/NiryoMoveitJoints
float64[6] joints_input_abb01
float64[6] joints_input_abb02
geometry_msgs/Pose bms
geometry_msgs/Pose place_pose
geometry_msgs/Pose batterylock1
geometry_msgs/Pose batterylock2
geometry_msgs/Pose batterylock3
geometry_msgs/Pose batterylock4

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['joints_input_abb02','target01','target02','target03','target04','target05','target06','target07','target08']
  _slot_types = ['robots_start/NiryoMoveitJoints','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joints_input_abb02,target01,target02,target03,target04,target05,target06,target07,target08

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoverService2Request, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joints_input_abb02 is None:
        self.joints_input_abb02 = robots_start.msg.NiryoMoveitJoints()
      if self.target01 is None:
        self.target01 = geometry_msgs.msg.Pose()
      if self.target02 is None:
        self.target02 = geometry_msgs.msg.Pose()
      if self.target03 is None:
        self.target03 = geometry_msgs.msg.Pose()
      if self.target04 is None:
        self.target04 = geometry_msgs.msg.Pose()
      if self.target05 is None:
        self.target05 = geometry_msgs.msg.Pose()
      if self.target06 is None:
        self.target06 = geometry_msgs.msg.Pose()
      if self.target07 is None:
        self.target07 = geometry_msgs.msg.Pose()
      if self.target08 is None:
        self.target08 = geometry_msgs.msg.Pose()
    else:
      self.joints_input_abb02 = robots_start.msg.NiryoMoveitJoints()
      self.target01 = geometry_msgs.msg.Pose()
      self.target02 = geometry_msgs.msg.Pose()
      self.target03 = geometry_msgs.msg.Pose()
      self.target04 = geometry_msgs.msg.Pose()
      self.target05 = geometry_msgs.msg.Pose()
      self.target06 = geometry_msgs.msg.Pose()
      self.target07 = geometry_msgs.msg.Pose()
      self.target08 = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_6d().pack(*self.joints_input_abb02.joints_input_abb01))
      buff.write(_get_struct_6d().pack(*self.joints_input_abb02.joints_input_abb02))
      _x = self
      buff.write(_get_struct_98d().pack(_x.joints_input_abb02.bms.position.x, _x.joints_input_abb02.bms.position.y, _x.joints_input_abb02.bms.position.z, _x.joints_input_abb02.bms.orientation.x, _x.joints_input_abb02.bms.orientation.y, _x.joints_input_abb02.bms.orientation.z, _x.joints_input_abb02.bms.orientation.w, _x.joints_input_abb02.place_pose.position.x, _x.joints_input_abb02.place_pose.position.y, _x.joints_input_abb02.place_pose.position.z, _x.joints_input_abb02.place_pose.orientation.x, _x.joints_input_abb02.place_pose.orientation.y, _x.joints_input_abb02.place_pose.orientation.z, _x.joints_input_abb02.place_pose.orientation.w, _x.joints_input_abb02.batterylock1.position.x, _x.joints_input_abb02.batterylock1.position.y, _x.joints_input_abb02.batterylock1.position.z, _x.joints_input_abb02.batterylock1.orientation.x, _x.joints_input_abb02.batterylock1.orientation.y, _x.joints_input_abb02.batterylock1.orientation.z, _x.joints_input_abb02.batterylock1.orientation.w, _x.joints_input_abb02.batterylock2.position.x, _x.joints_input_abb02.batterylock2.position.y, _x.joints_input_abb02.batterylock2.position.z, _x.joints_input_abb02.batterylock2.orientation.x, _x.joints_input_abb02.batterylock2.orientation.y, _x.joints_input_abb02.batterylock2.orientation.z, _x.joints_input_abb02.batterylock2.orientation.w, _x.joints_input_abb02.batterylock3.position.x, _x.joints_input_abb02.batterylock3.position.y, _x.joints_input_abb02.batterylock3.position.z, _x.joints_input_abb02.batterylock3.orientation.x, _x.joints_input_abb02.batterylock3.orientation.y, _x.joints_input_abb02.batterylock3.orientation.z, _x.joints_input_abb02.batterylock3.orientation.w, _x.joints_input_abb02.batterylock4.position.x, _x.joints_input_abb02.batterylock4.position.y, _x.joints_input_abb02.batterylock4.position.z, _x.joints_input_abb02.batterylock4.orientation.x, _x.joints_input_abb02.batterylock4.orientation.y, _x.joints_input_abb02.batterylock4.orientation.z, _x.joints_input_abb02.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joints_input_abb02 is None:
        self.joints_input_abb02 = robots_start.msg.NiryoMoveitJoints()
      if self.target01 is None:
        self.target01 = geometry_msgs.msg.Pose()
      if self.target02 is None:
        self.target02 = geometry_msgs.msg.Pose()
      if self.target03 is None:
        self.target03 = geometry_msgs.msg.Pose()
      if self.target04 is None:
        self.target04 = geometry_msgs.msg.Pose()
      if self.target05 is None:
        self.target05 = geometry_msgs.msg.Pose()
      if self.target06 is None:
        self.target06 = geometry_msgs.msg.Pose()
      if self.target07 is None:
        self.target07 = geometry_msgs.msg.Pose()
      if self.target08 is None:
        self.target08 = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 48
      self.joints_input_abb02.joints_input_abb01 = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 48
      self.joints_input_abb02.joints_input_abb02 = _get_struct_6d().unpack(str[start:end])
      _x = self
      start = end
      end += 784
      (_x.joints_input_abb02.bms.position.x, _x.joints_input_abb02.bms.position.y, _x.joints_input_abb02.bms.position.z, _x.joints_input_abb02.bms.orientation.x, _x.joints_input_abb02.bms.orientation.y, _x.joints_input_abb02.bms.orientation.z, _x.joints_input_abb02.bms.orientation.w, _x.joints_input_abb02.place_pose.position.x, _x.joints_input_abb02.place_pose.position.y, _x.joints_input_abb02.place_pose.position.z, _x.joints_input_abb02.place_pose.orientation.x, _x.joints_input_abb02.place_pose.orientation.y, _x.joints_input_abb02.place_pose.orientation.z, _x.joints_input_abb02.place_pose.orientation.w, _x.joints_input_abb02.batterylock1.position.x, _x.joints_input_abb02.batterylock1.position.y, _x.joints_input_abb02.batterylock1.position.z, _x.joints_input_abb02.batterylock1.orientation.x, _x.joints_input_abb02.batterylock1.orientation.y, _x.joints_input_abb02.batterylock1.orientation.z, _x.joints_input_abb02.batterylock1.orientation.w, _x.joints_input_abb02.batterylock2.position.x, _x.joints_input_abb02.batterylock2.position.y, _x.joints_input_abb02.batterylock2.position.z, _x.joints_input_abb02.batterylock2.orientation.x, _x.joints_input_abb02.batterylock2.orientation.y, _x.joints_input_abb02.batterylock2.orientation.z, _x.joints_input_abb02.batterylock2.orientation.w, _x.joints_input_abb02.batterylock3.position.x, _x.joints_input_abb02.batterylock3.position.y, _x.joints_input_abb02.batterylock3.position.z, _x.joints_input_abb02.batterylock3.orientation.x, _x.joints_input_abb02.batterylock3.orientation.y, _x.joints_input_abb02.batterylock3.orientation.z, _x.joints_input_abb02.batterylock3.orientation.w, _x.joints_input_abb02.batterylock4.position.x, _x.joints_input_abb02.batterylock4.position.y, _x.joints_input_abb02.batterylock4.position.z, _x.joints_input_abb02.batterylock4.orientation.x, _x.joints_input_abb02.batterylock4.orientation.y, _x.joints_input_abb02.batterylock4.orientation.z, _x.joints_input_abb02.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w,) = _get_struct_98d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.joints_input_abb02.joints_input_abb01.tostring())
      buff.write(self.joints_input_abb02.joints_input_abb02.tostring())
      _x = self
      buff.write(_get_struct_98d().pack(_x.joints_input_abb02.bms.position.x, _x.joints_input_abb02.bms.position.y, _x.joints_input_abb02.bms.position.z, _x.joints_input_abb02.bms.orientation.x, _x.joints_input_abb02.bms.orientation.y, _x.joints_input_abb02.bms.orientation.z, _x.joints_input_abb02.bms.orientation.w, _x.joints_input_abb02.place_pose.position.x, _x.joints_input_abb02.place_pose.position.y, _x.joints_input_abb02.place_pose.position.z, _x.joints_input_abb02.place_pose.orientation.x, _x.joints_input_abb02.place_pose.orientation.y, _x.joints_input_abb02.place_pose.orientation.z, _x.joints_input_abb02.place_pose.orientation.w, _x.joints_input_abb02.batterylock1.position.x, _x.joints_input_abb02.batterylock1.position.y, _x.joints_input_abb02.batterylock1.position.z, _x.joints_input_abb02.batterylock1.orientation.x, _x.joints_input_abb02.batterylock1.orientation.y, _x.joints_input_abb02.batterylock1.orientation.z, _x.joints_input_abb02.batterylock1.orientation.w, _x.joints_input_abb02.batterylock2.position.x, _x.joints_input_abb02.batterylock2.position.y, _x.joints_input_abb02.batterylock2.position.z, _x.joints_input_abb02.batterylock2.orientation.x, _x.joints_input_abb02.batterylock2.orientation.y, _x.joints_input_abb02.batterylock2.orientation.z, _x.joints_input_abb02.batterylock2.orientation.w, _x.joints_input_abb02.batterylock3.position.x, _x.joints_input_abb02.batterylock3.position.y, _x.joints_input_abb02.batterylock3.position.z, _x.joints_input_abb02.batterylock3.orientation.x, _x.joints_input_abb02.batterylock3.orientation.y, _x.joints_input_abb02.batterylock3.orientation.z, _x.joints_input_abb02.batterylock3.orientation.w, _x.joints_input_abb02.batterylock4.position.x, _x.joints_input_abb02.batterylock4.position.y, _x.joints_input_abb02.batterylock4.position.z, _x.joints_input_abb02.batterylock4.orientation.x, _x.joints_input_abb02.batterylock4.orientation.y, _x.joints_input_abb02.batterylock4.orientation.z, _x.joints_input_abb02.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joints_input_abb02 is None:
        self.joints_input_abb02 = robots_start.msg.NiryoMoveitJoints()
      if self.target01 is None:
        self.target01 = geometry_msgs.msg.Pose()
      if self.target02 is None:
        self.target02 = geometry_msgs.msg.Pose()
      if self.target03 is None:
        self.target03 = geometry_msgs.msg.Pose()
      if self.target04 is None:
        self.target04 = geometry_msgs.msg.Pose()
      if self.target05 is None:
        self.target05 = geometry_msgs.msg.Pose()
      if self.target06 is None:
        self.target06 = geometry_msgs.msg.Pose()
      if self.target07 is None:
        self.target07 = geometry_msgs.msg.Pose()
      if self.target08 is None:
        self.target08 = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 48
      self.joints_input_abb02.joints_input_abb01 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 48
      self.joints_input_abb02.joints_input_abb02 = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      _x = self
      start = end
      end += 784
      (_x.joints_input_abb02.bms.position.x, _x.joints_input_abb02.bms.position.y, _x.joints_input_abb02.bms.position.z, _x.joints_input_abb02.bms.orientation.x, _x.joints_input_abb02.bms.orientation.y, _x.joints_input_abb02.bms.orientation.z, _x.joints_input_abb02.bms.orientation.w, _x.joints_input_abb02.place_pose.position.x, _x.joints_input_abb02.place_pose.position.y, _x.joints_input_abb02.place_pose.position.z, _x.joints_input_abb02.place_pose.orientation.x, _x.joints_input_abb02.place_pose.orientation.y, _x.joints_input_abb02.place_pose.orientation.z, _x.joints_input_abb02.place_pose.orientation.w, _x.joints_input_abb02.batterylock1.position.x, _x.joints_input_abb02.batterylock1.position.y, _x.joints_input_abb02.batterylock1.position.z, _x.joints_input_abb02.batterylock1.orientation.x, _x.joints_input_abb02.batterylock1.orientation.y, _x.joints_input_abb02.batterylock1.orientation.z, _x.joints_input_abb02.batterylock1.orientation.w, _x.joints_input_abb02.batterylock2.position.x, _x.joints_input_abb02.batterylock2.position.y, _x.joints_input_abb02.batterylock2.position.z, _x.joints_input_abb02.batterylock2.orientation.x, _x.joints_input_abb02.batterylock2.orientation.y, _x.joints_input_abb02.batterylock2.orientation.z, _x.joints_input_abb02.batterylock2.orientation.w, _x.joints_input_abb02.batterylock3.position.x, _x.joints_input_abb02.batterylock3.position.y, _x.joints_input_abb02.batterylock3.position.z, _x.joints_input_abb02.batterylock3.orientation.x, _x.joints_input_abb02.batterylock3.orientation.y, _x.joints_input_abb02.batterylock3.orientation.z, _x.joints_input_abb02.batterylock3.orientation.w, _x.joints_input_abb02.batterylock4.position.x, _x.joints_input_abb02.batterylock4.position.y, _x.joints_input_abb02.batterylock4.position.z, _x.joints_input_abb02.batterylock4.orientation.x, _x.joints_input_abb02.batterylock4.orientation.y, _x.joints_input_abb02.batterylock4.orientation.z, _x.joints_input_abb02.batterylock4.orientation.w, _x.target01.position.x, _x.target01.position.y, _x.target01.position.z, _x.target01.orientation.x, _x.target01.orientation.y, _x.target01.orientation.z, _x.target01.orientation.w, _x.target02.position.x, _x.target02.position.y, _x.target02.position.z, _x.target02.orientation.x, _x.target02.orientation.y, _x.target02.orientation.z, _x.target02.orientation.w, _x.target03.position.x, _x.target03.position.y, _x.target03.position.z, _x.target03.orientation.x, _x.target03.orientation.y, _x.target03.orientation.z, _x.target03.orientation.w, _x.target04.position.x, _x.target04.position.y, _x.target04.position.z, _x.target04.orientation.x, _x.target04.orientation.y, _x.target04.orientation.z, _x.target04.orientation.w, _x.target05.position.x, _x.target05.position.y, _x.target05.position.z, _x.target05.orientation.x, _x.target05.orientation.y, _x.target05.orientation.z, _x.target05.orientation.w, _x.target06.position.x, _x.target06.position.y, _x.target06.position.z, _x.target06.orientation.x, _x.target06.orientation.y, _x.target06.orientation.z, _x.target06.orientation.w, _x.target07.position.x, _x.target07.position.y, _x.target07.position.z, _x.target07.orientation.x, _x.target07.orientation.y, _x.target07.orientation.z, _x.target07.orientation.w, _x.target08.position.x, _x.target08.position.y, _x.target08.position.z, _x.target08.orientation.x, _x.target08.orientation.y, _x.target08.orientation.z, _x.target08.orientation.w,) = _get_struct_98d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_98d = None
def _get_struct_98d():
    global _struct_98d
    if _struct_98d is None:
        _struct_98d = struct.Struct("<98d")
    return _struct_98d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robots_start/MoverService2Response.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class MoverService2Response(genpy.Message):
  _md5sum = "617aaf337e8f0c5e1524b0855761c323"
  _type = "robots_start/MoverService2Response"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """moveit_msgs/RobotTrajectory[] trajectories_abb01
moveit_msgs/RobotTrajectory[] trajectories_abb02


================================================================================
MSG: moveit_msgs/RobotTrajectory
trajectory_msgs/JointTrajectory joint_trajectory
trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectory
# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['trajectories_abb01','trajectories_abb02']
  _slot_types = ['moveit_msgs/RobotTrajectory[]','moveit_msgs/RobotTrajectory[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectories_abb01,trajectories_abb02

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoverService2Response, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.trajectories_abb01 is None:
        self.trajectories_abb01 = []
      if self.trajectories_abb02 is None:
        self.trajectories_abb02 = []
    else:
      self.trajectories_abb01 = []
      self.trajectories_abb02 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectories_abb01)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories_abb01:
        _v1 = val1.joint_trajectory
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v4 = val3.time_from_start
          _x = _v4
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v5 = val1.multi_dof_joint_trajectory
        _v6 = _v5.header
        _x = _v6.seq
        buff.write(_get_struct_I().pack(_x))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v5.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v5.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v8 = val4.translation
            _x = _v8
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v9 = val4.rotation
            _x = _v9
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v10 = val4.linear
            _x = _v10
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v11 = val4.angular
            _x = _v11
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v12 = val4.linear
            _x = _v12
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v13 = val4.angular
            _x = _v13
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = val3.time_from_start
          _x = _v14
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectories_abb02)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories_abb02:
        _v15 = val1.joint_trajectory
        _v16 = _v15.header
        _x = _v16.seq
        buff.write(_get_struct_I().pack(_x))
        _v17 = _v16.stamp
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v16.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v15.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v15.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v15.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v18 = val3.time_from_start
          _x = _v18
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v19 = val1.multi_dof_joint_trajectory
        _v20 = _v19.header
        _x = _v20.seq
        buff.write(_get_struct_I().pack(_x))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v19.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v22 = val4.translation
            _x = _v22
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v23 = val4.rotation
            _x = _v23
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v24 = val4.linear
            _x = _v24
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v25 = val4.angular
            _x = _v25
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v26 = val4.linear
            _x = _v26
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v27 = val4.angular
            _x = _v27
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v28 = val3.time_from_start
          _x = _v28
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories_abb01 is None:
        self.trajectories_abb01 = None
      if self.trajectories_abb02 is None:
        self.trajectories_abb02 = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories_abb01 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v29 = val1.joint_trajectory
        _v30 = _v29.header
        start = end
        end += 4
        (_v30.seq,) = _get_struct_I().unpack(str[start:end])
        _v31 = _v30.stamp
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v29.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v29.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v29.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v32 = val3.time_from_start
          _x = _v32
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v29.points.append(val3)
        _v33 = val1.multi_dof_joint_trajectory
        _v34 = _v33.header
        start = end
        end += 4
        (_v34.seq,) = _get_struct_I().unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v34.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v33.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v33.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v33.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v36 = val4.translation
            _x = _v36
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v37 = val4.rotation
            _x = _v37
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v38 = val4.linear
            _x = _v38
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v39 = val4.angular
            _x = _v39
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v40 = val4.linear
            _x = _v40
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v41 = val4.angular
            _x = _v41
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v42 = val3.time_from_start
          _x = _v42
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v33.points.append(val3)
        self.trajectories_abb01.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories_abb02 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v43 = val1.joint_trajectory
        _v44 = _v43.header
        start = end
        end += 4
        (_v44.seq,) = _get_struct_I().unpack(str[start:end])
        _v45 = _v44.stamp
        _x = _v45
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v44.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v44.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v43.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v43.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v43.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v46 = val3.time_from_start
          _x = _v46
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v43.points.append(val3)
        _v47 = val1.multi_dof_joint_trajectory
        _v48 = _v47.header
        start = end
        end += 4
        (_v48.seq,) = _get_struct_I().unpack(str[start:end])
        _v49 = _v48.stamp
        _x = _v49
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v48.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v48.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v47.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v50 = val4.translation
            _x = _v50
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v51 = val4.rotation
            _x = _v51
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v52 = val4.linear
            _x = _v52
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v53 = val4.angular
            _x = _v53
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v54 = val4.linear
            _x = _v54
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v55 = val4.angular
            _x = _v55
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v56 = val3.time_from_start
          _x = _v56
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v47.points.append(val3)
        self.trajectories_abb02.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectories_abb01)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories_abb01:
        _v57 = val1.joint_trajectory
        _v58 = _v57.header
        _x = _v58.seq
        buff.write(_get_struct_I().pack(_x))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v57.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v57.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v57.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v60 = val3.time_from_start
          _x = _v60
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v61 = val1.multi_dof_joint_trajectory
        _v62 = _v61.header
        _x = _v62.seq
        buff.write(_get_struct_I().pack(_x))
        _v63 = _v62.stamp
        _x = _v63
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v62.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v61.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v61.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v61.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v61.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v64 = val4.translation
            _x = _v64
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v65 = val4.rotation
            _x = _v65
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v66 = val4.linear
            _x = _v66
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v67 = val4.angular
            _x = _v67
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v68 = val4.linear
            _x = _v68
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v69 = val4.angular
            _x = _v69
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v70 = val3.time_from_start
          _x = _v70
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.trajectories_abb02)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectories_abb02:
        _v71 = val1.joint_trajectory
        _v72 = _v71.header
        _x = _v72.seq
        buff.write(_get_struct_I().pack(_x))
        _v73 = _v72.stamp
        _x = _v73
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v72.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v71.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v71.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v71.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v71.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v74 = val3.time_from_start
          _x = _v74
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v75 = val1.multi_dof_joint_trajectory
        _v76 = _v75.header
        _x = _v76.seq
        buff.write(_get_struct_I().pack(_x))
        _v77 = _v76.stamp
        _x = _v77
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v76.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v75.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v75.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v75.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v75.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v78 = val4.translation
            _x = _v78
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v79 = val4.rotation
            _x = _v79
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v80 = val4.linear
            _x = _v80
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v81 = val4.angular
            _x = _v81
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v82 = val4.linear
            _x = _v82
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v83 = val4.angular
            _x = _v83
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v84 = val3.time_from_start
          _x = _v84
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectories_abb01 is None:
        self.trajectories_abb01 = None
      if self.trajectories_abb02 is None:
        self.trajectories_abb02 = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories_abb01 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v85 = val1.joint_trajectory
        _v86 = _v85.header
        start = end
        end += 4
        (_v86.seq,) = _get_struct_I().unpack(str[start:end])
        _v87 = _v86.stamp
        _x = _v87
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v86.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v86.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v85.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v85.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v85.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v88 = val3.time_from_start
          _x = _v88
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v85.points.append(val3)
        _v89 = val1.multi_dof_joint_trajectory
        _v90 = _v89.header
        start = end
        end += 4
        (_v90.seq,) = _get_struct_I().unpack(str[start:end])
        _v91 = _v90.stamp
        _x = _v91
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v90.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v90.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v89.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v89.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v89.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v92 = val4.translation
            _x = _v92
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v93 = val4.rotation
            _x = _v93
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v94 = val4.linear
            _x = _v94
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v95 = val4.angular
            _x = _v95
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v96 = val4.linear
            _x = _v96
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v97 = val4.angular
            _x = _v97
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v98 = val3.time_from_start
          _x = _v98
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v89.points.append(val3)
        self.trajectories_abb01.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectories_abb02 = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v99 = val1.joint_trajectory
        _v100 = _v99.header
        start = end
        end += 4
        (_v100.seq,) = _get_struct_I().unpack(str[start:end])
        _v101 = _v100.stamp
        _x = _v101
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v100.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v100.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v99.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v99.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v99.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v102 = val3.time_from_start
          _x = _v102
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v99.points.append(val3)
        _v103 = val1.multi_dof_joint_trajectory
        _v104 = _v103.header
        start = end
        end += 4
        (_v104.seq,) = _get_struct_I().unpack(str[start:end])
        _v105 = _v104.stamp
        _x = _v105
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v104.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v104.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v103.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v103.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v103.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v106 = val4.translation
            _x = _v106
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v107 = val4.rotation
            _x = _v107
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v108 = val4.linear
            _x = _v108
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v109 = val4.angular
            _x = _v109
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v110 = val4.linear
            _x = _v110
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v111 = val4.angular
            _x = _v111
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v112 = val3.time_from_start
          _x = _v112
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v103.points.append(val3)
        self.trajectories_abb02.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
class MoverService2(object):
  _type          = 'robots_start/MoverService2'
  _md5sum = 'a6b0f7c9c76a11297038273db05e9cbd'
  _request_class  = MoverService2Request
  _response_class = MoverService2Response
